import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,a as n,d as s,b as e,e as a}from"./app-DxMJFouC.js";const c={},u=a(`<h1 id="_11-22-判断字母异位词" tabindex="-1"><a class="header-anchor" href="#_11-22-判断字母异位词"><span>11.22 判断字母异位词</span></a></h1><h2 id="version-1" tabindex="-1"><a class="header-anchor" href="#version-1"><span>version 1</span></a></h2><ul><li>用字典获取词频</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        count_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        count_dict_s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> t<span class="token punctuation">:</span>
            count_dict<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> count_dict<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">if</span> item <span class="token keyword">in</span> count_dict <span class="token keyword">else</span> <span class="token number">1</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            count_dict_s<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> count_dict_s<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">if</span> item <span class="token keyword">in</span> count_dict_s <span class="token keyword">else</span> <span class="token number">1</span>
        <span class="token keyword">if</span> count_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> count_dict_s<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> count_dict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> count_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> count_dict_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行用时：48 ms, 在所有 Python3 提交中击败了91.08%的用户</li><li>内存消耗：13.6 MB, 在所有 Python3 提交中击败了56.70%的用户</li></ul><hr><h2 id="version-2" tabindex="-1"><a class="header-anchor" href="#version-2"><span>version 2</span></a></h2><ul><li>比较排序后的字符串</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> t<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token keyword">if</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行用时：68 ms, 在所有 Python3 提交中击败了35.57%的用户</li><li>内存消耗：14.2 MB, 在所有 Python3 提交中击败了30.44%的用户</li></ul><hr><h1 id="_3-13-两数相加" tabindex="-1"><a class="header-anchor" href="#_3-13-两数相加"><span>3.13 两数相加</span></a></h1><ul><li>本题接触到了LeetCode的ListNode类</li><li>ListNodeObject.val -&gt; 取该结点的值</li><li>ListNodeObject.next -&gt; 该结点下一个结点</li></ul><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目"><span>题目</span></a></h2><ul><li><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p></li><li><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p></li><li><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></li><li><p>示例1</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8] 
解释：342 + 465 = 807.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="version1-自己写的垃圾" tabindex="-1"><a class="header-anchor" href="#version1-自己写的垃圾"><span>version1(自己写的垃圾)</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        add_temp<span class="token operator">=</span> l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val
        l3 <span class="token operator">=</span> l4 <span class="token operator">=</span> ListNode<span class="token punctuation">(</span> add_temp <span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span>
        carry <span class="token operator">=</span> add_temp <span class="token operator">//</span> <span class="token number">10</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">or</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">else</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>
            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">if</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">else</span> ListNode<span class="token punctuation">(</span><span class="token punctuation">)</span>
            add_temp <span class="token operator">=</span> l1<span class="token punctuation">.</span>val <span class="token operator">+</span> l2<span class="token punctuation">.</span>val <span class="token operator">+</span> carry
            l4<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span> add_temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
            carry <span class="token operator">=</span> add_temp <span class="token operator">//</span> <span class="token number">10</span>
            l4 <span class="token operator">=</span> l4<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">if</span> carry<span class="token punctuation">:</span>
            l4<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> l3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>1568/1568 cases passed (80 ms)</p></li><li><p>Your runtime beats 29.08 % of python3 submissions</p></li><li><p>Your memory usage beats 26.98 % of python3 submissions (14.9 MB)</p><hr></li><li><p>生草,再执行一次又变了,不改了不改了</p></li><li><p>1568/1568 cases passed (68 ms)</p></li><li><p>Your runtime beats 74.05 % of python3 submissions</p></li><li><p>Your memory usage beats 87.85 % of python3 submissions (14.7 MB)</p></li></ul><hr><h2 id="version2-速度最快的典型代码" tabindex="-1"><a class="header-anchor" href="#version2-速度最快的典型代码"><span>version2(速度最快的典型代码)</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> l2<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        carry <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 表示进位</span>
        head <span class="token operator">=</span> curr <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> l1 <span class="token keyword">or</span> l2<span class="token punctuation">:</span>
            val <span class="token operator">=</span> carry
            <span class="token keyword">if</span> l1<span class="token punctuation">:</span>
                val <span class="token operator">+=</span> l1<span class="token punctuation">.</span>val
                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">if</span> l2<span class="token punctuation">:</span>
                val <span class="token operator">+=</span> l2<span class="token punctuation">.</span>val
                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>

            curr<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span><span class="token builtin">next</span>
            carry <span class="token operator">=</span> val <span class="token operator">//</span> <span class="token number">10</span>
        <span class="token keyword">if</span> carry<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>
            curr<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>carry<span class="token punctuation">)</span>


        <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="解析指路" tabindex="-1"><a class="header-anchor" href="#解析指路"><span>解析指路</span></a></h2>`,23),r={href:"https://www.cxyxiaowu.com/6843.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<hr><h1 id="_3-14-无重复的最长字符串" tabindex="-1"><a class="header-anchor" href="#_3-14-无重复的最长字符串"><span>3.14 无重复的最长字符串</span></a></h1><ul><li>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</li><li>示例 1:<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: s = &quot;abcabcbb&quot;
输出: 3 
解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h2>`,5),d=n("li",null,"滑动窗口解题",-1),m={href:"https://www.cxyxiaowu.com/6845.html",target:"_blank",rel:"noopener noreferrer"},v=a(`<hr><h2 id="自己的粪码" tabindex="-1"><a class="header-anchor" href="#自己的粪码"><span>自己的粪码</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        ans <span class="token operator">=</span> <span class="token number">0</span>
        lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">while</span> right <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> lst<span class="token punctuation">:</span>
                lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                right <span class="token operator">+=</span> <span class="token number">1</span>
                ans <span class="token operator">=</span> right<span class="token operator">-</span>left <span class="token keyword">if</span> ans <span class="token operator">&lt;</span> right<span class="token operator">-</span>left <span class="token keyword">else</span> ans 
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                lst<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>987/987 cases passed (184 ms)</li><li>Your runtime beats 18.15 % of python3 submissions</li><li>Your memory usage beats 68.32 % of python3 submissions (14.9 MB)</li><li>估计大部分时间都花在判断数字是否在列表里了,改进的话打算用字典</li></ul><hr><h2 id="力扣加加" tabindex="-1"><a class="header-anchor" href="#力扣加加"><span>力扣加加</span></a></h2><ul><li>能自动生成默认值的字典</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        l <span class="token operator">=</span> <span class="token number">0</span>
        ans <span class="token operator">=</span> <span class="token number">0</span>
        counter <span class="token operator">=</span> defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>

        <span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> counter<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                counter<span class="token punctuation">[</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> counter<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
                l <span class="token operator">+=</span> <span class="token number">1</span>
            counter<span class="token punctuation">[</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
            ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> ans
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>987/987 cases passed (92 ms)</li><li>Your runtime beats 34.48 % of python3 submissions</li><li><h2 id="your-memory-usage-beats-49-33-of-python3-submissions-15-mb" tabindex="-1"><a class="header-anchor" href="#your-memory-usage-beats-49-33-of-python3-submissions-15-mb"><span>Your memory usage beats 49.33 % of python3 submissions (15 MB)</span></a></h2></li><li><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>若执行后面语句时有对不在字典值内的数据进行判断的情况,则默认生成一个索引为该值,值为0的项</li></ul><hr></li><li><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>counter<span class="token punctuation">.</span>get<span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>取s[l]的值,若没有则返回0</li></ul><h1 id="_3-15-排序链表-t148" tabindex="-1"><a class="header-anchor" href="#_3-15-排序链表-t148"><span>3.15 排序链表(T148)</span></a></h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述"><span>题目描述</span></a></h2>`,11),b=n("ul",null,[n("li",null,[s("给你链表的头结点 head ，请将其按 "),n("strong",null,"升序"),s(" 排列并返回 "),n("strong",null,"排序后的链表"),s(" 。")]),n("li",null,[s("进阶： "),n("ul",null,[n("li",null,"你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？")])]),n("li",null,[n("strong",null,"示例1"),s("： "),n("ul",null,[n("li",null,[n("img",{src:"http://cdn.ayusummer233.top/img/20210315084827.png",alt:"20210315084827"})])]),n("div",{class:"language-text line-numbers-mode","data-ext":"text","data-title":"text"},[n("pre",{class:"language-text"},[n("code",null,`输入：head = [4,2,1,3]
输出：[1,2,3,4]
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])]),n("li",null,[s("提示: "),n("ul",null,[n("li",null,[s("链表中节点的数目在范围 [0, "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"5"),n("mo",null,"∗"),n("mn",null,"1"),n("msup",null,[n("mn",null,"0"),n("mn",null,"4")])]),n("annotation",{encoding:"application/x-tex"},"5 * 10^4")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"5"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mord"},[n("span",{class:"mord"},"0"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"4")])])])])])])])])])]),s("] 内")]),n("li",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mrow",null,[n("mo",null,"−"),n("mn",null,"10")]),n("mn",null,"5")]),n("mo",null,"<"),n("mo",null,"="),n("mi",null,"N"),n("mi",null,"o"),n("mi",null,"d"),n("mi",null,"e"),n("mi",{mathvariant:"normal"},"."),n("mi",null,"v"),n("mi",null,"a"),n("mi",null,"l"),n("mo",null,"<"),n("mo",null,"="),n("msup",null,[n("mn",null,"10"),n("mn",null,"5")])]),n("annotation",{encoding:"application/x-tex"},"{-10}^5 <= Node.val <= {10}^5")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.9318em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord"},"−"),n("span",{class:"mord"},"10")]),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8484em"}},[n("span",{style:{top:"-3.0973em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"5")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"<="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7335em","vertical-align":"-0.0391em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord"},"."),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"<="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8484em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord"},"10")]),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8484em"}},[n("span",{style:{top:"-3.0973em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"5")])])])])])])])])])])])])])],-1),h=n("hr",null,null,-1),y=n("h2",{id:"归并排序-递归",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#归并排序-递归"},[n("span",null,"归并排序(递归)")])],-1),g={href:"https://leetcode-cn.com/problems/sort-list/solution/sort-list-gui-bing-pai-xu-lian-biao-by-jyd/",target:"_blank",rel:"noopener noreferrer"},w=n("li",null,[n("img",{src:"http://cdn.ayusummer233.top/img/20210315085242.png",alt:"20210315085242"})],-1),f=a(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">sortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> head <span class="token keyword">or</span> <span class="token keyword">not</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span> <span class="token keyword">return</span> head <span class="token comment"># termination.</span>
        <span class="token comment"># cut the LinkedList at the mid index.</span>
        slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            fast<span class="token punctuation">,</span> slow <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
        mid<span class="token punctuation">,</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> <span class="token boolean">None</span> <span class="token comment"># save and cut.</span>
        <span class="token comment"># recursive for cutting.</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> self<span class="token punctuation">.</span>sortList<span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>sortList<span class="token punctuation">(</span>mid<span class="token punctuation">)</span>
        <span class="token comment"># merge \`left\` and \`right\` linked list and return it.</span>
        h <span class="token operator">=</span> res <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> left<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> right<span class="token punctuation">.</span>val<span class="token punctuation">:</span> h<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> left <span class="token operator">=</span> left<span class="token punctuation">,</span> left<span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span> h<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> right <span class="token operator">=</span> right<span class="token punctuation">,</span> right<span class="token punctuation">.</span><span class="token builtin">next</span>
            h <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token builtin">next</span>
        h<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> left <span class="token keyword">if</span> left <span class="token keyword">else</span> right
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token builtin">next</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>28/28 cases passed (356 ms)</li><li>Your runtime beats 88.6 % of python3 submissions</li><li>Your memory usage beats 53.5 % of python3 submissions (30 MB)</li></ul>`,2);function x(_,L){const t=o("ExternalLinkIcon");return l(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("五分钟学算法"),e(t)])])]),k,n("ul",null,[d,n("li",null,[n("a",m,[s("五分钟学算法"),e(t)])])]),v,b,h,y,n("ul",null,[n("li",null,[n("a",g,[s("源自@Krahets"),e(t)])]),w]),f])}const E=p(c,[["render",x],["__file","LeetCodeNote.html.vue"]]),M=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E7%AE%97%E6%B3%95/LeetCode/LeetCodeNote.html","title":"11.22 判断字母异位词","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"version 1","slug":"version-1","link":"#version-1","children":[]},{"level":2,"title":"version 2","slug":"version-2","link":"#version-2","children":[]},{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"version1(自己写的垃圾)","slug":"version1-自己写的垃圾","link":"#version1-自己写的垃圾","children":[]},{"level":2,"title":"version2(速度最快的典型代码)","slug":"version2-速度最快的典型代码","link":"#version2-速度最快的典型代码","children":[]},{"level":2,"title":"解析指路","slug":"解析指路","link":"#解析指路","children":[]},{"level":2,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":2,"title":"自己的粪码","slug":"自己的粪码","link":"#自己的粪码","children":[]},{"level":2,"title":"力扣加加","slug":"力扣加加","link":"#力扣加加","children":[]},{"level":2,"title":"题目描述","slug":"题目描述","link":"#题目描述","children":[]},{"level":2,"title":"归并排序(递归)","slug":"归并排序-递归","link":"#归并排序-递归","children":[]}],"git":{"createdTime":1667841430000,"updatedTime":1667841430000,"contributors":[{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":1}]},"readingTime":{"minutes":3.9,"words":1170},"filePathRelative":"学习路线/算法/LeetCode/LeetCodeNote.md","localizedDate":"2022年11月7日","excerpt":"<!--\\n * @Author: your name\\n * @Date: 2021-01-22 00:35:37\\n * @LastEditTime: 2021-03-15 12:16:21\\n * @LastEditors: Please set LastEditors\\n * @Description: In User Settings Edit\\n * @FilePath: \\\\DailyNotes\\\\LeetCode\\\\LeetCodeNote.md\\n-->\\n<h1>11.22 判断字母异位词</h1>\\n<h2>version 1</h2>\\n<ul>\\n<li>用字典获取词频</li>\\n</ul>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">isAnagram</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> s<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">,</span> t<span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">str</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token builtin\\">bool</span><span class=\\"token punctuation\\">:</span>\\n        count_dict <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n        count_dict_s <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">for</span> item <span class=\\"token keyword\\">in</span> t<span class=\\"token punctuation\\">:</span>\\n            count_dict<span class=\\"token punctuation\\">[</span>item<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> count_dict<span class=\\"token punctuation\\">[</span>item<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token keyword\\">if</span> item <span class=\\"token keyword\\">in</span> count_dict <span class=\\"token keyword\\">else</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token keyword\\">for</span> item <span class=\\"token keyword\\">in</span> s<span class=\\"token punctuation\\">:</span>\\n            count_dict_s<span class=\\"token punctuation\\">[</span>item<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> count_dict_s<span class=\\"token punctuation\\">[</span>item<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token keyword\\">if</span> item <span class=\\"token keyword\\">in</span> count_dict_s <span class=\\"token keyword\\">else</span> <span class=\\"token number\\">1</span>\\n        <span class=\\"token keyword\\">if</span> count_dict<span class=\\"token punctuation\\">.</span>keys<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">!=</span> count_dict_s<span class=\\"token punctuation\\">.</span>keys<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">False</span>\\n        <span class=\\"token keyword\\">for</span> i <span class=\\"token keyword\\">in</span> count_dict<span class=\\"token punctuation\\">.</span>keys<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n            <span class=\\"token keyword\\">if</span> count_dict<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">!=</span> count_dict_s<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">:</span>\\n                <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">False</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">True</span>\\n</code></pre></div>"}');export{E as comp,M as data};
