import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c,a as n,d as s,b as e,e as t}from"./app-DxMJFouC.js";const p={},r=t('<h1 id="github" tabindex="-1"><a class="header-anchor" href="#github"><span>Github</span></a></h1><ul><li><a href="#github">Github</a><ul><li><a href="#%E5%8A%A0%E9%80%9F">加速</a><ul><li><a href="#github-%E9%95%9C%E5%83%8F">Github 镜像</a><ul><li><a href="#mirrors">Mirrors</a><ul><li><a href="#%E9%95%9C%E5%83%8F%E6%B5%8B%E9%80%9F">镜像测速</a></li></ul></li></ul></li><li><a href="#pc%E7%BD%91%E9%A1%B5%E7%AB%AF%E7%94%A8%E6%88%B7%E5%A4%B4%E5%83%8F%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%87%BA%E6%9D%A5">PC网页端用户头像加载不出来</a></li></ul></li><li><a href="#git%E9%85%8D%E7%BD%AE">Git配置</a><ul><li><a href="#ssh-key">SSH Key</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%88%87%E6%8D%A2-https-%E5%88%B0-ssh">本地仓库切换 https 到 ssh</a></li><li><a href="#ssh-%E4%BB%A3%E7%90%86">SSH 代理</a></li></ul></li><li><a href="#%E7%AE%80%E4%BB%8B">简介</a><ul><li><a href="#commit">Commit</a><ul><li><a href="#%E8%A7%84%E8%8C%83">规范</a></li></ul></li><li><a href="#issues">Issues</a></li><li><a href="#pull-request">Pull Request</a></li></ul></li><li><a href="#actions">Actions</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">基本概念</a></li><li><a href="#workflow">workflow</a></li></ul></li><li><a href="#markdown">Markdown</a><ul><li><a href="#%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">数学公式</a></li></ul></li><li><a href="#webhooks">webhooks</a><ul><li><a href="#%E5%80%9F%E5%8A%A9%E9%92%89%E9%92%89%E7%9A%84github%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B0%86%E4%BB%93%E5%BA%93%E5%8F%98%E5%8A%A8%E9%80%9A%E7%9F%A5%E5%88%B0%E9%92%89%E9%92%89%E7%BE%A4%E9%87%8C">借助钉钉的Github机器人将仓库变动通知到钉钉群里</a></li></ul></li><li><a href="#%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E9%80%89%E6%8B%A9">开源许可证选择</a></li><li><a href="#copilot">Copilot</a><ul><li><a href="#copilotchatnextweb">Copilot+ChatNextWeb</a></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a><ul><li><a href="#git%E8%BF%87%E5%A4%A7">.git过大</a></li><li><a href="#%E8%85%BE%E8%AE%AF%E4%BA%91-github-%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98">腾讯云 github 连接超时问题</a></li></ul></li><li><a href="#%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86">报错处理</a><ul><li><a href="#failed-to-connect-to-githubcom-port-443-after-21063-ms-timed-out"><code>Failed to connect to github.com port 443 after 21063 ms: Timed out</code></a></li><li><a href="#openssl-ssl_read-connection-was-reset-errno-10054"><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></a></li></ul></li><li><a href="#%E6%9C%AA%E6%88%90%E5%8A%9F%E5%BD%92%E6%A1%A3todo">未成功归档/TODO</a><ul><li><a href="#nginx-%E5%8F%8D%E4%BB%A3-githubtodo-mark%E4%B8%8B-%E6%B2%A1%E6%88%90%E5%8A%9F%E8%B7%91%E8%B5%B7%E6%9D%A5">Nginx 反代 Github(TODO: mark下, 没成功跑起来)</a><ul><li><a href="#%E5%AE%89%E8%A3%85-nginx-%E5%92%8C-openssl">安装 Nginx 和 OpenSSL</a></li><li><a href="#%E5%88%B6%E4%BD%9C-ca-%E8%AF%81%E4%B9%A6%E4%B8%8E%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6">制作 CA 证书与签名证书</a></li><li><a href="#%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6">安装证书</a></li><li><a href="#%E9%85%8D%E7%BD%AE-nginx">配置 Nginx</a></li></ul></li></ul></li></ul></li></ul><hr><h2 id="加速" tabindex="-1"><a class="header-anchor" href="#加速"><span>加速</span></a></h2><p>通用的加速方案最好的措施就是用代理</p><p>对于不方便使用代理的场景, 如果是 clone 或者下载项目压缩包, releases 的场景, 可以使用镜像</p><p>除此以外, watt Toolkit 等工具也可以用</p><p>最不济可以手动改 host</p><hr><h3 id="github-镜像" tabindex="-1"><a class="header-anchor" href="#github-镜像"><span>Github 镜像</span></a></h3>',10),u={href:"https://github.com/eryajf/Thanks-Mirror#github",target:"_blank",rel:"noopener noreferrer"},d=n("hr",null,null,-1),h=n("h4",{id:"mirrors",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mirrors"},[n("span",null,"Mirrors")])],-1),m=n("p",null,"GitHub 相关的国内镜像，有不同的使用方式，这里仅列出目前可用的国内镜像，具体用法请查阅镜像的官方说明。",-1),b=n("p",null,"https://hub.fastgit.xyz/",-1),k={href:"https://doc.fastgit.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"类似fastgit的还有：",-1),g=n("ul",null,[n("li",null,"https://hub.yzuu.cf/"),n("li",null,"https://hub.njuu.cf/")],-1),_=n("p",null,"https://gitclone.com/",-1),f=n("code",null,"GitHub",-1),E={href:"https://gitclone.com/docs/feature/gitclone_web",target:"_blank",rel:"noopener noreferrer"},x=t("<li><p>https://ghproxy.com/</p><p><code>GitHub</code> 文件 , Releases , archive , gist , <code>raw.githubusercontent.com</code> 文件代理加速下载服务，使用细则参见官方。</p></li><li><p>https://toolwa.com/github/</p></li><li><p>https://github.91chi.fun/</p></li><li><p>https://github.abskoop.workers.dev/</p></li><li><p>https://pd.zwc365.com/</p></li><li><p>https://gh.con.sh/</p></li><li><p>https://www.7ed.net/#/raw-cdn</p></li>",7),y=n("p",null,"也可以通过其他方式提供的加速方案。",-1),w={href:"https://greasyfork.org/zh-CN/scripts/397419-fastgithub-%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E5%85%8B%E9%9A%86%E5%92%8C%E4%B8%8B%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"},A=n("p",null,[s("安装之后，会直接在 "),n("code",null,"GitHub"),s(" 项目当中出现可用的国内加速克隆方式，比较方便，推荐安装。")],-1),B={href:"https://chrome.google.com/webstore/detail/github%E5%8A%A0%E9%80%9F/ffjjnphohkfckeplcjflmgneebafggej?hl=zh",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"与油猴脚本效果一致，只是通过插件的形式安装配置。",-1),C=t(`<hr><h6 id="镜像测速" tabindex="-1"><a class="header-anchor" href="#镜像测速"><span>镜像测速</span></a></h6><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 读取源列表每一行的地址, 将每个地址拆分为 [协议, 域名, 路径], 然后对每个域名 ping 4次, 按照响应时间递增排序, 输出到目的文件</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> re


<span class="token keyword">def</span> <span class="token function">ping_linux</span><span class="token punctuation">(</span>host<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Linux 下的 ping 命令  
    :param host: 域名
    :param count: ping 的次数
    :return: 返回平均响应时长
    &quot;&quot;&quot;</span>
    output <span class="token operator">=</span> os<span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;ping </span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">}</span></span><span class="token string"> -c </span><span class="token interpolation"><span class="token punctuation">{</span>count<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token builtin">min</span><span class="token punctuation">,</span> avg<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">,</span> mdev <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;rtt min/avg/max/mdev = (\\d+\\.\\d+)/(\\d+\\.\\d+)/(\\d+\\.\\d+)/(\\d+\\.\\d+) ms&#39;</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>avg<span class="token punctuation">}</span></span><span class="token string">ms&#39;</span></span><span class="token punctuation">)</span>
    <span class="token comment"># 全丢包的情况下就找不到了, 此时返回一个很大的数</span>
    <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">}</span></span><span class="token string"> 超时&#39;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">999999</span>
    <span class="token keyword">return</span> <span class="token builtin">float</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">split_url_to_hosts</span><span class="token punctuation">(</span>source_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;将源列表每个条目拆分成 [协议, 域名, 路径] 的格式并返回所有条目拆分完后的嵌套列表  
    :param source_path: 源文件
    :return: 拆分后的嵌套列表
    &quot;&quot;&quot;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>source_path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        hosts <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>hosts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            hosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment"># 根据 :// 进行拆分, 拆分结果作为继续拆分 协议, 域名, 路径 的依据</span>
            main_split <span class="token operator">=</span> hosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;://&#39;</span><span class="token punctuation">)</span>

            <span class="token comment"># 第一片为 协议://</span>
            first_fragment <span class="token operator">=</span> main_split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;://&#39;</span>
            <span class="token comment"># 第二片为 域名</span>
            second_fragment <span class="token operator">=</span> main_split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token comment"># 第三片为 路径</span>
            third_fragment <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>main_split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

            <span class="token comment"># 将拆分后的三片组合成一个列表</span>
            hosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>first_fragment<span class="token punctuation">,</span> second_fragment<span class="token punctuation">,</span> third_fragment<span class="token punctuation">]</span>
        <span class="token comment"># 返回拆分后的嵌套列表</span>
        <span class="token keyword">return</span> hosts


<span class="token keyword">def</span> <span class="token function">sort_write_hosts</span><span class="token punctuation">(</span>hosts<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> target_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;根据对源文件拆分后的嵌套列表中的域名进行 ping 操作, 并将结果按响应时间升序输出到目的文件  
    :param hosts: 源文件拆分后的嵌套列表  
    :param target_path: 目标输出文件路径
    :return: None
    &quot;&quot;&quot;</span>
    <span class="token comment"># 遍历 hosts 中的每个域名, 并对其进行 ping 操作, 将平均响应时间插入到 hosts 尾部</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>hosts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        hosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>ping_linux<span class="token punctuation">(</span>hosts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 按照响应时间升序排序</span>
    hosts<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># 将排序后的 hosts 写入到目的文件</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>target_path<span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">for</span> host <span class="token keyword">in</span> hosts<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>host<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">ms \\n&#39;</span></span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">sort_sources</span><span class="token punctuation">(</span>source_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> target_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;对源文件(kali 镜像列表)进行排序, 并按照响应时间升序输出到目的文件  
    :param source_path: kali 镜像列表文件路径  
    :param target_path: 按照相应时间升序输出的目的文件路径
    &quot;&quot;&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始拆分源文件...&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 将源文件拆分为嵌套列表</span>
    hosts <span class="token operator">=</span> split_url_to_hosts<span class="token punctuation">(</span>source_path<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;拆分完成, 开始排序...&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 对拆分后的嵌套列表进行排序并输出到目的文件</span>
    sort_write_hosts<span class="token punctuation">(</span>hosts<span class="token punctuation">,</span> target_path<span class="token punctuation">)</span>    
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;排序完成, 请查看目的文件&quot;</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    source_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;sources_github.txt&#39;</span><span class="token punctuation">)</span>
    target_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;result_github.txt&#39;</span><span class="token punctuation">)</span>
    sort_sources<span class="token punctuation">(</span>source_path<span class="token punctuation">,</span> target_path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="pc网页端用户头像加载不出来" tabindex="-1"><a class="header-anchor" href="#pc网页端用户头像加载不出来"><span>PC网页端用户头像加载不出来</span></a></h3>`,5),N={href:"https://zhuanlan.zhihu.com/p/139219691",target:"_blank",rel:"noopener noreferrer"},D=t(`<li>当前无法显示用户头像的页面下<code>Ctrl+Shift+C</code>打开元素选择器选择未加载出的头像定位到其在源码中的标签并记下其域名 </li><li>打开<code>https://www.ipaddress.com/</code>输入域名并回车得到一个ip </li><li>打开路径<code>C:\\Windows\\System32\\drivers\\etc</code></li><li>修改该路径下的<code>host</code>文件的文件属性中的<code>安全</code>一栏中的<code>Users</code>组的权限,勾选<code>完全控制</code></li><li>用记事本打开<code>host</code>文件,在末尾粘贴以下文字并保存退出,返回原网页刷新即可<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># GitHub Start(更新于2021.1.22) 
140.82.113.3      github.com
140.82.114.20     gist.github.com

199.232.96.133    assets-cdn.github.com
199.232.96.133    raw.githubusercontent.com
199.232.96.133    gist.githubusercontent.com
199.232.96.133    cloud.githubusercontent.com
199.232.96.133    camo.githubusercontent.com
199.232.96.133    avatars.githubusercontent.com
199.232.68.133     avatars.githubusercontent.com
199.232.96.133    avatars0.githubusercontent.com
199.232.68.133     avatars0.githubusercontent.com
199.232.28.133     avatars1.githubusercontent.com
199.232.96.133    avatars1.githubusercontent.com
199.232.96.133    avatars2.githubusercontent.com
199.232.28.133     avatars2.githubusercontent.com
199.232.96.133    avatars3.githubusercontent.com
199.232.68.133     avatars3.githubusercontent.com
199.232.96.133    avatars4.githubusercontent.com
199.232.68.133     avatars4.githubusercontent.com
199.232.96.133    avatars5.githubusercontent.com
199.232.68.133     avatars5.githubusercontent.com
199.232.96.133    avatars6.githubusercontent.com
199.232.68.133     avatars6.githubusercontent.com
199.232.96.133    avatars7.githubusercontent.com
199.232.68.133     avatars7.githubusercontent.com
199.232.96.133    avatars8.githubusercontent.com
199.232.68.133     avatars8.githubusercontent.com

# GitHub End
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如若你得到的ip并非<code>199.232.96.133</code>则只需把上面代码中的<code>199.232.96.133</code>利用查找替换替换为你得到的ip即可(当再次无法看到头像时可以试着重查一次ip然后替换掉原ip)</p></blockquote></li>`,5),q=n("hr",null,null,-1),j=n("h2",{id:"git配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#git配置"},[n("span",null,"Git配置")])],-1),G={href:"https://www.jianshu.com/p/b481d2a42274",target:"_blank",rel:"noopener noreferrer"},F=n("hr",null,null,-1),O=t(`<ul><li>设置用户名<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;GitHub用户名&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>用户名随个人喜好即可,并非必须要Github的用户名,可以起一个能够代表当前修改环境的名字</li></ul></li><li>设置用户邮箱<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;GitHub绑定邮箱&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>GitHub绑定邮箱请根据自己注册的账号邮箱填写</li></ul></li><li>查看当前配置项列表<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>删除某个配置项(以<code>user.name</code>为例)<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>编辑某个配置项<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--edit</span> user.name <span class="token string">&#39;用户名&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><p>使用 VSCode 拉取更新与推送修改经常出错, 需要配置代理(以本地 7890 端口为例), 在本地项目根目录下打开命令行进行代理配置:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config http.proxy http://127.0.0.1:7890
<span class="token function">git</span> config https.proxy http://127.0.0.1:7890
<span class="token function">git</span> config core.gitPorxy socks5://127.0.0.1:7890
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以配置全局代理, 但是由于本地还有在用内网的 gitlab, 所以不适合配全局, 这里是针对项目配的</p><hr><p>取消代理配置如下:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> core.gitPorxy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><h3 id="ssh-key" tabindex="-1"><a class="header-anchor" href="#ssh-key"><span>SSH Key</span></a></h3>`,7),H={href:"https://blog.csdn.net/qq_45515863/article/details/106312232",target:"_blank",rel:"noopener noreferrer"},T=t(`<ul><li><p>在主机创建 ssh key</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;youremail@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-C(comment)</code> 随便填, 有辨识度就行</p><p>运行命令后一路回车默认配置, 根据运行提示找到 公钥 <code>id_rsa.pub</code></p></li><li><p><code>Github 右上角头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; add new ssh key</code></p><p>title 随便填, key 粘贴 <code>id_rsa.pub</code> 的全部内容</p></li><li><p>在主机上使用</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone 仓库SSH路径
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来 clone 仓库</p></li></ul><blockquote><p>需要注意的是在 Linux 上使用不同的用户创建的 ssh-key 加入到 github 后也只有对应的用户可以使用, 当切换用户后需要将该用户的 ssh-key 也加入到 Github 的 SSH-key 中方可使用</p></blockquote><hr><h3 id="本地仓库切换-https-到-ssh" tabindex="-1"><a class="header-anchor" href="#本地仓库切换-https-到-ssh"><span>本地仓库切换 https 到 ssh</span></a></h3>`,4),P={href:"https://github.com/vernesong/OpenClash/issues/1960#issuecomment-1019101426",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"[Correct way to set git proxy - Kirovj's Chaos --- 设置 git 代理的正确方法 - Kirovj's Chaos (wuyiting.cn)](https://www.wuyiting.cn/blog/Correct way to set git proxy)",-1),R={href:"https://blog.csdn.net/Wrysmile0308/article/details/128801870",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/orgs/community/discussions/50878",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.blog/2023-03-23-we-updated-our-rsa-ssh-host-key/",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>可以使用如下命令查看当前仓库的远程 URL:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309210130370.png" alt="image-20230921013052319"></p><p>要想从 https(ssh) 切到 ssh(https) 的话可以如下设置:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># git remote set-url origin xxx</span>
<span class="token function">git</span> remote set-url origin git@github.com:Ayusummer/DailyNotes.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="ssh-代理" tabindex="-1"><a class="header-anchor" href="#ssh-代理"><span>SSH 代理</span></a></h3><p>最近更新仓库时总是莫名其妙被重置, 见到了好多奇怪的报错, 包括但不限于</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Connection reset by 20.205.243.166 port 22
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Error: Unable to Fetch from Remote(s)
kex_exchange_identification: Connection closed by remote host
Connection closed by UNKNOWN port 65535
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Error: Unable to Fetch from Remote(s)
Host key verification failed.
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终达成的解决方案是</p><ol><li><p>把本地的密钥对删了, 重新新建一对密钥并将公钥添加到 github ssh key</p></li><li><p>清除本地 <code>know_hosts</code> 中的 github 条目</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309210135195.png" alt="image-20230921013523135"></p><p>如果有 <code>know_hosts.old</code> 文件, 可以直接把这个 old 删了</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309210137027.png" alt="image-20230921013757996"></p></li><li><p>配置 ssh 使用本地代理, 以 clash 默认 7890 端口为例</p><p>配置文件在 <code>~/.ssh/config</code>, 不存在则新建, 对于 windows 而言可以是:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309210139983.png" alt="image-20230921013914928"></p><p>写入如下配置</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">Host</span> <span class="token value attr-value">github.com</span>
<span class="token key attr-name">    Hostname</span> <span class="token value attr-value">ssh.github.com</span>
<span class="token key attr-name">    Port</span> <span class="token value attr-value">443</span>
<span class="token key attr-name">    User</span> <span class="token value attr-value">git</span>
<span class="token key attr-name">    ProxyCommand</span> <span class="token value attr-value">connect -H 127.0.0.1:7890 %h %p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关闭 VSCode, 重新打开即可, 可以 git fetch 看下效果</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309210141058.png" alt="image-20230921014108032"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309210141104.png" alt="image-20230921014150077"></p></li></ol><p>至少我如此操作成功修复了, 后续再遇到类似问题再看吧(</p><hr><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><hr><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit"><span>Commit</span></a></h3><ul><li>提交代码</li></ul><hr><h4 id="规范" tabindex="-1"><a class="header-anchor" href="#规范"><span>规范</span></a></h4>`,21),z={href:"https://github.com/UvDream/git-commit-lint-vscode",target:"_blank",rel:"noopener noreferrer"},K=t('<p>参照 <code>Angular</code> 社区的提交规范并结合 emoji, 上面参考链接里这位老哥开发了一款 <code>VSCode</code> git 规范化提交插件 <code>git-commit-lint-vscode</code>, 提交的时候可视化选择类型然后再手打详细信息</p><p><img src="http://cdn.ayusummer233.top/img/20210628112317.png" alt="image-20210628112317321"></p><hr><h3 id="issues" tabindex="-1"><a class="header-anchor" href="#issues"><span>Issues</span></a></h3><hr><h3 id="pull-request" tabindex="-1"><a class="header-anchor" href="#pull-request"><span>Pull Request</span></a></h3>',6),W={href:"https://www.zhihu.com/question/21682976",target:"_blank",rel:"noopener noreferrer"},V=n("li",null,"以下为文章原文:",-1),$=n("li",null,[s("我尝试用类比的方法来解释一下 pull reqeust。想想我们中学考试，老师改卷的场景吧。 "),n("ul",null,[n("li",null,"你做的试卷就像仓库，你的试卷肯定会有很多错误，就相当于程序里的 bug。"),n("li",null,[s("老师把你的试卷拿过来，相当于先 fork。 "),n("ul",null,[n("li",null,"在你的卷子上做一些修改批注，相当于 git commit。"),n("li",null,"最后把改好的试卷给你，相当于发 pull request，")])]),n("li",null,"你拿到试卷重新改正错误，相当于 merge。")])],-1),J=n("hr",null,null,-1),Y=n("h2",{id:"actions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#actions"},[n("span",null,"Actions")])],-1),Q={href:"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://docs.github.com/cn/github-ae@latest/actions/using-workflows/about-workflows",target:"_blank",rel:"noopener noreferrer"},Z=n("p",null,"持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。",-1),nn=n("p",null,"很多操作在不同项目里面是类似的，完全可以共享。GitHub 允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。",-1),sn=n("p",null,"如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。",-1),an={href:"https://github.com/marketplace?type=actions",target:"_blank",rel:"noopener noreferrer"},en={href:"https://github.com/sdras/awesome-actions",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"userName/repoName",-1),ln=n("code",null,"actions/setup-node",-1),on=n("code",null,"github.com/actions/setup-node",-1),cn={href:"https://github.com/actions/setup-node",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://github.com/actions",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://help.github.com/en/articles/about-actions#versioning-your-action",target:"_blank",rel:"noopener noreferrer"},un=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>actions/setup-node@74bc508 <span class="token comment"># 指向一个 commit</span>
actions/setup-node@v1.0    <span class="token comment"># 指向一个标签</span>
actions/setup-node@master  <span class="token comment"># 指向一个分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><ul><li><code>workflow</code>: 持续集成一次运行的过程，就是一个 workflow。</li><li><code>job</code>: 一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li><li><code>step</code>: 每个 job 由多个 step 构成，一步步完成。</li><li><code>action</code>: 每个 step 可以依次执行一个或多个命令(action) 。</li></ul><hr><h3 id="workflow" tabindex="-1"><a class="header-anchor" href="#workflow"><span>workflow</span></a></h3><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p>`,7),dn={href:"https://www.ruanyifeng.com/blog/2016/07/yaml.html",target:"_blank",rel:"noopener noreferrer"},hn=n("code",null,".yml",-1),mn=n("code",null,"foo.yml",-1),bn=n("code",null,".github/workflows",-1),kn=n("code",null,".yml",-1),vn=n("blockquote",null,[n("p",null,[n("img",{src:"http://cdn.ayusummer233.top/img/202205220719879.png",alt:"image-20220522071931643"})])],-1),gn={href:"https://help.github.com/en/articles/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"},_n=t(`<li><p><code>name</code>: <code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Create Release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),fn=t(`<p><code>on</code>: <code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">on</span><span class="token punctuation">:</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码指定，<code>push</code>事件触发 workflow。</p><p><code>on</code>字段也可以是事件的数组。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> pull_request<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),En={href:"https://help.github.com/en/articles/events-that-trigger-workflows",target:"_blank",rel:"noopener noreferrer"},xn=t(`<p><code>on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</code>: 指定触发事件时，可以限定分支或标签。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>    
      <span class="token punctuation">-</span> master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用 <code>push</code> 事件时, 可以配置 <code>workflow</code> 运行在指定的 <code>branch</code> 或是 <code>tag</code> 上</p><p>如果希望包含 <code>branch</code> 名称模式，或者希望同时包含和排除 <code>branch</code> 名称模式，可以使用 <code>branch</code> 筛选器。当只想排除分支名称模式时，使用<code>branches-ignore</code>筛选器。注意不能对工作流中的同一事件同时使用 <code>branches</code> 和 <code>branches-ignore</code>筛选器</p><p>对于 <code>tag</code> 处理和上述 <code>branch</code> 处理相似</p>`,5),yn=n("code",null,"paths",-1),wn=n("code",null,"paths-gnore",-1),An=n("code",null,"*",-1),Bn=n("code",null,"**",-1),Sn={href:"https://docs.github.com/cn/github-ae@latest/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<li><p><code>jobs.&lt;job_id&gt;.name</code></p><p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p><p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">my_first_job</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> My first job
  <span class="token key atrule">my_second_job</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> My second job
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> Create Release
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>job_id</code>: build; <code>name</code>: Create Release</p></li><li><p><code>jobs.&lt;job_id&gt;.needs</code>: <code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">job1</span><span class="token punctuation">:</span>
  <span class="token key atrule">job2</span><span class="token punctuation">:</span>
    <span class="token key atrule">needs</span><span class="token punctuation">:</span> job1
  <span class="token key atrule">job3</span><span class="token punctuation">:</span>
    <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p></li>`,2),Nn=t(`<p><code>jobs.&lt;job_id&gt;.runs-on</code>: <code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>ubuntu<span class="token punctuation">-</span>latest，ubuntu<span class="token punctuation">-</span>18.04或ubuntu<span class="token punctuation">-</span><span class="token number">16.04</span>
windows<span class="token punctuation">-</span>latest，windows<span class="token punctuation">-</span>2019或windows<span class="token punctuation">-</span><span class="token number">2016</span>
macOS<span class="token punctuation">-</span>latest或macOS<span class="token punctuation">-</span><span class="token number">10.14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Dn={href:"https://docs.github.com/cn/github-ae@latest/actions/hosting-your-own-runners/about-self-hosted-runners",target:"_blank",rel:"noopener noreferrer"},qn=t("<li><p><code>jobs.&lt;job_id&gt;.steps</code>: <code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p><ul><li><code>jobs.&lt;job_id&gt;.steps.name</code>：步骤名称。</li><li><code>jobs.&lt;job_id&gt;.steps.run</code>：该步骤运行的命令或者 action。</li><li><code>jobs.&lt;job_id&gt;.steps.env</code>：该步骤所需的环境变量。</li></ul></li>",1),jn=n("hr",null,null,-1),Gn=n("h2",{id:"markdown",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#markdown"},[n("span",null,"Markdown")])],-1),Fn=n("h3",{id:"数学公式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数学公式"},[n("span",null,"数学公式")])],-1),On={href:"https://github.com/orsharir/github-mathjax/releases/tag/v0.2.1",target:"_blank",rel:"noopener noreferrer"},Hn=t('<ul><li>下载<code>Source code(zip)</code></li><li>解压到`C:/Users/&quot;你的用户名&quot;/AppDataLocal/Google/Chrome/User Data/Default/Extensions <ul><li>注意解压后的文件夹表层和里一层都是一样的文件夹名 <ul><li>只要里层的</li></ul></li></ul></li><li>打开Chrome扩展程序,打开开发者模式</li><li>加载已解压的扩展程序 <ul><li>就是刚才放到上面目录里的整个文件夹</li><li><img src="http://cdn.ayusummer233.top/img/202211080017729.png" alt="image-20221108001752709"></li></ul></li><li>此时再打开Github查看源码就能显示markdown的数学公式了</li><li><img src="http://cdn.ayusummer233.top/img/202211080018283.png" alt="image-20221108001819213"></li></ul>',1),Tn=n("h2",{id:"webhooks",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webhooks"},[n("span",null,"webhooks")])],-1),Pn=n("h3",{id:"借助钉钉的github机器人将仓库变动通知到钉钉群里",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#借助钉钉的github机器人将仓库变动通知到钉钉群里"},[n("span",null,"借助钉钉的Github机器人将仓库变动通知到钉钉群里")])],-1),Ln={href:"https://blog.csdn.net/q563573095/article/details/79580249",target:"_blank",rel:"noopener noreferrer"},Rn=t("<li>进入钉钉群聊 <ul><li>侧边栏第一个图标<code>群设置</code></li><li>智能群助手</li><li>添加机器人</li><li>更多<code>...</code></li><li><strong>Github</strong>机器人</li><li>添加</li><li>复制Webhook链接</li></ul></li><li>打开Github仓库 <ul><li>Settings</li><li>左侧边栏<code>Webhooks</code></li><li><code>Add webhook</code></li><li><code>Payload URL</code>填刚才从钉钉Github机器人那里复制来的webhook链接</li><li>其余选项自行发挥 <ul><li>记得勾选Active</li></ul></li><li><code>Add webhook</code></li></ul></li><li>push一次提交 <ul><li>这时候就会有钉~的提醒啦</li></ul></li>",3),Un=n("h2",{id:"开源许可证选择",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开源许可证选择"},[n("span",null,"开源许可证选择")])],-1),In=n("p",null,[n("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202302191539879.png",alt:"开源许可证选择",title:"屏幕截图.png"})],-1),Mn={href:"http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html",target:"_blank",rel:"noopener noreferrer"},zn=n("hr",null,null,-1),Kn=n("h2",{id:"copilot",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#copilot"},[n("span",null,"Copilot")])],-1),Wn=n("h3",{id:"copilot-chatnextweb",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#copilot-chatnextweb"},[n("span",null,"Copilot+ChatNextWeb")])],-1),Vn={href:"https://jiajunhuang.com/articles/2024_03_03-copilot_as_gpt4.md.html",target:"_blank",rel:"noopener noreferrer"},$n={href:"https://github.com/github/copilot.vim",target:"_blank",rel:"noopener noreferrer"},Jn=t(`<p>用 neovim/vim 加上 github CLI 为 vim 添加 Copilot 支持, 然后找 <code>~/.config/github-copilot/hosts.json</code>中可以看到 Copilot token</p><p>然后两步 docker 即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">COPILOT_TOKEN</span><span class="token operator">=</span><span class="token operator">&lt;</span>刚才找到的Copilot里的token，ghu_ 开头的那个<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">SUPER_TOKEN</span><span class="token operator">=</span><span class="token operator">&lt;</span>自定义的token，等会儿给 ChatGPT-Next-Web使用<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">ENABLE_SUPER_TOKEN</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> copilot-gpt4-service <span class="token punctuation">\\</span>
    <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\\</span>
    aaamoon/copilot-gpt4-service:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">BASE_URL</span><span class="token operator">=</span><span class="token operator">&lt;</span>你配置的域名<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">OPENAI_API_KEY</span><span class="token operator">=</span><span class="token operator">&lt;</span>刚才设置的 SUPER_TOKEN，也就是自定义的token<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-e</span> <span class="token assign-left variable">CODE</span><span class="token operator">=</span><span class="token operator">&lt;</span>等于一个登录密码，防止 ChatGPT-Next-Web 被他人滥用<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
    yidadaa/chatgpt-next-web
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>域名那里可以不用设置, 改成 <code>http://docker能访问到的主机的ip:8080</code></p></blockquote><p>然后登录 <code>3000</code> 端口的 web 服务, 设置登录密码以及 <code>GPT4</code> 即可开始使用</p><hr><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><h3 id="git过大" tabindex="-1"><a class="header-anchor" href="#git过大"><span>.git过大</span></a></h3>`,9),Yn=n("li",null,[s("初用git时有时会错把资源文件传到源码仓库里去,这样下来仓库本身就会变得特别大,即使是后来删掉了资源文件也会导致"),n("code",null,".git"),s("文件过大从而直接"),n("code",null,"clone"),s("的时候可能会因为仓库过大而失败")],-1),Qn=n("li",null,[s("提交次数过多也会让"),n("code",null,".git"),s("越来越大")],-1),Xn={href:"https://www.cnblogs.com/everlose/p/12826025.html",target:"_blank",rel:"noopener noreferrer"},Zn=n("code",null,"clone",-1),ns=n("code",null,"--depth 1",-1),ss=n("code",null,"commit",-1),as=n("hr",null,null,-1),es=n("h3",{id:"腾讯云-github-连接超时问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#腾讯云-github-连接超时问题"},[n("span",null,"腾讯云 github 连接超时问题")])],-1),ts={href:"https://cloud.tencent.com/developer/article/1704705",target:"_blank",rel:"noopener noreferrer"},ls=n("li",null,"打开 ipaddress.com,查询github.com域名，记录下其对应的ip(IP Address项内容)",-1),is=n("li",null,[s("修改并保存"),n("code",null,"/etc/hosts"),s(":末尾加上"),n("div",{class:"language-text line-numbers-mode","data-ext":"text","data-title":"text"},[n("pre",{class:"language-text"},[n("code",null,`查询到的域名 github.com
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])])],-1),os=t('<hr><h2 id="报错处理" tabindex="-1"><a class="header-anchor" href="#报错处理"><span>报错处理</span></a></h2><h3 id="failed-to-connect-to-github-com-port-443-after-21063-ms-timed-out" tabindex="-1"><a class="header-anchor" href="#failed-to-connect-to-github-com-port-443-after-21063-ms-timed-out"><span><code>Failed to connect to github.com port 443 after 21063 ms: Timed out</code></span></a></h3><p>网不好, 换个结点</p><hr><h3 id="openssl-ssl-read-connection-was-reset-errno-10054" tabindex="-1"><a class="header-anchor" href="#openssl-ssl-read-connection-was-reset-errno-10054"><span><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></span></a></h3>',6),cs={href:"https://blog.csdn.net/myRealization/article/details/119737101",target:"_blank",rel:"noopener noreferrer"},ps=t(`<p>我碰到的情况是本地 git 配置错了, 前阵子在 github 上更改了主邮箱, 相应的本地配置要改下邮箱</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;xxx&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="未成功归档-todo" tabindex="-1"><a class="header-anchor" href="#未成功归档-todo"><span>未成功归档/TODO</span></a></h2><hr><h3 id="nginx-反代-github-todo-mark下-没成功跑起来" tabindex="-1"><a class="header-anchor" href="#nginx-反代-github-todo-mark下-没成功跑起来"><span>Nginx 反代 Github(TODO: mark下, 没成功跑起来)</span></a></h3>`,6),rs=n("p",null,"本地测试环境 - ubuntu 20.04 LTS",-1),us={href:"https://zhuanlan.zhihu.com/p/411165246",target:"_blank",rel:"noopener noreferrer"},ds=n("hr",null,null,-1),hs=n("h4",{id:"安装-nginx-和-openssl",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装-nginx-和-openssl"},[n("span",null,"安装 Nginx 和 OpenSSL")])],-1),ms={href:"https://zhuanlan.zhihu.com/p/138007915",target:"_blank",rel:"noopener noreferrer"},bs=n("hr",null,null,-1),ks=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦安装完成，Nginx 将会自动被启动。你可以运行下面的命令来验证它：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl status nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在你已经在你的服务器上安装和运行了 Nginx，你需要确保你的防火墙被配置好，允许流量通过 HTTP(<code>80</code>) 和 HTTPS(<code>443</code>) 端口。</p><hr><ul><li><p>假设你正在使用<code>UFW</code>,你可以做的是启用 ‘Nginx Full’ profile，它包含了这两个端口：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> ufw allow <span class="token string">&#39;Nginx Full&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>想要验证状态，输入：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> ufw status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>而如果使用的是厂商的云服务器则需要在服务器的控制面板的防火墙管理面板处放通端口(一般都是默认放通的)</p><p><img src="http://cdn.ayusummer233.top/img/202210122237943.png" alt="image-20221012223741767"></p></li></ul><hr>`,7),vs={href:"https://www.openssl.net.cn/docs/8.html",target:"_blank",rel:"noopener noreferrer"},gs=n("hr",null,null,-1),_s=t(`<p>服务器默认已经安装了 OpenSSL, 可以使用如下命令查看其版本及位置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>openssl version
<span class="token function">whereis</span> openssl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="制作-ca-证书与签名证书" tabindex="-1"><a class="header-anchor" href="#制作-ca-证书与签名证书"><span>制作 CA 证书与签名证书</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#### 制作CA证书，如果你没有CA证书的话，必须执行</span>
openssl genrsa <span class="token number">2048</span> <span class="token operator">&gt;</span> ca.key <span class="token comment"># 这是你的CA证书，你可以选择要不要信任CA证书</span>

<span class="token comment">#### CA证书的公钥，用于信任CA证书，这样你就不必亲自信任每一个用这个CA签名的证书了</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">SUBJ</span><span class="token operator">=</span><span class="token string">&quot;/C=CN/ST=ST<span class="token environment constant">$RANDOM</span>/O=O<span class="token environment constant">$RANDOM</span>/OU=OU<span class="token environment constant">$RANDOM</span>/CN=CN<span class="token environment constant">$RANDOM</span>/emailAddress=<span class="token environment constant">$RANDOM</span>@localhost&quot;</span>
<span class="token comment"># $SUB这一行的意思请稍后自行领悟,这里RANDOM的用意是，防止大家生成重复的CA然后产生未知问题</span>
<span class="token comment"># 如果不知道-subj是什么，不要改。CN写0CN是为了让证书好找(会排到最前面) </span>
openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-x509</span> <span class="token parameter variable">-days</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> <span class="token punctuation">\\</span><span class="token punctuation">(</span> <span class="token punctuation">\\</span><span class="token variable">\`</span></span><span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token number">99991231</span> +%s<span class="token punctuation">\\</span><span class="token variable"><span class="token variable">\`</span> - <span class="token punctuation">\\</span><span class="token variable">\`</span></span><span class="token function">date</span> +%s<span class="token punctuation">\\</span><span class="token variable"><span class="token variable">\`</span> <span class="token punctuation">\\</span><span class="token punctuation">)</span> / <span class="token number">86400</span> + <span class="token number">1</span><span class="token variable">\`</span></span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-key</span> ca.key <span class="token parameter variable">-out</span> ca.pem <span class="token parameter variable">-subj</span> <span class="token variable">$SUBJ</span> <span class="token parameter variable">-extensions</span> v3_ca
<span class="token comment"># 上面这节其实是一整行命令(用\\换行，于是显示成了两行) </span>
<span class="token comment"># 这里 \`expr \\( \\\`date -d 99991231 +%s\\\` - \\\`date +%s\\\` \\) / 86400 + 1\` 是计算当前时间到yyyymmdd=99991231的日期</span>
<span class="token comment"># 整段内容的意思是，让这个证书的有效期到9999年12月31日</span>
<span class="token comment"># 我保证RSA失效日期一定比这个日期早……</span>
<span class="token comment"># 请不要学习这个把签名签到9999年的坏习惯，涉及网络活动的，最好每年换一个签名。</span>
<span class="token comment"># 这里签到9999年的原因是……谁闲着没事监听你的nginx拿到只有你用的证书之后会对你开展中间人攻击呢？</span>

<span class="token comment">#### 生成nginx需要的证书</span>
openssl genrsa <span class="token number">1024</span> <span class="token operator">&gt;</span> nginx.key <span class="token comment"># 密钥</span>
openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-key</span> nginx.key <span class="token parameter variable">-out</span> nginx.csr <span class="token parameter variable">-subj</span> <span class="token variable">$SUBJ</span>

<span class="token comment">#### CA签名</span>
openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> <span class="token punctuation">\\</span><span class="token punctuation">(</span> <span class="token punctuation">\\</span><span class="token variable">\`</span></span><span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token number">99991231</span> +%s<span class="token punctuation">\\</span><span class="token variable"><span class="token variable">\`</span> - <span class="token punctuation">\\</span><span class="token variable">\`</span></span><span class="token function">date</span> +%s<span class="token punctuation">\\</span><span class="token variable"><span class="token variable">\`</span> <span class="token punctuation">\\</span><span class="token punctuation">)</span> / <span class="token number">86400</span> + <span class="token number">1</span><span class="token variable">\`</span></span> <span class="token punctuation">\\</span>
 <span class="token parameter variable">-in</span> nginx.csr <span class="token parameter variable">-out</span> nginx.pem <span class="token parameter variable">-CA</span> ca.pem <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-set_serial</span> <span class="token number">0</span> <span class="token parameter variable">-extensions</span> CUSTOM_STRING_LIKE_SAN_KU<span class="token punctuation">\\</span>
 <span class="token parameter variable">-extfile</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span> <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
[CUSTOM_STRING_LIKE_SAN_KU]
subjectAltName=IP:127.0.0.1, IP: ::1 ,DNS:github.com, DNS:*.github.com, DNS:githubusercontent.com, DNS:*.githubusercontent.com
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
EOF</span>
<span class="token punctuation">)</span>

<span class="token comment"># 这里，使用-extfile对配置文件做临时修改</span>
<span class="token comment"># 这样就完成了签名工作</span>
<span class="token comment"># 事实上，这里可以多写几个subjectAltName，比如subjectAltName=IP:127.0.0.1, IP: ::1 ,DNS:ads-pixiv.net, DNS:*.ads-pixiv.net, DNS:akamaihd.net, DNS:*.akamaihd.net, DNS:arkoselabs.com, DNS:*.arkoselabs.com, DNS:artstation.com, DNS:*.artstation.com, DNS:discordapp.com, DNS:*.discordapp.com, DNS:discordapp.net, DNS:*.discordapp.net, DNS:discord.com, DNS:*.discord.com, DNS:ext-twitch.tv, DNS:*.ext-twitch.tv, DNS:github.com, DNS:*.github.com, DNS:githubusercontent.com, DNS:*.githubusercontent.com, DNS:google.com, DNS:*.google.com, DNS:hcaptcha.com, DNS:*.hcaptcha.com, DNS:pinimg.com, DNS:*.pinimg.com, DNS:pinterest.com, DNS:*.pinterest.com, DNS:pixiv.net, DNS:*.pixiv.net, DNS:pixivsketch.net, DNS:*.pixivsketch.net, DNS:pximg.net, DNS:*.pximg.net, DNS:steam-chat.com, DNS:*.steam-chat.com, DNS:steamcommunity.com, DNS:*.steamcommunity.com, DNS:steampowered.com, DNS:*.steampowered.com, DNS:steamstatic.com, DNS:*.steamstatic.com, DNS:twitch.tv, DNS:*.twitch.tv, DNS:ubi.com, DNS:*.ubi.com, DNS:v2ex.com, DNS:*.v2ex.com</span>
<span class="token comment"># 多写几个的好处就不说了，说多了可能犯法[狗头]</span>

<span class="token comment"># openssl x509 -noout -text -in nginx.pem</span>
<span class="token comment"># 如果你需要检查你生成的pem，或者</span>
<span class="token comment"># ( openssl x509 -noout -text -in nginx.pem &amp;&amp; cat nginx.pem ) &gt; nginx.crt</span>
<span class="token comment"># 上面这句没测试，也不是本讲的内容……</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="安装证书" tabindex="-1"><a class="header-anchor" href="#安装证书"><span>安装证书</span></a></h4>`,7),fs={href:"https://qastack.cn/superuser/437330/how-do-you-add-a-certificate-authority-ca-to-ubuntu",target:"_blank",rel:"noopener noreferrer"},Es={href:"https://blog.csdn.net/shf4715/article/details/52804689",target:"_blank",rel:"noopener noreferrer"},xs=n("hr",null,null,-1),ys=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cp</span> ca.pem /usr/local/share/ca-certificates/ca.crt
update-ca-certificates
<span class="token function">mkdir</span> /etc/nginx/ca <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">cp</span> nginx.pem nginx.key /etc/nginx/ca
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210122319905.png" alt="image-20221012231958789"></p></blockquote><hr><h4 id="配置-nginx" tabindex="-1"><a class="header-anchor" href="#配置-nginx"><span>配置 Nginx</span></a></h4><hr>`,5);function ws(As,Bs){const a=i("ExternalLinkIcon");return o(),c("div",null,[r,n("blockquote",null,[n("p",null,[n("a",u,[s("eryajf/Thanks-Mirror: 整理记录各个包管理器，系统镜像，以及常用软件的好用镜像，Thanks Mirror。 走过路过，如觉不错，麻烦点个赞👆🌟 (github.com)"),e(a)])])]),d,h,m,n("ul",null,[n("li",null,[b,n("p",null,[s("提供了 GitHub 全站镜像，但注意不要在这个站登陆你的 GitHub 账号。详见"),n("a",k,[s("官方文档"),e(a)]),s("。")]),v,g]),n("li",null,[_,n("p",null,[s("提供了 "),f,s(" 全面的加速，详见"),n("a",E,[s("官方文档"),e(a)]),s("。")])]),x]),y,n("ul",null,[n("li",null,[n("p",null,[n("a",w,[s("油猴脚本"),e(a)])]),A]),n("li",null,[n("p",null,[n("a",B,[s("chrome插件"),e(a)])]),S])]),C,n("ul",null,[n("li",null,[n("a",N,[s("解决Github网页上图片显示失败的问题"),e(a)]),s("[参考链接]")]),D]),q,j,n("blockquote",null,[n("p",null,[n("a",G,[s("GIt设置代理 - 简书 (jianshu.com)"),e(a)])]),F]),O,n("blockquote",null,[n("p",null,[n("a",H,[s("git生成连接远程仓库的密钥_旁观者lgp的博客-CSDN博客"),e(a)])])]),T,n("blockquote",null,[n("p",null,[n("a",P,[s("【求助】开启OpenClash之后，无法使用 git clone/push，kex ssh 密钥错误 · Issue #1960 · vernesong/OpenClash (github.com)"),e(a)])]),L,n("p",null,[n("a",R,[s("使用Git时报错Connection reset by 20.205.243.166 port 22_Wrysmile0308的博客-CSDN博客"),e(a)])]),n("p",null,[n("a",U,[s("Has GitHub changed his remote host key ? · community · Discussion #50878 --- GitHub 更改了他的远程主机密钥吗？ · 社区 · 讨论 #50878"),e(a)])]),n("p",null,[n("a",I,[s("We updated our RSA SSH host key - The GitHub Blog --- 我们更新了 RSA SSH 主机密钥 - GitHub 博客"),e(a)])])]),M,n("p",null,[n("a",z,[s("UvDream/git-commit-lint-vscode: vscode一款git 规范化提交插件 (github.com)"),e(a)])]),K,n("ul",null,[n("li",null,[n("a",W,[s("参考链接"),e(a)])]),V,$]),J,Y,n("blockquote",null,[n("p",null,[n("a",Q,[s("原文链接:GitHub Actions 入门教程 - 阮一峰的网络日志 (ruanyifeng.com)"),e(a)])]),n("p",null,[n("a",X,[s("关于工作流程 - GitHub Docs"),e(a)])])]),Z,nn,sn,n("p",null,[s("GitHub 做了一个"),n("a",an,[s("官方市场"),e(a)]),s("，可以搜索到他人提交的 actions。另外，还有一个 "),n("a",en,[s("awesome actions"),e(a)]),s(" 的仓库，也可以找到不少 action。")]),n("p",null,[s("每个 action 就是一个独立脚本，因此可以做成代码仓库，使用"),tn,s("的语法引用 action。比如，"),ln,s("就表示"),on,s("这个"),n("a",cn,[s("仓库"),e(a)]),s("，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 "),n("a",pn,[s("github.com/actions"),e(a)]),s(" 里面。")]),n("p",null,[s("actions 是代码仓库，有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见"),n("a",rn,[s("官方文档"),e(a)]),s("。")]),un,n("p",null,[s("workflow 文件采用 "),n("a",dn,[s("YAML 格式"),e(a)]),s("，文件名可以任意取，但是后缀名统一为"),hn,s("，比如"),mn,s("。一个库可以有多个 workflow 文件。GitHub 只要发现"),bn,s("目录里面有"),kn,s("文件，就会自动运行该文件。")]),vn,n("p",null,[s("workflow 文件的配置字段非常多，详见"),n("a",gn,[s("官方文档"),e(a)]),s("。下面是一些基本字段。")]),n("ul",null,[_n,n("li",null,[fn,n("p",null,[s("完整的事件列表，请查看"),n("a",En,[s("官方文档"),e(a)]),s("。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。")])]),n("li",null,[xn,n("p",null,[s("像这样类似的 "),yn,s(" 以及 "),wn,s(" 关键词支持使用 "),An,s(" 和 "),Bn,s(" 通配符匹配多个路径名的 glob pattern; 更多信息请参阅“"),n("a",Sn,[s("过滤器模式备忘清单"),e(a)]),s("”。")])]),Cn,n("li",null,[Nn,n("blockquote",null,[n("p",null,[n("a",Dn,[s("About self-hosted runners - GitHub Docs"),e(a)])])])]),qn]),jn,Gn,Fn,n("ul",null,[n("li",null,[n("a",On,[s("访问该地址"),e(a)]),Hn])]),Tn,Pn,n("ul",null,[n("li",null,[n("a",Ln,[s("参考链接"),e(a)])]),Rn]),Un,In,n("blockquote",null,[n("p",null,[n("a",Mn,[s("from 阮一峰-2011.5.2"),e(a)])])]),zn,Kn,Wn,n("blockquote",null,[n("p",null,[n("a",Vn,[s("有GitHub Copilot？那就可以搭建你的ChatGPT4服务 - Jiajun的技术笔记 (jiajunhuang.com)"),e(a)])]),n("p",null,[n("a",$n,[s("github/copilot.vim: Neovim plugin for GitHub Copilot"),e(a)])])]),Jn,n("ul",null,[Yn,Qn,n("li",null,[n("strong",null,[s("解决方法"),n("a",Xn,[s("@Ever-Lose"),e(a)])]),s(":如果确定之前的提交对现在已经没有用了,那么在"),Zn,s("仓库的时候在最后加上"),ns,s("只克隆最后一次"),ss])]),as,es,n("ul",null,[n("li",null,[s("使用腾讯云北京的轻量应用服务器推送更新时总是连接超时,最终找到了有效的如下"),n("a",ts,[s("解决方案"),e(a)])]),ls,is]),os,n("blockquote",null,[n("p",null,[n("a",cs,[s("【Git/GitHub】解决Git上传时OpenSSL SSL_read: Connection was reset, errno 10054的错误_memcpy0的博客-CSDN博客"),e(a)])])]),ps,n("blockquote",null,[rs,n("p",null,[n("a",us,[s("nginx本地反代github - 知乎 (zhihu.com)"),e(a)])]),ds]),hs,n("blockquote",null,[n("p",null,[n("a",ms,[s("如何在 Ubuntu 20.04 上安装 Nginx - 知乎 (zhihu.com)"),e(a)])]),bs]),ks,n("blockquote",null,[n("p",null,[n("a",vs,[s("2.2.1 linux下的安装_OpenSSL 中文手册"),e(a)])]),gs]),_s,n("blockquote",null,[n("p",null,[n("a",fs,[s("如何将证书颁发机构(CA) 添加到Ubuntu？ (qastack.cn)"),e(a)])]),n("p",null,[n("a",Es,[s("Ubuntu安装系统根证书_孙海峰VIP的博客-CSDN博客_ubuntu安装根证书"),e(a)])]),xs]),ys])}const Ns=l(p,[["render",ws],["__file","Github.html.vue"]]),Ds=JSON.parse('{"path":"/%E7%A4%BE%E5%8C%BA%E7%9B%B8%E5%85%B3/Github.html","title":"Github","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"加速","slug":"加速","link":"#加速","children":[{"level":3,"title":"Github 镜像","slug":"github-镜像","link":"#github-镜像","children":[]},{"level":3,"title":"PC网页端用户头像加载不出来","slug":"pc网页端用户头像加载不出来","link":"#pc网页端用户头像加载不出来","children":[]}]},{"level":2,"title":"Git配置","slug":"git配置","link":"#git配置","children":[{"level":3,"title":"SSH Key","slug":"ssh-key","link":"#ssh-key","children":[]},{"level":3,"title":"本地仓库切换 https 到 ssh","slug":"本地仓库切换-https-到-ssh","link":"#本地仓库切换-https-到-ssh","children":[]},{"level":3,"title":"SSH 代理","slug":"ssh-代理","link":"#ssh-代理","children":[]}]},{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"Commit","slug":"commit","link":"#commit","children":[]},{"level":3,"title":"Issues","slug":"issues","link":"#issues","children":[]},{"level":3,"title":"Pull Request","slug":"pull-request","link":"#pull-request","children":[]}]},{"level":2,"title":"Actions","slug":"actions","link":"#actions","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"workflow","slug":"workflow","link":"#workflow","children":[]}]},{"level":2,"title":"Markdown","slug":"markdown","link":"#markdown","children":[{"level":3,"title":"数学公式","slug":"数学公式","link":"#数学公式","children":[]}]},{"level":2,"title":"webhooks","slug":"webhooks","link":"#webhooks","children":[{"level":3,"title":"借助钉钉的Github机器人将仓库变动通知到钉钉群里","slug":"借助钉钉的github机器人将仓库变动通知到钉钉群里","link":"#借助钉钉的github机器人将仓库变动通知到钉钉群里","children":[]}]},{"level":2,"title":"开源许可证选择","slug":"开源许可证选择","link":"#开源许可证选择","children":[]},{"level":2,"title":"Copilot","slug":"copilot","link":"#copilot","children":[{"level":3,"title":"Copilot+ChatNextWeb","slug":"copilot-chatnextweb","link":"#copilot-chatnextweb","children":[]}]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[{"level":3,"title":".git过大","slug":"git过大","link":"#git过大","children":[]},{"level":3,"title":"腾讯云 github 连接超时问题","slug":"腾讯云-github-连接超时问题","link":"#腾讯云-github-连接超时问题","children":[]}]},{"level":2,"title":"报错处理","slug":"报错处理","link":"#报错处理","children":[{"level":3,"title":"Failed to connect to github.com port 443 after 21063 ms: Timed out","slug":"failed-to-connect-to-github-com-port-443-after-21063-ms-timed-out","link":"#failed-to-connect-to-github-com-port-443-after-21063-ms-timed-out","children":[]},{"level":3,"title":"OpenSSL SSL_read: Connection was reset, errno 10054","slug":"openssl-ssl-read-connection-was-reset-errno-10054","link":"#openssl-ssl-read-connection-was-reset-errno-10054","children":[]}]},{"level":2,"title":"未成功归档/TODO","slug":"未成功归档-todo","link":"#未成功归档-todo","children":[{"level":3,"title":"Nginx 反代 Github(TODO: mark下, 没成功跑起来)","slug":"nginx-反代-github-todo-mark下-没成功跑起来","link":"#nginx-反代-github-todo-mark下-没成功跑起来","children":[]}]}],"git":{"createdTime":1667837978000,"updatedTime":1714300312000,"contributors":[{"name":"233Official","email":"ayusummer233@qq.com","commits":4},{"name":"233PC","email":"ayusummer233@qq.com","commits":3},{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":3},{"name":"233JG","email":"ayusummer233@gmail.com","commits":1},{"name":"233Laptop","email":"ayusummer233@qq.com","commits":1},{"name":"233Official","email":"ayusummr233@gmail.com","commits":1},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":20.23,"words":6069},"filePathRelative":"社区相关/Github.md","localizedDate":"2022年11月7日","excerpt":"\\n<ul>\\n<li><a href=\\"#github\\">Github</a>\\n<ul>\\n<li><a href=\\"#%E5%8A%A0%E9%80%9F\\">加速</a>\\n<ul>\\n<li><a href=\\"#github-%E9%95%9C%E5%83%8F\\">Github 镜像</a>\\n<ul>\\n<li><a href=\\"#mirrors\\">Mirrors</a>\\n<ul>\\n<li><a href=\\"#%E9%95%9C%E5%83%8F%E6%B5%8B%E9%80%9F\\">镜像测速</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#pc%E7%BD%91%E9%A1%B5%E7%AB%AF%E7%94%A8%E6%88%B7%E5%A4%B4%E5%83%8F%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%87%BA%E6%9D%A5\\">PC网页端用户头像加载不出来</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#git%E9%85%8D%E7%BD%AE\\">Git配置</a>\\n<ul>\\n<li><a href=\\"#ssh-key\\">SSH Key</a></li>\\n<li><a href=\\"#%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%88%87%E6%8D%A2-https-%E5%88%B0-ssh\\">本地仓库切换 https 到 ssh</a></li>\\n<li><a href=\\"#ssh-%E4%BB%A3%E7%90%86\\">SSH 代理</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E7%AE%80%E4%BB%8B\\">简介</a>\\n<ul>\\n<li><a href=\\"#commit\\">Commit</a>\\n<ul>\\n<li><a href=\\"#%E8%A7%84%E8%8C%83\\">规范</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#issues\\">Issues</a></li>\\n<li><a href=\\"#pull-request\\">Pull Request</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#actions\\">Actions</a>\\n<ul>\\n<li><a href=\\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\\">基本概念</a></li>\\n<li><a href=\\"#workflow\\">workflow</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#markdown\\">Markdown</a>\\n<ul>\\n<li><a href=\\"#%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F\\">数学公式</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#webhooks\\">webhooks</a>\\n<ul>\\n<li><a href=\\"#%E5%80%9F%E5%8A%A9%E9%92%89%E9%92%89%E7%9A%84github%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B0%86%E4%BB%93%E5%BA%93%E5%8F%98%E5%8A%A8%E9%80%9A%E7%9F%A5%E5%88%B0%E9%92%89%E9%92%89%E7%BE%A4%E9%87%8C\\">借助钉钉的Github机器人将仓库变动通知到钉钉群里</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E9%80%89%E6%8B%A9\\">开源许可证选择</a></li>\\n<li><a href=\\"#copilot\\">Copilot</a>\\n<ul>\\n<li><a href=\\"#copilotchatnextweb\\">Copilot+ChatNextWeb</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\\">常见问题</a>\\n<ul>\\n<li><a href=\\"#git%E8%BF%87%E5%A4%A7\\">.git过大</a></li>\\n<li><a href=\\"#%E8%85%BE%E8%AE%AF%E4%BA%91-github-%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98\\">腾讯云 github 连接超时问题</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86\\">报错处理</a>\\n<ul>\\n<li><a href=\\"#failed-to-connect-to-githubcom-port-443-after-21063-ms-timed-out\\"><code>Failed to connect to github.com port 443 after 21063 ms: Timed out</code></a></li>\\n<li><a href=\\"#openssl-ssl_read-connection-was-reset-errno-10054\\"><code>OpenSSL SSL_read: Connection was reset, errno 10054</code></a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%9C%AA%E6%88%90%E5%8A%9F%E5%BD%92%E6%A1%A3todo\\">未成功归档/TODO</a>\\n<ul>\\n<li><a href=\\"#nginx-%E5%8F%8D%E4%BB%A3-githubtodo-mark%E4%B8%8B-%E6%B2%A1%E6%88%90%E5%8A%9F%E8%B7%91%E8%B5%B7%E6%9D%A5\\">Nginx 反代 Github(TODO: mark下, 没成功跑起来)</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85-nginx-%E5%92%8C-openssl\\">安装 Nginx 和 OpenSSL</a></li>\\n<li><a href=\\"#%E5%88%B6%E4%BD%9C-ca-%E8%AF%81%E4%B9%A6%E4%B8%8E%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6\\">制作 CA 证书与签名证书</a></li>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6\\">安装证书</a></li>\\n<li><a href=\\"#%E9%85%8D%E7%BD%AE-nginx\\">配置 Nginx</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{Ns as comp,Ds as data};
