import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c,a as e,d as a,b as n,e as t}from"./app-DxMJFouC.js";const r={},p=e("h1",{id:"sovits-4-0-使用随笔",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#sovits-4-0-使用随笔"},[e("span",null,"sovits 4.0 使用随笔")])],-1),d={href:"https://colab.research.google.com/drive/1clafh5_PDACuVBQwT32cUV-j9WSU96wB#scrollTo=LS0OPRkL4Pme",target:"_blank",rel:"noopener noreferrer"},u=t(`<p>吸取了之前 3.2 的复现经验后这次直接参考仓库中给出的 Colab 一键脚本进行操作</p><hr><h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h2><h3 id="torch-与-cuda-版本" tabindex="-1"><a class="header-anchor" href="#torch-与-cuda-版本"><span>torch 与 CUDA 版本</span></a></h3><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232054889.png" alt="image-20230223205447849"></p><p>torch 1.13.1 + CUDA 11.6, 因此直接沿用之前在 32k 分支中所创建的 conda 环境了</p><hr><h3 id="克隆仓库-安装依赖" tabindex="-1"><a class="header-anchor" href="#克隆仓库-安装依赖"><span>克隆仓库, 安装依赖</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># clone 4.0 分支</span>
<span class="token function">git</span> clone https://github.com/innnky/so-vits-svc <span class="token parameter variable">-b</span> <span class="token number">4.0</span>
<span class="token builtin class-name">cd</span> /content/so-vits-svc
<span class="token comment"># 安装依赖</span>
pip <span class="token function">install</span> pyworld praat-parselmouth fairseq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>慢的话可以换源 <code>-i https://mirrors.cloud.tencent.com/pypi/simple/</code></p><p>conda 环境在开着系统代理时似乎会报错</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &#39;SSLError(SSLEOFError(8, &#39;EOF occurred in violation of protocol (_ssl.c:1131)&#39;))&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>目前没有找到开着代理还能解决该问题的方案, 因此选择了关闭代理并换源</p><hr><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232113617.png" alt="image-20230223211302578"></p></blockquote><hr><h2 id="下载模型文件" tabindex="-1"><a class="header-anchor" href="#下载模型文件"><span>下载模型文件</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 下载必要模型文件</span>
<span class="token comment"># 源仓库地址：[contentvec](https://github.com/auspicious3000/contentvec)</span>
<span class="token comment"># 模型原下载链接：[checkpoint_best_legacy_500.pt](https://ibm.box.com/s/z1wgl1stco8ffooyatzdwsqn2psd9lrr)</span>
<span class="token comment"># 由于源网盘无法提供http直链，根据mit协议，对模型进行二次分发，提供下载直链</span>

<span class="token comment"># (linux)</span>
<span class="token function">wget</span> <span class="token parameter variable">-P</span> hubert/ https://huggingface.co/innnky/contentvec/resolve/main/checkpoint_best_legacy_500.pt

<span class="token comment"># (Windows)</span>
Invoke-WebRequest <span class="token parameter variable">-Uri</span> <span class="token string">&quot;https://huggingface.co/innnky/contentvec/resolve/main/checkpoint_best_legacy_500.pt&quot;</span> <span class="token parameter variable">-OutFile</span> <span class="token string">&quot;.\\hubert<span class="token entity" title="\\c">\\c</span>heckpoint_best_legacy_500.pt&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>PS: 该文件有 1.24 G, Windows 下方便的话还是直接用工具下载下来再放到对应目录下比较快</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232119160.png" alt="image-20230223211918118"></p></blockquote>`,14),m={href:"https://huggingface.co/innnky/sovits_pretrained/resolve/main/sovits4/G_0.pth",target:"_blank",rel:"noopener noreferrer"},h={href:"https://huggingface.co/innnky/sovits_pretrained/resolve/main/sovits4/D_0.pth",target:"_blank",rel:"noopener noreferrer"},v=e("ul",null,[e("li",null,[a("放在"),e("code",null,"logs/44k"),a("目录下")]),e("li",null,"预训练底模训练数据集包含云灏 即霜 辉宇·星AI 派蒙 绫地宁宁，覆盖男女生常见音域，可以认为是相对通用的底模")],-1),b=t(`<blockquote><p>直接打开链接下载完放在<code>logs/44k</code>目录下即可, 用 <code>Invoke-WebRequest</code> 太慢了</p></blockquote><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232200265.png" alt="image-20230223220019242"></p></blockquote><hr><h2 id="数据集准备" tabindex="-1"><a class="header-anchor" href="#数据集准备"><span>数据集准备</span></a></h2><p>以以下文件结构将数据集放入dataset_raw目录即可</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>dataset_raw
├───speaker0
│   ├───xxx1-xxx1.wav
│   ├───...
│   └───Lxx-0xx8.wav
└───speaker1
    ├───xx2-0xxx2.wav
    ├───...
    └───xxx7-xxx007.wav
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232201043.png" alt="image-20230223220101030"></p></blockquote><hr><h2 id="数据预处理" tabindex="-1"><a class="header-anchor" href="#数据预处理"><span>数据预处理</span></a></h2><ol><li><p>重采样至 44100hz</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python resample.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>自动划分训练集 验证集 测试集 以及自动生成配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python preprocess_flist_config.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232202899.png" alt="image-20230223220219869"></p></blockquote></li><li><p>生成hubert与f0</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python preprocess_hubert_f0.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232210765.png" alt="image-20230223221035733"></p></blockquote></li></ol><p>执行完以上步骤后 dataset 目录便是预处理完成的数据，可以删除dataset_raw文件夹了</p><hr><h2 id="训练" tabindex="-1"><a class="header-anchor" href="#训练"><span>训练</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>python train.py <span class="token parameter variable">-c</span> configs/config.json <span class="token parameter variable">-m</span> 44k
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注：训练时会自动清除老的模型，只保留最新3个模型，如果想防止过拟合需要自己手动备份模型记录点,或修改配置文件keep_ckpts 0为永不清除</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232211918.png" alt="image-20230223221149891"></p><blockquote><p>这里 <code>keep_ckpts</code> 默认值为 3, 对应保留 3 个模型</p></blockquote><hr><p>然后就可以继续看显卡呼啸了(bushi</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232214653.png" alt="image-20230223221438613"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232215352.png" alt="image-20230223221510304"></p><blockquote><p>数据集从 7000 降到 1000 后训练快了很多</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302232217152.png" alt="image-20230223221737136"></p></blockquote></blockquote><hr><h2 id="推理" tabindex="-1"><a class="header-anchor" href="#推理"><span>推理</span></a></h2>`,17),g={href:"https://github.com/innnky/so-vits-svc/blob/4.0/inference_main.py",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>得到人声干声之后就可以进行推理了, 将干声文件放在 <code>raw</code> 目录下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> python .<span class="token punctuation">\\</span>inference_main.py <span class="token parameter variable">-m</span> <span class="token string">&quot;logs/44k/G_44800.pth&quot;</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;configs/config.json&quot;</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;1_op_short_(Vocals).wav&quot;</span> <span class="token parameter variable">-t</span> <span class="token number">0</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;luna&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),_=t("<p>3.0 是直接改该脚本中的参数, 4.0 这里添加了命令行支持</p><p>必填项部分</p><ul><li>-m, --model_path：模型路径。</li><li>-c, --config_path：配置文件路径。</li><li>-n, --clean_names：wav 文件名列表，放在 raw 文件夹下。</li><li>-t, --trans：音高调整，支持正负(半音) 。</li><li>-s, --spk_list：合成目标说话人名称。</li></ul><p>可选项部分：见下一节</p><ul><li>-a, --auto_predict_f0：语音转换自动预测音高，转换歌声时不要打开这个会严重跑调。</li><li>-cm, --cluster_model_path：聚类模型路径，如果没有训练聚类则随便填。</li><li>-cr, --cluster_infer_ratio：聚类方案占比，范围 0-1，若没有训练聚类模型则填 0 即可。</li></ul>",5),y={href:"https://github.com/innnky/so-vits-svc/tree/4.0#%E5%8F%AF%E9%80%89%E9%A1%B9",target:"_blank",rel:"noopener noreferrer"},f=e("hr",null,null,-1),x=e("p",null,"​",-1);function q(N,w){const s=i("ExternalLinkIcon");return o(),c("div",null,[p,e("blockquote",null,[e("p",null,[e("a",d,[a("“sovits4.0一键训练/推理脚本.ipynb”的副本 - Colaboratory (google.com)"),n(s)])])]),u,e("ul",null,[e("li",null,[a("预训练底模文件： "),e("a",m,[a("G_0.pth"),n(s)]),a(" 与 "),e("a",h,[a("D_0.pth"),n(s)]),v])]),b,e("p",null,[a("使用 "),e("a",g,[a("inference_main.py"),n(s)])]),k,e("blockquote",null,[_,e("blockquote",null,[e("p",null,[e("a",y,[a("innnky/so-vits-svc at 4.0 - 可选项(github.com)"),n(s)])])])]),f,x])}const A=l(r,[["render",q],["__file","sovits_4.html.vue"]]),C=JSON.parse('{"path":"/%E5%A8%B1%E4%B9%90/sovits/sovits_4.html","title":"sovits 4.0 使用随笔","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"环境搭建","slug":"环境搭建","link":"#环境搭建","children":[{"level":3,"title":"torch  与 CUDA 版本","slug":"torch-与-cuda-版本","link":"#torch-与-cuda-版本","children":[]},{"level":3,"title":"克隆仓库, 安装依赖","slug":"克隆仓库-安装依赖","link":"#克隆仓库-安装依赖","children":[]}]},{"level":2,"title":"下载模型文件","slug":"下载模型文件","link":"#下载模型文件","children":[]},{"level":2,"title":"数据集准备","slug":"数据集准备","link":"#数据集准备","children":[]},{"level":2,"title":"数据预处理","slug":"数据预处理","link":"#数据预处理","children":[]},{"level":2,"title":"训练","slug":"训练","link":"#训练","children":[]},{"level":2,"title":"推理","slug":"推理","link":"#推理","children":[]}],"git":{"createdTime":1677400519000,"updatedTime":1709635981000,"contributors":[{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1},{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":1}]},"readingTime":{"minutes":3.08,"words":923},"filePathRelative":"娱乐/sovits/sovits_4.md","localizedDate":"2023年2月26日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://colab.research.google.com/drive/1clafh5_PDACuVBQwT32cUV-j9WSU96wB#scrollTo=LS0OPRkL4Pme\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">“sovits4.0一键训练/推理脚本.ipynb”的副本 - Colaboratory (google.com)</a></p>\\n</blockquote>\\n<p>吸取了之前 3.2 的复现经验后这次直接参考仓库中给出的 Colab 一键脚本进行操作</p>\\n<hr>"}');export{A as comp,C as data};
