import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as i,c as r,a as e,d as s,b as n,e as t}from"./app-DxMJFouC.js";const c={},p=e("h1",{id:"atomic-red-team",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#atomic-red-team"},[e("span",null,"Atomic Red Team")])],-1),d={href:"https://github.com/redcanaryco/atomic-red-team",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/redcanaryco/invoke-atomicredteam",target:"_blank",rel:"noopener noreferrer"},m={href:"https://atomicredteam.io/",target:"_blank",rel:"noopener noreferrer"},h=t('<p>Atomic Red Team™ 是映射到 MITRE ATT&amp;CK® 框架的测试库。安全团队可以使用 Atomic Red Team 快速、可移植且可重复地测试其环境。</p><p>Invoke-AtomicRedTeam 是一个 PowerShell 模块，用于执行 Red Canary 的 Atomic Red Team 项目的 <code>atomic</code> 目录中定义的测试。 <code>atomic</code> 目录包含 MITRE ATT&amp;CK™ 框架定义的每种技术的文件夹。在每个 <code>T#</code> 文件夹中，都可以找到一个 yaml 文件，该文件定义每个原子测试的攻击过程以及相同数据的更易于阅读的 markdown (md) 版本。</p><hr><ul><li><a href="#atomic-red-team">Atomic Red Team</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a><ul><li><a href="#%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85">离线安装</a></li></ul></li><li><a href="#%E5%B1%95%E7%A4%BA-atomic-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%88%97%E8%A1%A8">展示 Atomic 测试用例列表</a></li><li><a href="#%E6%A3%80%E6%9F%A5%E5%85%88%E5%86%B3%E6%9D%A1%E4%BB%B6">检查先决条件</a></li><li><a href="#%E5%9C%A8%E6%9C%AC%E5%9C%B0%E6%89%A7%E8%A1%8C-atomic-tests">在本地执行 atomic tests</a><ul><li><a href="#%E9%80%9A%E8%BF%87%E7%BC%96%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95">通过编号执行测试</a></li><li><a href="#%E9%80%9A%E8%BF%87%E5%90%8D%E7%A7%B0%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95">通过名称执行测试</a></li><li><a href="#%E9%80%9A%E8%BF%87-guid-%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95">通过 GUID 执行测试</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E6%8C%87%E5%AE%9A%E6%8A%80%E6%9C%AF%E7%9A%84%E6%89%80%E6%9C%89%E6%B5%8B%E8%AF%95">执行指定技术的所有测试</a></li><li><a href="#%E6%8C%87%E5%AE%9A%E8%BF%9B%E7%A8%8B%E8%B6%85%E6%97%B6">指定进程超时</a></li><li><a href="#%E4%BA%A4%E4%BA%92%E6%89%A7%E8%A1%8C%E6%B5%8B%E8%AF%95">交互执行测试</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E6%89%80%E6%9C%89%E6%B5%8B%E8%AF%95">执行所有测试</a></li></ul></li><li><a href="#%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C-atomic-tests">在远程执行 atomic tests</a><ul><li><a href="#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6">前提条件</a></li><li><a href="#%E5%90%AF%E7%94%A8-powershell-remoting---win2win">启用 Powershell Remoting - Win2Win</a></li><li><a href="#%E5%AE%89%E8%A3%85-powershell-core---nowin">安装 Powershell Core - NoWin</a></li><li><a href="#%E9%80%9A%E8%BF%87-ssh-%E9%85%8D%E7%BD%AE-powershell-remoting---nowin">通过 SSH 配置 PowerShell Remoting - NoWin</a></li><li><a href="#%E5%9C%A8%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%89%A7%E8%A1%8C-atomic-tests">在远程机器上执行 atomic tests</a></li></ul></li><li><a href="#%E5%9C%A8%E6%89%A7%E8%A1%8C%E5%AE%8C-atomic-tests-%E4%B9%8B%E5%90%8E%E8%BF%90%E8%A1%8C%E6%B8%85%E7%90%86%E5%91%BD%E4%BB%A4">在执行完 atomic tests 之后运行清理命令</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E6%8C%87%E5%AE%9A%E6%B5%8B%E8%AF%95%E7%9A%84%E6%B8%85%E7%90%86%E5%91%BD%E4%BB%A4">运行指定测试的清理命令</a></li><li><a href="#%E5%AF%B9%E7%BB%99%E5%AE%9A%E7%BC%96%E5%8F%B7%E7%9A%84%E6%89%80%E6%9C%89-atomic-test-%E6%89%A7%E8%A1%8C%E6%B8%85%E7%90%86%E5%91%BD%E4%BB%A4">对给定编号的所有 atomic test 执行清理命令</a></li></ul></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8F%82%E6%95%B0">自定义参数</a><ul><li><a href="#%E4%BA%A4%E4%BA%92%E5%BC%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E5%8F%82%E6%95%B0">交互式自定义输入参数</a></li><li><a href="#%E5%8F%AF%E7%BC%96%E7%A8%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E5%8F%82%E6%95%B0">可编程自定义输入参数</a></li></ul></li><li><a href="#%E6%89%A7%E8%A1%8C%E6%97%A5%E5%BF%97">执行日志</a><ul><li><a href="#default-logger">Default Logger</a><ul><li><a href="#%E6%8C%87%E5%AE%9A%E7%94%A8%E4%BA%8E%E5%86%99%E5%85%A5%E6%89%A7%E8%A1%8C%E6%97%A5%E5%BF%97%E7%9A%84%E5%8F%AF%E9%80%89%E8%B7%AF%E5%BE%84">指定用于写入执行日志的可选路径</a></li><li><a href="#%E5%B0%86%E6%B5%8B%E8%AF%95%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6">将测试执行的输出重定向到文件</a></li></ul></li><li><a href="#attire-logger">Attire Logger</a><ul><li><a href="#%E5%B0%86-attire-logs-%E5%AF%BC%E5%85%A5-vectrtodo">将 Attire logs 导入 Vectr(TODO)</a></li></ul></li><li><a href="#syslog-logger">Syslog Logger</a></li><li><a href="#winevent-logger">WinEvent Logger</a></li></ul></li><li><a href="#%E6%94%BB%E5%87%BB%E6%A8%A1%E6%8B%9F">攻击模拟</a></li><li><a href="#%E5%8F%AF%E6%8C%81%E7%BB%AD%E7%9A%84-atomic-testing">可持续的 atomic testing</a><ul><li><a href="#setup-and-configuration">Setup and Configuration</a><ul><li><a href="#%E5%AE%89%E8%A3%85-atomic-red-team-%E5%92%8C-invoke-atomicredteam">安装 <code>Atomic Red Team</code> 和 <code>Invoke-AtomicRedTeam</code></a></li><li><a href="#%E4%BD%BF%E7%94%A8-privateconfigps1-%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE">使用 privateConfig.ps1 进行自定义配置</a></li><li><a href="#%E8%BF%90%E8%A1%8C-invoke-setupatomicrunner">运行 Invoke-SetupAtomicRunner</a></li></ul></li></ul></li><li><a href="#%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0">辅助函数</a></li><li><a href="#atomic-gui">Atomic GUI</a><ul><li><a href="#%E5%90%AF%E5%8A%A8-atomic-gui">启动 Atomic GUI</a></li></ul></li><li><a href="#%E5%8D%B8%E8%BD%BD">卸载</a></li></ul></li></ul><hr><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2>',6),g={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Installing-Invoke-AtomicRedTeam",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>先挂个代理:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 为当前 powershell 会话设置 http 与 https 代理</span>
<span class="token variable">$env</span>:HTTP_PROXY=<span class="token string">&quot;http://127.0.0.1:7890&quot;</span>
<span class="token variable">$env</span>:HTTPS_PROXY=<span class="token string">&quot;http://127.0.0.1:7890&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装执行框架以及 <code>atomic folder</code> :</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">IEX</span> <span class="token punctuation">(</span><span class="token function">IWR</span> <span class="token string">&#39;https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1&#39;</span> <span class="token operator">-</span>UseBasicParsing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Install-AtomicRedTeam</span> <span class="token operator">-</span>getAtomics
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309141814657.png" alt="image-20230914181259875"></p><blockquote><p>安装过程中会提示需要安装 NuGet, 同意安装即可</p><p>PS: 在哪个目录运行命令不重要, 文件不会落地到当前目录:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309141815360.png" alt="image-20230914181341639"></p><p>而是会在 C 盘根目录下新建一个 AtomicRedTeam 存储这些文件:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309150955518.png" alt="image-20230915095506951"></p><p>因此相应的, 如果原本这个目录是有文件的, 那么需要使用 <code>-Force</code> 参数来进行强制删除与替换, 如果这个目录下的文件需要保留的话请提前备份</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">IEX</span> <span class="token punctuation">(</span><span class="token function">IWR</span> <span class="token string">&#39;https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1&#39;</span> <span class="token operator">-</span>UseBasicParsing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Install-AtomicRedTeam</span> <span class="token operator">-</span>getAtomics <span class="token operator">-</span>Force
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>--InstallPath</code> 参数来指定安装目录, 例如:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Install-AtomicRedTeam</span> <span class="token operator">-</span>InstallPath <span class="token string">&quot;c:\\tools&quot;</span>
<span class="token function">Install-AtomicsFolder</span> <span class="token operator">-</span>InstallPath <span class="token string">&quot;c:\\tools&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>实际上这个安装操作就是将 <code>redcanaryco/atomic-red-team</code> 仓库的 <code>atomics</code> 目录以及 <code>redcanaryco/invoke-atomicredteam</code> 仓库的源码下载到了本地的某个目录, 然后为 powershell 注册了相关命令, 如果没安装 NuGet 的话还会提示安装一下</p><p>将 <code>invoke-atomicredteam</code> 作为模块导入到 powershell 才能使用相关命令:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151045518.png" alt="image-20230915104505877"></p><p>可以使用 <code>Get-Module</code> 来验证是否已安装成功:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Get-Module</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151047650.png" alt="image-20230915104750591"></p><p>不过需要注意的是, 脚本里虽然导入了模块, 但是只会在当前 Powershell 窗口生效, 因此需要将导入模块的命令写到 Powershell 配置文件中才能保证其永久生效</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 使用 VSCode 打开 powershell 配置文件</span>
code <span class="token variable">$profile</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在文件末尾写入如下命令并保存</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Import-Module</span> <span class="token string">&quot;C:\\AtomicRedTeam\\invoke-atomicredteam\\Invoke-AtomicRedTeam.psd1&quot;</span> <span class="token operator">-</span>Force
<span class="token variable">$PSDefaultParameterValues</span> = @<span class="token punctuation">{</span><span class="token string">&quot;Invoke-AtomicTest:PathToAtomicsFolder&quot;</span>=<span class="token string">&quot;C:\\AtomicRedTeam\\atomics&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151513177.png" alt="image-20230915151354682"></p><p>这样打开新的 powershell 的时候依旧可以识别到 atomic 相关模块</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151515029.png" alt="image-20230915151510956"></p><hr><h3 id="离线安装" tabindex="-1"><a class="header-anchor" href="#离线安装"><span>离线安装</span></a></h3><hr><h2 id="展示-atomic-测试用例列表" tabindex="-1"><a class="header-anchor" href="#展示-atomic-测试用例列表"><span>展示 Atomic 测试用例列表</span></a></h2><p>安装完框架以及 <code>atomic folder</code> 并且导入了模块后便可以开始使用了, 首先可以列出可以执行的技术的编号以及测试用例的名称:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 展示当前系统(Win,Lin,Mac)支持运行的 T1003 相关的 atomic 测试列表</span>
<span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>ShowDetailsBrief

<span class="token comment"># 展示所有系统支持运行的 T1003 相关的 atomic 测试列表</span>
<span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>ShowDetailsBrief <span class="token operator">-</span>anyOS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151054660.png" alt="image-20230915105446603"></p><hr><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 展示当前系统(Win,Lin,Mac)支持运行的 T1003 相关的 atomic 测试列表详细信息</span>
<span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>ShowDetails

<span class="token comment"># 展示所有系统支持运行的 T1003 相关的 atomic 测试列表详细信息</span>
<span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>ShowDetails <span class="token operator">-</span>anyOS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151518119.png" alt="image-20230915151816010"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151519888.png" alt="image-20230915151918794"></p><hr><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 展示当前系统(Win,Lin,Mac)支持运行的全部 atomic 测试列表</span>
<span class="token function">Invoke-AtomicTest</span> All <span class="token operator">-</span>ShowDetailsBrief

<span class="token comment"># 展示所有系统支持运行的全部 atomic 测试列表</span>
<span class="token function">Invoke-AtomicTest</span> All <span class="token operator">-</span>ShowDetailsBrief <span class="token operator">-</span>anyOS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果比较长, 就不全部展示了</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151102183.png" alt="image-20230915110254093"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151106570.png" alt="image-20230915110623464"></p><hr><h2 id="检查先决条件" tabindex="-1"><a class="header-anchor" href="#检查先决条件"><span>检查先决条件</span></a></h2><p>每个 atomic test 的 yaml 文件中都定义了其是否要在 Win, Lin 还是 Mac 上运行</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151523549.png" alt="image-20230915152316401"></p><p>不过有的 atomic test 可能会有更细致的需求, 例如可能需要在域控或服务器上运行而不能在工作站上运行; 或者说有些 atomic test 需要一些特征的文件或是依赖于一些其他工具,</p><p>要检查当前环境是否满足某个 test 所需的先决条件, 可以在执行测试前使用 <code>0CheckPrereqs</code> 来进行检查:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 检查当前环境是否满足 T1003 中名为 Gsecdump 测试</span>
<span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>TestName <span class="token string">&quot;Gsecdump&quot;</span> <span class="token operator">-</span>CheckPrereqs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151542287.png" alt="image-20230915154250877"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151543971.png" alt="image-20230915154318865"></p><blockquote><p>可以看到当前环境并不满足执行该项测试的前提条件</p></blockquote><hr><p>安装所需依赖:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>TestName <span class="token string">&quot;Gsecdump&quot;</span> <span class="token operator">-</span>GetPrereqs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151605993.png" alt="image-20230915160528504"></p><blockquote><p>安装依赖时可能需要代理, 并且也可能会多次失败, 这里会将以来程序装到如下目录中:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151607453.png" alt="image-20230915160724395"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151607392.png" alt="image-20230915160745338"></p></blockquote><hr><h2 id="在本地执行-atomic-tests" tabindex="-1"><a class="header-anchor" href="#在本地执行-atomic-tests"><span>在本地执行 atomic tests</span></a></h2><h3 id="通过编号执行测试" tabindex="-1"><a class="header-anchor" href="#通过编号执行测试"><span>通过编号执行测试</span></a></h3><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 检查依赖</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TestNumbers 1<span class="token punctuation">,</span>2 <span class="token operator">-</span>CheckPrereqs
<span class="token comment"># 依赖完整, 执行测试</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TestNumbers 1<span class="token punctuation">,</span>2
<span class="token comment"># 或者使用上述命令的简化写法:</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1<span class="token punctuation">,</span>2 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>检查依赖不通过则相应使用 <code>-GetPrereqs</code> 获取依赖然后再复查下即可</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 如果不满足则安装依赖</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TestNumbers 1<span class="token punctuation">,</span>2 <span class="token operator">-</span>GetPrereqs
<span class="token comment"># 检查依赖</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TestNumbers 1<span class="token punctuation">,</span>2 <span class="token operator">-</span>CheckPrereqs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151640839.png" alt="image-20230915164050337"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151641595.png" alt="image-20230915164124433"></p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 清理环境</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1<span class="token punctuation">,</span>2 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172251588.png" alt="image-20230917225147559"></p><hr><h3 id="通过名称执行测试" tabindex="-1"><a class="header-anchor" href="#通过名称执行测试"><span>通过名称执行测试</span></a></h3><p>除了上述命令中使用测试用例的编号外, 还可以使用其名称:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TestNames <span class="token string">&quot;Regsvr32 remote COM scriptlet execution&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Regsvr32 local DLL execution&quot;</span>
<span class="token comment"># 清理环境</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TestNames <span class="token string">&quot;Regsvr32 remote COM scriptlet execution&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Regsvr32 local DLL execution&quot;</span> <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151649184.png" alt="image-20230915164933033"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172252593.png" alt="image-20230917225213561"></p><hr><h3 id="通过-guid-执行测试" tabindex="-1"><a class="header-anchor" href="#通过-guid-执行测试"><span>通过 GUID 执行测试</span></a></h3><p>或者使用其 GUID:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TestGuids 449aa403-6aba-47ce-8a37-247d21ef0306<span class="token punctuation">,</span>c9d0c4ef-8a96-4794-a75b-3d3a5e6f2a36
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151652511.png" alt="image-20230915165205345"></p><hr><h3 id="执行指定技术的所有测试" tabindex="-1"><a class="header-anchor" href="#执行指定技术的所有测试"><span>执行指定技术的所有测试</span></a></h3><p>执行指定技术的所有用例</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 检查依赖</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>CheckPrereqs
<span class="token comment"># 如果不满足则安装依赖</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>GetPrereqs
<span class="token comment"># 检查依赖</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>CheckPrereqs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309151702456.png" alt="image-20230915170252327"></p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 执行测试</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309171925764.png" alt="image-20230917192454429"></p><blockquote><p>PS: 这里 <code>T1218.010-5</code> 会弹出一个计算器以及一个确定窗口(<code>regsvr32.exe</code>弹的), 需要点击确定窗口才会完成测试</p></blockquote><hr><h3 id="指定进程超时" tabindex="-1"><a class="header-anchor" href="#指定进程超时"><span>指定进程超时</span></a></h3><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TimeoutSeconds 15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果攻击命令未在指定的 <code>-TimeoutSeconds</code> 内退出(返回) ，则该进程及其子进程将被强制终止, 从而允许 <code>Invoke-AtomicTest</code> 脚本继续进行下一个测试。</p><blockquote><p><code>-TimeoutSeconds</code> 的默认值为 120。</p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309171944227.png" alt="image-20230917194407394"></p><blockquote><p>上之前的测试中可以看到这个用例是会有一个 regsvr 的弹窗卡住程序的, 因此便会超时退出</p></blockquote><hr><h3 id="交互执行测试" tabindex="-1"><a class="header-anchor" href="#交互执行测试"><span>交互执行测试</span></a></h3><p>可以通过在执行期间向测试提供输入的方式来执行测试。例如，在覆盖文件之前执行的命令会提示您进行确认。</p><p>为了能够执行此操作，必须指定 <code>-Interactive</code> 标志。如果不指定 <code>-Interactive</code> 标志并且命令要求用户输入，则执行将挂起，直到最终超时。</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 检查依赖</span>
<span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>CheckPrereqs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172114569.png" alt="image-20230917211459537"></p><p>发现缺少依赖, 需要安装, 执行</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 安装依赖</span>
<span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>GetPrereqs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172124537.png" alt="image-20230917212447500"></p><p>发现找不到 <code>Get-WindowsFeature</code> 命令, 搜索后发现该命令是属于 Windows Server 的命令, 这里用的是Win10Pro, 默认是没有这个模块的</p>`,95),k={href:"https://learn.microsoft.com/en-us/powershell/module/servermanager/get-windowsfeature?view=windowsserver2022-ps",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>所以需要装一下, 该命令属于 <code>ServerManager</code> 模块, 在 Win10 上可以通过 <code>管理可选功能</code> 页面添加 RSAT(<code>Remote Server Administrator Tools</code>) 的相关功能来安装, 不过这条命令具体属于哪个功能模块并没有找到, 因此这里就把 RSAT 相关功能全装了:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172147151.png" alt="image-20230917214755067"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172147482.png" alt="image-20230917214739417"></p><blockquote><p>PS: 感觉可能是这个, 不过想到其他测试可能也会用到相关模块, 就全装了</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172148166.png" alt="image-20230917214822097"></p><p>装完之后就可以用了:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172234613.png" alt="image-20230917223444555"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172245446.png" alt="image-20230917224559414"></p><p>报错了, 不支持在 Windows 客户端操作, 应该是要 Windows Server</p></blockquote><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>Interactive
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172247287.png" alt="image-20230917224725224"></p><p>使用 <code>-Interactive</code> 标志的缺点是无法将命令执行的输出重定向到文件。</p><hr><h3 id="执行所有测试" tabindex="-1"><a class="header-anchor" href="#执行所有测试"><span>执行所有测试</span></a></h3><p>不建议一次性执行所有的 atomic test, 非要这样做的话可以使用如下命令:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> All
<span class="token comment"># 上述命令默认使用预定义的 atomics 目录中的示例, 也可以指定指定 atomics 目录</span>
<span class="token function">Invoke-AtomicTest</span> All <span class="token operator">-</span>PathToAtomicsFolder C:\\AtomicRedTeam\\atomics
<span class="token comment"># 如果不想手动确认执行的话也可以使用如下命令, 将 Confirm 设置为 false</span>
<span class="token function">Invoke-AtomicTest</span> All <span class="token operator">-</span>Confirm:<span class="token boolean">$false</span>
<span class="token comment"># 或者将 Confirm 设置为 Medium(文档中没有详细说明 false 和 medium 二者的区别)</span>
<span class="token variable">$ConfirmPreference</span> = <span class="token string">&#39;Medium&#39;</span>
<span class="token function">Invoke-AtomicTest</span> All
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172208128.png" alt="image-20230917220839090"></p><p>需要确定才能运行, 这里就不完全跑完了</p><p>更好的方法是使用一个小的 PowerShell 脚本逐个运行每个测试，先获取先决条件，然后在每个测试执行后进行清理。</p><p>以下为运行所有自动化 Windows atomics 的 powershell 脚本示例:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token variable">$techniques</span> = <span class="token function">gci</span> C:\\AtomicRedTeam\\atomics\\<span class="token operator">*</span> <span class="token operator">-</span>Recurse <span class="token operator">-</span>Include T*<span class="token punctuation">.</span>yaml <span class="token punctuation">|</span> <span class="token function">Get-AtomicTechnique</span>

<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$technique</span> in <span class="token variable">$techniques</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$atomic</span> in <span class="token variable">$technique</span><span class="token punctuation">.</span>atomic_tests<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$atomic</span><span class="token punctuation">.</span>supported_platforms<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">&quot;windows&quot;</span><span class="token punctuation">)</span> <span class="token operator">-and</span> <span class="token punctuation">(</span><span class="token variable">$atomic</span><span class="token punctuation">.</span>executor <span class="token operator">-ne</span> <span class="token string">&quot;manual&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment"># Get Prereqs for test</span>
            <span class="token function">Invoke-AtomicTest</span> <span class="token variable">$technique</span><span class="token punctuation">.</span>attack_technique <span class="token operator">-</span>TestGuids <span class="token variable">$atomic</span><span class="token punctuation">.</span>auto_generated_guid <span class="token operator">-</span>GetPrereqs
            <span class="token comment"># Invoke</span>
            <span class="token function">Invoke-AtomicTest</span> <span class="token variable">$technique</span><span class="token punctuation">.</span>attack_technique <span class="token operator">-</span>TestGuids <span class="token variable">$atomic</span><span class="token punctuation">.</span>auto_generated_guid
            <span class="token comment"># Sleep then cleanup</span>
            <span class="token function">Start-Sleep</span> 3
            <span class="token function">Invoke-AtomicTest</span>  <span class="token variable">$technique</span><span class="token punctuation">.</span>attack_technique <span class="token operator">-</span>TestGuids <span class="token variable">$atomic</span><span class="token punctuation">.</span>auto_generated_guid <span class="token operator">-</span>Cleanup
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="在远程执行-atomic-tests" tabindex="-1"><a class="header-anchor" href="#在远程执行-atomic-tests"><span>在远程执行 atomic tests</span></a></h2><p>可以使用 <code>Invoke-AtomicTest</code> 函数在安装 Atomic Red Team 的系统(本地) 或通过 PowerShell 远程会话(远程) 在远程计算机上运行原子测试。如下说明展示了如何在远程计算机上执行测试。</p><hr><h3 id="前提条件" tabindex="-1"><a class="header-anchor" href="#前提条件"><span>前提条件</span></a></h3><p>在安装了 <code>Invoke-AtomicTests</code> 的本地计算机上, 满足如下条件后便可以在远程计算机上执行 atomic tests</p><table><thead><tr><th style="text-align:center;">本地计算机</th><th style="text-align:center;">远程计算机</th><th style="text-align:center;">先决条件</th></tr></thead><tbody><tr><td style="text-align:center;">Windows</td><td style="text-align:center;">Windows</td><td style="text-align:center;">远程必须启用 PowerShell Remoting</td></tr><tr><td style="text-align:center;">Windows</td><td style="text-align:center;">Linux, macOS</td><td style="text-align:center;">1) 本地必须安装PowerShell Core <br>2) 远程必须配置好了通过 SSH 来进行 powershell remoting</td></tr><tr><td style="text-align:center;">Linux, macOS</td><td style="text-align:center;">Windows</td><td style="text-align:center;">1) 本地必须安装PowerShell Core<br>2) 远程必须配置好了通过 SSH 来进行 powershell remoting</td></tr></tbody></table><hr><h3 id="启用-powershell-remoting-win2win" tabindex="-1"><a class="header-anchor" href="#启用-powershell-remoting-win2win"><span>启用 Powershell Remoting - Win2Win</span></a></h3>`,25),w={href:"https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-7.3&source=docs",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>如果本地和远程都是 Windows 的话, 只需要在远程 Windows 上启用 PS Remoteing</p><blockquote><p>PS: 官方 wiki 这里有问题; 推荐在本地与远程都启用 PS Remoting , 详见 [在远程机器上执行 atomic tests](#在远程机器上执行 atomic tests) 章节的内容</p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309181627870.png" alt="image-20230918162723157"></p><blockquote><p>这个虚拟机加了两张卡, 一张用来连公网, 一张用来连内网, 这里由于公网那张卡开 WinRM 失败了, 因此暂且将其禁用了</p><p>除此以外, 文档中还提到了这种情况下也可以通过使用 <code>-SkipNetworkProfileCheck</code> 来跳过此项验证</p></blockquote><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Enable-PSRemoting</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309181632947.png" alt="image-20230918163201801"></p><p>默认情况下, 只有远程计算机上的 Administrators 组中的用户才能建立 PS Remoting 连接</p><hr><h3 id="安装-powershell-core-nowin" tabindex="-1"><a class="header-anchor" href="#安装-powershell-core-nowin"><span>安装 Powershell Core - NoWin</span></a></h3>`,9),f={href:"https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell?view=powershell-7.3",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>当本地和远程计算器不是 Windows 时, 必须安装 <code>Powershell Core Version &gt;= 6</code> 的版本</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token variable">$PSVersionTable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309181800702.png" alt="image-20230918180016101"></p><hr><h3 id="通过-ssh-配置-powershell-remoting-nowin" tabindex="-1"><a class="header-anchor" href="#通过-ssh-配置-powershell-remoting-nowin"><span>通过 SSH 配置 PowerShell Remoting - NoWin</span></a></h3>`,5),E={href:"https://learn.microsoft.com/en-us/powershell/scripting/learn/remoting/ssh-remoting-in-powershell-core?view=powershell-7.3",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>当本地与远程计算机都不是 Windows 时, 必须将远程计算机配置为通过 SSH 进行 Powershell Remoting, 具体操作可以参阅上面的链接</p><p>PS: 如果远程计算机为 Linux/MacOS, 并且如果运行的测试需要管理员权限的话, 需要再 sshd_config 文件中包含 sudo, 并且需要链接的用户必须能够在没有密码的情况下执行 sudo</p><ul><li><p><code>Linux</code>: <code>/etc/ssh/sshd_config</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Subsystem powershell sudo /usr/bin/pwsh -sshs -NoLogo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>macOS</code>: <code>/private/etc/ssh/sshd_config</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Subsystem powershell sudo /usr/local/bin/pwsh -sshs -NoLogo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><h3 id="在远程机器上执行-atomic-tests" tabindex="-1"><a class="header-anchor" href="#在远程机器上执行-atomic-tests"><span>在远程机器上执行 atomic tests</span></a></h3><p>在执行测试前, 必须先和远程计算机建立 PS Session(<code>$sess</code>)</p>`,6),x={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Execute-Atomic-Tests-(Remote)#establish-a-ps-session-from-windows-to-windows",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Execute-Atomic-Tests-(Remote)#establish-a-ps-session-establish-a-ps-session-from-linuxosx-to-windowslinuxosx",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Execute-Atomic-Tests-(Remote)#establish-a-ps-session-establish-a-ps-session-from-linuxosx-to-windowslinuxosx",target:"_blank",rel:"noopener noreferrer"},q=t(`<blockquote><p>这里做下 Win2Win 的流程</p></blockquote><p>在本地 Windows Powershell 上尝试与远程 Windows 建立 Powershell Session</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token variable">$sess</span> = <span class="token function">New-PSSession</span> <span class="token operator">-</span>ComputerName testcomputer <span class="token operator">-</span>Credential domain\\username
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>ComputerName</code>: 待链接的远程计算机的名称或 IP</li></ul><blockquote><p>PS: 这里的 username, 不管是本地用户组还是域用户组, 都是需要管理员用户才能够成功连上, 如果用的是普通用户的话则会报错</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202310191538449.png" alt="image-20231019153819583"></p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191007241.png" alt="image-20230919100736521"></p><p>尝试建立连接时出现了上述报错, 查阅资料后发现这是由于本地计算机没有信任远程计算机的证书导致的</p>`,7),I={href:"https://www.ipentec.com/document/windows-windows-10-add-winrm-trasted-hosts",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>可以通过如下几种方式解决问题</p><ul><li><strong>使用 HTTPS 连接</strong>：安全地连接到远程计算机的一种方法是使用 HTTPS。这通常需要配置远程计算机上的 WinRM 服务以支持 HTTPS。不过这需要一些额外的设置和证书管理。</li><li><strong>将远程计算机添加到 TrustedHosts 列表</strong>：可以将目标计算机添加到本地计算机的 TrustedHosts 列表中以信任该计算机。</li><li>如果本地和远程计算机在同一个域中, 可以使用 Kerberos 认证来连接远程计算机, 可以在 <code>New-PSSession</code> 命令后加上 <code>Authentication Kerberos</code> 参数来使用 Kerberos 认证</li></ul><p>这里本地和远程在两个局域网中, 选择通过将远程计算机添加到本地 TrustedHosts 列表来解决问题:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Set-Item</span> wsman:\\localhost\\Client\\TrustedHosts <span class="token operator">-</span>Value <span class="token string">&quot;192.168.4.214&quot;</span> <span class="token operator">-</span>Force
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),D={href:"https://learn.microsoft.com/en-us/powershell/scripting/learn/remoting/wsman-remoting-in-powershell-core?view=powershell-7.3",target:"_blank",rel:"noopener noreferrer"},B=t(`<p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191048599.png" alt="image-20230919104826960"></p><p>这里就体现出官方 wiki 的问题了, 实际上本地计算机也是需要启用 PSRemoting 的, 否则这里会一直连不上</p><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191054618.png" alt="image-20230919105427539"></p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191054181.png" alt="image-20230919105455088"></p><p>在本地计算机启用了 PSRemoting 后就可以顺畅地连接到远程 Windwos 了, 可以通过 <code>Get-PSSession</code> 来查看已建立的 session</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Get-PSSession</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191056653.png" alt="image-20230919105638522"></p><blockquote><p>要释放这个 session 可以使用 <code>Remove-PSSession</code> 命令</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Remove-PSSession</span> <span class="token variable">$sess</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><hr><p>建立完 PS Session 后, 可以这样远程执行测试:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Invoke-AtomicTest T1218.010-1 -Session $sess -CheckPrereqs
Invoke-AtomicTest T1218.010-1 -Session $sess -GetPrereqs
Invoke-AtomicTest T1218.010-1 -Session $sess 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191105793.png" alt="image-20230919110546671"></p><p>可以看到检查前提条件时报错了, 该路径下缺少文件, 仔细看这个路径可以看到这个像是 atomic folder, 这也就引出了: <mark>对于远程执行的情况 , 即使在远程配置了 atomic folder 的路径,<code>PathToAtomicsFolder</code> 始终以 <code>$env:Temp</code> 开头</mark>, 那么解决方案也很简单, 在远程计算机上的 <code>$env:Temp</code> 目录安装 atolmic folder 即可</p><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191125912.png" alt="image-20230919112531474"></p></blockquote><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 为当前 powershell 会话设置 https 代理</span>
<span class="token variable">$env</span>:HTTPS_PROXY=<span class="token string">&quot;http://127.0.0.1:7890&quot;</span>
<span class="token comment"># 安装执行框架与 atomic folder</span>
<span class="token function">IEX</span> <span class="token punctuation">(</span><span class="token function">IWR</span> <span class="token string">&#39;https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1&#39;</span> <span class="token operator">-</span>UseBasicParsing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Install-AtomicRedTeam</span> <span class="token operator">-</span>getAtomics
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 atomics 目录拷贝到 <code>$env:Temp</code> 目录下重命名为 <code>AtomicRedTeam</code> 目录</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191529293.png" alt="image-20230919152950136"></p><hr><p>重新查一下前提条件:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191528752.png" alt="image-20230919152807833"></p><p>运行:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Session <span class="token variable">$sess</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>成功在远程利用:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191530897.png" alt="image-20230919153014730"></p><hr><p>清理环境</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Session <span class="token variable">$sess</span> <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191531917.png" alt="image-20230919153107833"></p><hr><h2 id="在执行完-atomic-tests-之后运行清理命令" tabindex="-1"><a class="header-anchor" href="#在执行完-atomic-tests-之后运行清理命令"><span>在执行完 atomic tests 之后运行清理命令</span></a></h2><p>许多原子测试包括清理命令，用于删除在执行测试期间生成的临时文件或将设置返回到以前的或更安全的值，以便可以再次运行测试。建议在每次测试执行后运行清理命令。</p><p>可以使用 <code>ShowDetails</code> 选项来查看清理命令的具体作用</p><p>要查看清理命令的作用，您可以使用 <code>-ShowDetails</code> 选项，如本 Wiki 的“列表原子测试”页面上所述。</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1003 <span class="token operator">-</span>ShowDetails
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172216543.png" alt="image-20230917221634506"></p><hr><h3 id="运行指定测试的清理命令" tabindex="-1"><a class="header-anchor" href="#运行指定测试的清理命令"><span>运行指定测试的清理命令</span></a></h3><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 清理环境</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>TestNames <span class="token string">&quot;Regsvr32 remote COM scriptlet execution&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Regsvr32 local DLL execution&quot;</span> <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172252223.png" alt="image-20230917225234153"></p><hr><h3 id="对给定编号的所有-atomic-test-执行清理命令" tabindex="-1"><a class="header-anchor" href="#对给定编号的所有-atomic-test-执行清理命令"><span>对给定编号的所有 atomic test 执行清理命令</span></a></h3><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309172254323.png" alt="image-20230917225429297"></p><hr><h2 id="自定义参数" tabindex="-1"><a class="header-anchor" href="#自定义参数"><span>自定义参数</span></a></h2><h3 id="交互式自定义输入参数" tabindex="-1"><a class="header-anchor" href="#交互式自定义输入参数"><span>交互式自定义输入参数</span></a></h3><p>可以使用 <code>-PromptForInputArgs</code> 参数来为 atomic test 指定自定义的变量, 这需要用户手动输入各参数的值来进行测试, 未输入则保留 yaml 中的默认值</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1564<span class="token punctuation">.</span>004 <span class="token operator">-</span>TestNames <span class="token string">&quot;Create ADS command prompt&quot;</span> <span class="token operator">-</span>PromptForInputArgs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191559485.png" alt="image-20230919155912020"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191559781.png" alt="image-20230919155947614"></p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 清理环境</span>
<span class="token function">Invoke-AtomicTest</span> T1564<span class="token punctuation">.</span>004 <span class="token operator">-</span>TestNames <span class="token string">&quot;Create ADS command prompt&quot;</span> <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191601238.png" alt="image-20230919160106125"></p><hr><h3 id="可编程自定义输入参数" tabindex="-1"><a class="header-anchor" href="#可编程自定义输入参数"><span>可编程自定义输入参数</span></a></h3><p>可以使用命令行或者脚本来指定全部或部分的输入参数, 没有定义的部分会采用 test 本身的 yaml 中的默认值</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token variable">$myArgs</span> = @<span class="token punctuation">{</span> <span class="token string">&quot;filename&quot;</span> = <span class="token string">&quot;C:\\AtomicRedTeam\\atomics\\T1218.010\\src\\RegSvr32.sct&quot;</span><span class="token punctuation">;</span> <span class="token string">&quot;regsvr32name&quot;</span> = <span class="token string">&quot;regsvr32.exe&quot;</span> <span class="token punctuation">}</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>InputArgs <span class="token variable">$myArgs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191606303.png" alt="image-20230919160632186"></p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># 清理环境</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191607844.png" alt="image-20230919160711767"></p><hr><h2 id="执行日志" tabindex="-1"><a class="header-anchor" href="#执行日志"><span>执行日志</span></a></h2>`,61),N={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Execution-Logging#default-logger",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Execution-Logging#attire-logger",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Execution-Logging#syslog-logger",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Execution-Logging#winevent-logger",target:"_blank",rel:"noopener noreferrer"},W=t(`<hr><h3 id="default-logger" tabindex="-1"><a class="header-anchor" href="#default-logger"><span>Default Logger</span></a></h3><p>默认情况下, 测试执行的详细信息会被写入 <code>temp目录($env:TEMP、%tmp% 或 \\tmp)</code> 中的 <code>Invoke-AtomicTest-ExecutionLog.csv</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191614453.png" alt="image-20230919161428365"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309200951811.png" alt="image-20230920095105702"></p><hr><h4 id="指定用于写入执行日志的可选路径" tabindex="-1"><a class="header-anchor" href="#指定用于写入执行日志的可选路径"><span>指定用于写入执行日志的可选路径</span></a></h4><p>也可以使用 <code>-ExecutionLogPath</code> 参数可以将 log 写入其他文件</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>ExecutionLogPath <span class="token string">&#39;C:\\Temp\\mylog.csv&#39;</span>
<span class="token comment"># 清理环境(PS:后面那个log路径实际上是没用的, cleanup并不会触发日志记录, 这里只是做下对照)</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Cleanup <span class="token operator">-</span>ExecutionLogPath <span class="token string">&#39;C:\\Temp\\mylog.csv&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309191626589.png" alt="image-20230919162649472"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309200950491.png" alt="image-20230920095049408"></p><p>只有当 <mark>执行</mark> 测试时才会记录日志, 而 <code>-ShowDetais</code>, <code>-CheckPrereqs</code>, <code>-GetPrereqs</code>, <code>-Cleanup</code> 都是不会被记录的</p><hr><p>此外还可以使用 <code>-NoExecutionLog</code> 参数, 这样就不会讲执行信息写到磁盘上了</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010 <span class="token operator">-</span>NoExecutionLog
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201015569.png" alt="image-20230920101528485"></p><p>这样执行应该是会记录到默认的日志位置 <code>$env:TEMP\\Invoke-AtomicTest-ExecutionLog.csv</code>, 由于使用了 <code>-NoExecutionLog</code>, 因此打开 log 文件是看不到相应记录的:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201018353.png" alt="image-20230920101805218"></p><hr><p>执行 log 记录了 <code>测试名称</code>, <code>测试编号</code>, <code>执行时间</code>, <code>用户名</code>, <code>主机名</code> 等信息,</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Import-Csv</span> <span class="token variable">$env</span>:TEMP\\<span class="token function">Invoke-AtomicTest</span><span class="token operator">-</span>ExecutionLog<span class="token punctuation">.</span>csv <span class="token punctuation">|</span> <span class="token function">Out-GridView</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201014467.png" alt="image-20230920101438586"></p><hr><h4 id="将测试执行的输出重定向到文件" tabindex="-1"><a class="header-anchor" href="#将测试执行的输出重定向到文件"><span>将测试执行的输出重定向到文件</span></a></h4><p>Attire Logger 是唯一生成包含完整命令输入和输出详细信息的日志的日志记录机制, 如果要在使用其他记录器时捕获命令输入输出的话可以使用如下命令</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">*</span>&gt;&amp;1 <span class="token punctuation">|</span> <span class="token function">Tee-Object</span> atomic-out<span class="token punctuation">.</span>txt <span class="token operator">-</span>Append
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令会将所有的三个输出流记录到名为 <code>atomic-out.txt</code> 的文件中</p><blockquote><p>使用 <code>-Append</code> 参数是为了续写而非覆盖文件</p><p>三个输出流想来应该是指 <code>PathToAtomicsFolder</code>, <code>Executing test</code>, <code>Done executing test</code></p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201046881.png" alt="image-20230920104629240"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201047668.png" alt="image-20230920104719551"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201048832.png" alt="image-20230920104829732"></p><blockquote><p>清理环境</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Cleanup
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-2 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201051309.png" alt="image-20230920105140212"></p></blockquote><p>如果要单独记录错误日志的话, 可以使用如下命令:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1027  <span class="token operator">-</span>TestNumbers 2 2&gt;&gt;atomic-error<span class="token punctuation">.</span>txt <span class="token punctuation">|</span> <span class="token function">Tee-Object</span> atomic-out<span class="token punctuation">.</span>txt <span class="token operator">-</span>Append
<span class="token comment"># 清理环境</span>
<span class="token function">Invoke-AtomicTest</span> T1027  <span class="token operator">-</span>TestNumbers 2 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201053138.png" alt="image-20230920105347008"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201113409.png" alt="image-20230920111314658"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201113463.png" alt="image-20230920111328375"></p><hr><h3 id="attire-logger" tabindex="-1"><a class="header-anchor" href="#attire-logger"><span>Attire Logger</span></a></h3><p>Default Logger 不会记录命令输出, 要记录名称输出的话可以使用 Attire Logger;</p><p>Attire format 用 json 编写, 可以导入到 Vectr 这样的紫队报告工具中;</p><p>Attire Logger 的默认日志名称为 <code>tmp($env:TEMP、%tmp% 或 \\tmp)</code> 目录中的 <code>Invoke-AtomicTest-ExecutionLog-timestamp.json</code></p><p>需要注意的是日志文件名时间戳会被替换为执行时的实际时间戳, 这意味着每次调用 <code>Invoke-AtomicTest</code> 都会创建一个新的时间戳日志文件</p><p>可以在执行 atomic tests 时指定 Attire logger</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>LoggingModule <span class="token string">&quot;Attire-ExecutionLogger&quot;</span> <span class="token operator">-</span>ExecutionLogPath T1218<span class="token punctuation">.</span>010-1<span class="token punctuation">.</span>json
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将在当前目录创建一个名为 <code>T1218.010-1.json</code> 的 Json 执行日志, 后续可以将其导入到 Vectr 中</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201122878.png" alt="image-20230920112210688"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201121344.png" alt="image-20230920112130716"></p><hr><p>需要注意的是 Default Logger 将日志记录到单个文件中, 但是 Attire Logger 会在每次调用 Invoke-AtomicTest 时覆盖日志; 如果需要保留所有日志而不是每次都指定新名称的话可以在名称中使用时间戳占位符, 改占位符将在运行时按照实际执行时间戳替换;</p><p>如下命令将每次都使用当前时间戳作为文件名写入一个新的日志文件</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>LoggingModule <span class="token string">&quot;Attire-ExecutionLogger&quot;</span> <span class="token operator">-</span>ExecutionLogPath <span class="token string">&quot;timestamp.json&quot;</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201723876.png" alt="image-20230920172308393"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309201727446.png" alt="image-20230920172732211"></p><hr><p>最后, 如果不想每次都手动指定 <code>LoggingModule</code> 的话, 可以将如下命令添加到 powershell profile 中</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token variable">$PSDefaultParameterValues</span> = @<span class="token punctuation">{</span><span class="token string">&quot;Invoke-AtomicTest:LoggingModule&quot;</span>=<span class="token string">&quot;Attire-ExecutionLogger&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者也可以通过 [privateConfig.ps1 file](#使用 privateConfig.ps1 进行自定义配置) 来设置 Logger 选项</p><hr><h4 id="将-attire-logs-导入-vectr-todo" tabindex="-1"><a class="header-anchor" href="#将-attire-logs-导入-vectr-todo"><span>将 Attire logs 导入 Vectr(TODO)</span></a></h4>`,60),F={href:"https://www.youtube.com/watch?v=n-C9ovMFYnk",target:"_blank",rel:"noopener noreferrer"},M={href:"https://vectr.io/",target:"_blank",rel:"noopener noreferrer"},$=t(`<div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1016 <span class="token operator">-</span>CheckPrereqs
<span class="token function">Invoke-AtomicTest</span> T1016 <span class="token operator">-</span>GetPrereqs
<span class="token function">Invoke-AtomicTest</span> T1016 <span class="token operator">-</span>LoggingModule <span class="token string">&quot;Attire-ExecutionLogger&quot;</span> <span class="token operator">-</span>ExecutionLogPath <span class="token string">&quot;timestamp.json&quot;</span>
<span class="token function">Invoke-AtomicTest</span> T1016 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211413650.png" alt="image-20230921141313725"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211423866.png" alt="image-20230921142333314"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211429570.png" alt="image-20230921142924415"></p><p>这个用例始终装不上, 使用系统是 mac 和 lin, 暂且搁置下</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211434169.png" alt="image-20230921143424015"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211440852.png" alt="image-20230921144057691"></p><blockquote><p>和官方一样的操作, 但是无法导入, 有些奇怪, 后续再看看</p></blockquote>`,8),O={href:"https://github.com/Retrospected/attire-merger",target:"_blank",rel:"noopener noreferrer"},G=t(`<blockquote><p>暂时没相关需求, 之后需要的时候再尝试下</p></blockquote><hr><h3 id="syslog-logger" tabindex="-1"><a class="header-anchor" href="#syslog-logger"><span>Syslog Logger</span></a></h3><p>除了使用 Default Logger 外还可以将执行的详细信息记录到 Syslog server; 可以在 <code>privateConfig.ps1</code> 中指定 Syslog 服务器和端口</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>LoggingModule <span class="token string">&quot;Syslog-ExecutionLogger&quot;</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Syslog 消息包含 Json 格式的字符串, 具体有如下信息:</p><ul><li>Execution Time (UTC)</li><li>Execution Time (Local)</li><li>Technique</li><li>Test Number</li><li>Test Name</li><li>Hostname</li><li>IP Address</li><li>Username</li><li>GUID</li><li>Tag</li><li>CustomTag</li></ul><p>其中 Tag 设置为 atomicrunner，并且 CustomTag 可通过 <code>privateConfig.ps1</code> 进行配置。</p><hr><h3 id="winevent-logger" tabindex="-1"><a class="header-anchor" href="#winevent-logger"><span>WinEvent Logger</span></a></h3><p>可以将执行的详细信息直接记录到 Windwos 事件日志中, 命令如下所示; 执行完后可以在 Windows 事件查看器的 <code>Application and Service Logs</code> 目录下的 <code>Atomic Red Team</code> 日志中找到执行的详细信息</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>LoggingModule <span class="token string">&quot;WinEvent-ExecutionLogger&quot;</span>
<span class="token function">Invoke-AtomicTest</span> T1218<span class="token punctuation">.</span>010-1 <span class="token operator">-</span>Cleanup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: 第一次使用 WinEvent Logger 时，需要以管理员身份执行此操作，以便创建 <code>Atomic Red Team</code> 日志。创建后便不再需要以管理员用户身份调用测试来获取记录的执行详细信息。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211502434.png" alt="image-20230921150201738"></p><hr><h2 id="攻击模拟" tabindex="-1"><a class="header-anchor" href="#攻击模拟"><span>攻击模拟</span></a></h2><p>可以按照设定的顺序执行 atomic tests; Atomic Runner 支持基于 CSV 格式的 Atomic tests list, 该文件中药指定要运行的每个 atomic test, 且支持自定义输入参数以及执行的超时值(timeout values)</p><p>这个脚本适用于 Windows, Linux 和 MacOS, 不过需要在 Linux/MacOS 上安装 Powershell Core 才能使用这些脚本</p><blockquote><p>TODO: 需要的时候再继续记录</p></blockquote><hr><h2 id="可持续的-atomic-testing" tabindex="-1"><a class="header-anchor" href="#可持续的-atomic-testing"><span>可持续的 atomic testing</span></a></h2>`,21),U={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Continuous-Atomic-Testing",target:"_blank",rel:"noopener noreferrer"},H=t(`<p>Atomic Runner 功能支持在无人值守的情况下运行配置好的 atomic tests 列表, 以帮助生成预防与检测报告</p><p>这些脚本设计上默认配置下每周会运行一次 CSV 配置中的所有测试;这些脚本在运行每个 atomic test 之前, 会将其 GUID 附加到 hostname 末尾, 以便更容易确定检测是从哪个 atomic test 触发的; 因为检测中会包括 GUID 和 hostname, 因此 Cleanup 命令也会在 test 执行完后根据 GUID 运行</p><p>这个脚本适用于 Windows, Linux 和 MacOS, 不过需要在 Linux/MacOS 上安装 Powershell Core 才能使用这些脚本</p><hr><h3 id="setup-and-configuration" tabindex="-1"><a class="header-anchor" href="#setup-and-configuration"><span>Setup and Configuration</span></a></h3><h4 id="安装-atomic-red-team-和-invoke-atomicredteam" tabindex="-1"><a class="header-anchor" href="#安装-atomic-red-team-和-invoke-atomicredteam"><span>安装 <code>Atomic Red Team</code> 和 <code>Invoke-AtomicRedTeam</code></span></a></h4><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">IEX</span> <span class="token punctuation">(</span><span class="token function">IWR</span> <span class="token string">&#39;https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/install-atomicredteam.ps1&#39;</span> <span class="token operator">-</span>UseBasicParsing<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Install-AtomicRedTeam</span> <span class="token operator">-</span>getAtomics <span class="token operator">-</span>Force <span class="token operator">-</span>noPayloads
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>PS(仅限Windows): 必须要 Atomic Runner 所在机器上禁用本地安全策略(<code>安全设置-&gt;本地策略-&gt; 安全选项 &quot;网络访问:不允许存储网络身份验证的密码和凭据&quot;</code>) 才能允许创建计划任务</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211036485.png" alt="image-20230921103620728"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211039706.png" alt="image-20230921103951539"></p><hr><h4 id="使用-privateconfig-ps1-进行自定义配置" tabindex="-1"><a class="header-anchor" href="#使用-privateconfig-ps1-进行自定义配置"><span>使用 privateConfig.ps1 进行自定义配置</span></a></h4><p><code>Invoke-AtomicRedTeam\\Public</code> 目录下有个名为 <code>config.ps1</code> 的配置文件, 可以在 atomic 安装目录下创建 <code>privateConfig.ps1</code> 来修改该文件中的默认值</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211108170.png" alt="image-20230921110837441"></p><table><thead><tr><th>Configuration Variable <br>配置变量</th><th>Description 描述</th></tr></thead><tbody><tr><td>PathToInvokeFolder</td><td>The folder containing the installed Invoke-AtomicRedTeam folder <br>包含已安装的 Invoke-AtomicRedTeam 文件夹的文件夹</td></tr><tr><td>PathToPublicAtomicsFolder</td><td>The folder containing the installed atomics folder <br>包含已安装的atomics文件夹的文件夹</td></tr><tr><td>PathToPrivateAtomics</td><td>The folder containing your own private atomics (if any) <br>包含您自己的私有原子的文件夹(如果有)</td></tr><tr><td>user</td><td>The user/account that will be used to execute atomics <br>将用于执行原子操作的用户/帐户</td></tr><tr><td>basePath</td><td>The path where you want the folder created that houses the logs and the runner schedule. <br>您希望在其中创建包含日志和运行程序计划的文件夹的路径。</td></tr><tr><td>scheduleTimeSpan</td><td>The time span in which you want all of the atomics on your schedule to complete. <br>您希望完成计划中所有原子操作的时间跨度。</td></tr><tr><td>scheduleFileName</td><td>The name of the csv file containing the schedule (list) of atomic tests to run. <br>包含要运行的原子测试的计划(列表) 的 csv 文件的名称。</td></tr><tr><td>kickOffDelay</td><td>A delay (specified as a PowerShell Timespan object) to sleep before running the atomic <br>运行原子之前的睡眠延迟(指定为 PowerShell Timespan 对象)</td></tr><tr><td>syslogServer</td><td>Set this to the name of your syslog server if you want to use the SysLog execution logger <br>如果您想使用 SysLog 执行记录器，请将其设置为您的 syslog 服务器的名称</td></tr><tr><td>syslogPort</td><td>The port for the syslog server (ignored if syslogServer not set) <br>syslog 服务器的端口(如果未设置 syslogServer，则忽略)</td></tr><tr><td>syslogProtocol</td><td>The port for the network protocol to use with the syslog server (options are UDP, TCP, TCPwithTLS) <br>与 syslog 服务器一起使用的网络协议的端口(选项包括 UDP、TCP、TCPwithTLS)</td></tr><tr><td>LoggingModule</td><td>The logging module to use for the atomic execution logs (e.g. Attire-ExecutionLogger, Syslog-ExecutionLogger or WinEvent-ExecutionLogger)<br>用于原子执行日志的日志记录模块(例如 Attire-ExecutionLogger、Syslog-ExecutionLogger 或 WinEvent-ExecutionLogger)</td></tr><tr><td>verbose</td><td>Set to <code>$true</code> for more output in the runner logs <br>设置为 <code>$true</code> 以获得运行程序日志中的更多输出</td></tr><tr><td>debug</td><td>Set to <code>$true</code> for additional output which will be added to a file called <code>all-out-&lt;base hostname&gt;.txt</code> <br>设置为 <code>$true</code> 以获得额外输出，该输出将添加到名为 <code>all-out-&lt;base hostname&gt;.txt</code> 的文件中</td></tr><tr><td>logFolder</td><td>Name of the folder that will be found in the basePath and contains the Runner logs <br>将在 basePath 中找到并包含运行程序日志的文件夹的名称</td></tr><tr><td>CustomTag</td><td>A string that you want sent with each execution log sent to the SysLog logger <br>您希望与发送到 SysLog 记录器的每个执行日志一起发送的字符串</td></tr><tr><td>absb</td><td>An optional AMSI bypass script block that will be run before each atomic (Windows Only) <br>将在每个原子之前运行的可选 AMSI 绕过脚本块(仅限 Windows)</td></tr><tr><td>gmsaAccount</td><td>A group managed service account to use for renaming the host if required (Windows Only) <br>如果需要，用于重命名主机的组托管服务帐户(仅限 Windows)</td></tr></tbody></table><p>默认值表:</p><table><thead><tr><th style="text-align:center;">config variable 配置变量</th><th style="text-align:center;">default (Windows) 默认(Windows)</th><th style="text-align:center;">default (Linux/macOS) 默认(Linux/macOS)</th></tr></thead><tbody><tr><td style="text-align:center;">PathToInvokeFolder</td><td style="text-align:center;"><code>C:\\AtomicRedTeam\\Invoke-AtomicRedTeam</code></td><td style="text-align:center;"><code>~/AtomicRedTeam/Invoke-AtomicRedTeam</code></td></tr><tr><td style="text-align:center;">PathToPublicAtomicsFolder 公共原子文件夹路径</td><td style="text-align:center;"><code>C:\\AtomicRedTeam\\atomics</code></td><td style="text-align:center;"><code>~/AtomicRedTeam/atomics</code></td></tr><tr><td style="text-align:center;">PathToPrivateAtomics</td><td style="text-align:center;"><code>C:\\PrivateAtomics\\atomics</code></td><td style="text-align:center;"><code>~/PrivateAtomics/atomics</code></td></tr><tr><td style="text-align:center;">user</td><td style="text-align:center;"><code>$env:USERDOMAIN\\$env:USERNAME</code></td><td style="text-align:center;"><code>$env:USER</code></td></tr><tr><td style="text-align:center;">basePath</td><td style="text-align:center;"><code>$env:HOME</code></td><td style="text-align:center;"><code>$env:USERPROFILE</code></td></tr><tr><td style="text-align:center;">scheduleTimeSpan</td><td style="text-align:center;">7 days</td><td style="text-align:center;">7 days</td></tr><tr><td style="text-align:center;">scheduleFileName</td><td style="text-align:center;"><code>AtomicRunnerSchedule.csv </code></td><td style="text-align:center;"><code>AtomicRunnerSchedule.csv </code></td></tr><tr><td style="text-align:center;">kickOffDelay</td><td style="text-align:center;">0 minutes</td><td style="text-align:center;">0 minutes</td></tr><tr><td style="text-align:center;">syslogServer 系统日志服务器</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">syslogPort</td><td style="text-align:center;">514</td><td style="text-align:center;">514</td></tr><tr><td style="text-align:center;">syslogProtocol</td><td style="text-align:center;">UDP</td><td style="text-align:center;">UDP</td></tr><tr><td style="text-align:center;">LoggingModule</td><td style="text-align:center;">Default-ExecutionLogger</td><td style="text-align:center;">Default-ExecutionLogger</td></tr><tr><td style="text-align:center;">verbose</td><td style="text-align:center;"><code>$false</code></td><td style="text-align:center;"><code>$false</code></td></tr><tr><td style="text-align:center;">debug</td><td style="text-align:center;"><code>$false</code></td><td style="text-align:center;"><code>$false</code></td></tr><tr><td style="text-align:center;">logFolder</td><td style="text-align:center;">AtomicRunner-Logs</td><td style="text-align:center;">AtomicRunner-Logs</td></tr><tr><td style="text-align:center;">CustomTag</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">absb</td><td style="text-align:center;"><code>$null</code></td><td style="text-align:center;"><code>$null</code></td></tr><tr><td style="text-align:center;">gmsaAccount</td><td style="text-align:center;"><code>$null</code></td><td style="text-align:center;"><code>$null</code></td></tr></tbody></table><hr><p><code>privateConfig.ps1</code> 实例:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token variable">$artConfig</span> <span class="token punctuation">|</span> <span class="token function">Add-Member</span> <span class="token operator">-</span>Force <span class="token operator">-</span>NotePropertyMembers @<span class="token punctuation">{</span>
  PathToPrivateAtomics = <span class="token string">&quot;C:\\MyPrivateAtomics\\atomics&quot;</span>
  scheduleTimeSpan = <span class="token function">New-TimeSpan</span> <span class="token operator">-</span>Days 1 
  verbose = <span class="token boolean">$true</span>
  LoggingModule = <span class="token string">&quot;WinEvent-ExecutionLogger&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: 必须启动新的 Powershell 窗口才能使 privateConfig 文件的更改生效</p><hr><h4 id="运行-invoke-setupatomicrunner" tabindex="-1"><a class="header-anchor" href="#运行-invoke-setupatomicrunner"><span>运行 Invoke-SetupAtomicRunner</span></a></h4><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token comment"># Run Invoke-SetupAtomicRunner as the runner user (from admin prompt)</span>
<span class="token function">Invoke-SetupAtomicRunner</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: 在 Windwos 上, 系统会提示输入将运行 atomics 的用户凭据</p><p>这个 setup 脚本将会执行如下操作:</p><blockquote><p>TODO: 需要使用的时候再继续记录</p></blockquote><hr><h2 id="辅助函数" tabindex="-1"><a class="header-anchor" href="#辅助函数"><span>辅助函数</span></a></h2><p>如下辅助函数由于主简化 atomic test creation</p>`,30),V={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/New-Atomic*-Technique-Test-Creation-Functions",target:"_blank",rel:"noopener noreferrer"},j=e("p",null,"一组有助于使用本机 PowerShell 创建和验证原子技术和测试的函数",-1),K={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Invoke-WebRequestVerifyHash",target:"_blank",rel:"noopener noreferrer"},X=e("p",null,"作为 GetPrereq 命令的一部分，可在下载前验证 Prereq 文件。",-1),Y={href:"https://github.com/redcanaryco/invoke-atomicredteam/wiki/Iterate-through-Atomic-Tests-Programmatically",target:"_blank",rel:"noopener noreferrer"},J=t(`<p>如上述实例所示, 可以使用 <code>Get-AtomicTechnique</code> 函数以编程方式迭代原子测试</p><hr><h2 id="atomic-gui" tabindex="-1"><a class="header-anchor" href="#atomic-gui"><span>Atomic GUI</span></a></h2><p>Atomic GUI 通过提供一个可以填写以生成 YAML 测试定义的 Web 表单来帮助创建新的 atomic test。</p><p>然后可以将此 YAML 复制并粘贴到相应技术编号(例如 T1003) 的 YAML 中，以便添加新的原子测试。下面提供了使用 Atomic GUI 的说明。</p><hr><h3 id="启动-atomic-gui" tabindex="-1"><a class="header-anchor" href="#启动-atomic-gui"><span>启动 Atomic GUI</span></a></h3><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token function">Start-AtomicGUI</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211519834.png" alt="image-20230921151923155"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202309211519682.png" alt="image-20230921151947530"></p><blockquote><p>TODO: 看样子只是为写 yaml 提供了一个 UI, 暂时用不到, 后续需要再继续记录</p></blockquote><hr><h2 id="卸载" tabindex="-1"><a class="header-anchor" href="#卸载"><span>卸载</span></a></h2><p>需要卸载 Atomic Red Team 的话, 只需要删除默认安装目录 <code>&lt;BASEPATH&gt;\\AtomicRedTeam</code>, 其中 <code>&lt;BASEPATH&gt;</code> 在 Windows 上为 <code>C:</code>, 在 Linux/MacOS 上为 <code>~</code></p><p>再明确些的话, 还可以卸载 Invoke-AtomicRedTeam 一起安装的 <code>powershell-yaml</code> 模块; 先关闭所有的 Powershell session, 然后从 CMD(Win) 或 Terminal(Lin/Mac) 运行如下命令</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>powershell <span class="token operator">-</span>NoProfile <span class="token operator">-</span>Command <span class="token string">&quot;Uninstall-Module powershell-yaml&quot;</span> <span class="token comment"># this is for Windows</span>
pwsh <span class="token operator">-</span>NoProfile <span class="token operator">-</span>Command <span class="token string">&quot;Uninstall-Module powershell-yaml&quot;</span> <span class="token comment"># this is for macOS/Linux</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,17);function z(Q,Z){const a=l("ExternalLinkIcon");return i(),r("div",null,[p,e("blockquote",null,[e("p",null,[e("a",d,[s("redcanaryco/atomic-red-team: Small and highly portable detection tests based on MITRE's ATT&CK. --- redcanaryco/atomic-red-team：基于 MITRE 的 ATT&CK 的小型且高度便携的检测测试。 (github.com)"),n(a)])]),e("p",null,[e("a",u,[s("redcanaryco/invoke-atomicredteam: Invoke-AtomicRedTeam is a PowerShell module to execute tests as defined in the atomics folder of Red Canary's Atomic Red Team project. --- redcanaryco/invoke-atomicredteam：Invoke-AtomicRedTeam 是一个 PowerShell 模块，用于执行 Red Canary 的 atomics 文件夹中定义的测试原子红队项目。"),n(a)])]),e("p",null,[e("a",m,[s("Explore Atomic Red Team --- 探索原子红队"),n(a)])])]),h,e("blockquote",null,[e("p",null,[e("a",g,[s("Installing Invoke AtomicRedTeam · redcanaryco/invoke-atomicredteam Wiki --- 安装 Invoke AtomicRedTeam · redcanaryco/invoke-atomicredteam Wiki (github.com)"),n(a)])])]),v,e("blockquote",null,[e("p",null,[e("a",k,[s("Get-WindowsFeature (ServerManager) | Microsoft Learn --- 获取 WindowsFeature (服务器管理器) |微软学习"),n(a)])])]),b,e("blockquote",null,[e("p",null,[e("a",w,[s("Enable-PSRemoting (Microsoft.PowerShell.Core) - PowerShell | Microsoft Learn --- 启用-PSRemoting (Microsoft.PowerShell.Core) - PowerShell |微软学习"),n(a)])])]),A,e("blockquote",null,[e("p",null,[e("a",f,[s("Install PowerShell on Windows, Linux, and macOS - PowerShell | Microsoft Learn --- 在 Windows、Linux 和 macOS 上安装 PowerShell - PowerShell |微软学习"),n(a)])])]),y,e("blockquote",null,[e("p",null,[e("a",E,[s("PowerShell Remoting Over SSH - PowerShell | Microsoft Learn --- 通过 SSH 进行 PowerShell 远程处理 - PowerShell |微软学习"),n(a)])])]),T,e("ul",null,[e("li",null,[e("a",x,[s("建立 PS Session Win2Win"),n(a)])]),e("li",null,[e("a",S,[s("建立 PS Session Win2Lin/Mac"),n(a)])]),e("li",null,[e("a",P,[s("建立 PS Session Lin/Mac2Lin/Mac"),n(a)])])]),q,e("blockquote",null,[e("p",null,[e("a",I,[s("WinRM の TrastedHosts にホストを追加 / 確認 / 削除する : Windows Tips | iPentec"),n(a)])])]),C,e("blockquote",null,[e("p",null,[e("a",D,[s("WS-Management (WSMan) Remoting in PowerShell - PowerShell | Microsoft Learn --- PowerShell 中的 WS-Management (WSMan) 远程处理 - PowerShell |微软学习"),n(a)])])]),B,e("ul",null,[e("li",null,[s("内置日志选项 "),e("ul",null,[e("li",null,[e("a",N,[s("Default Logger (csv) 默认记录器 (csv)"),n(a)])]),e("li",null,[e("a",_,[s("Attire Logger 着装记录器"),n(a)])]),e("li",null,[e("a",R,[s("Syslog Logger 系统日志记录器"),n(a)])]),e("li",null,[e("a",L,[s("WinEvent Logger Win事件记录器"),n(a)])])])])]),W,e("blockquote",null,[e("p",null,[s("Click "),e("a",F,[s("here"),n(a)]),s(" for a demo of importing the Attire logs into "),e("a",M,[s("Vectr"),n(a)]),s(".")])]),$,e("p",null,[s("TODO: 需要把多个 Attire 日志合并到一起的话可以参考 "),e("a",O,[s("Retrospected/attire-merger"),n(a)])]),G,e("blockquote",null,[e("p",null,[e("a",U,[s("Continuous Atomic Testing · redcanaryco/invoke-atomicredteam Wiki (github.com)"),n(a)])])]),H,e("ul",null,[e("li",null,[e("p",null,[e("a",V,[s("New Atomic* Technique Test Creation Functions"),n(a)])]),j]),e("li",null,[e("p",null,[e("a",K,[s("Invoke WebRequestVerifyHash"),n(a)])]),X])]),e("p",null,[e("a",Y,[s("Iterate through Atomic Tests Programmatically · redcanaryco/invoke-atomicredteam Wiki --- 以编程方式迭代原子测试 · redcanaryco/invoke-atomicredteam Wiki (github.com)"),n(a)])]),J])}const ae=o(c,[["render",z],["__file","index.html.vue"]]),ne=JSON.parse(`{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%AB%AF%E7%82%B9%E5%AE%89%E5%85%A8/AtomicRedTeam/","title":"Atomic Red Team","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"离线安装","slug":"离线安装","link":"#离线安装","children":[]}]},{"level":2,"title":"展示 Atomic 测试用例列表","slug":"展示-atomic-测试用例列表","link":"#展示-atomic-测试用例列表","children":[]},{"level":2,"title":"检查先决条件","slug":"检查先决条件","link":"#检查先决条件","children":[]},{"level":2,"title":"在本地执行 atomic tests","slug":"在本地执行-atomic-tests","link":"#在本地执行-atomic-tests","children":[{"level":3,"title":"通过编号执行测试","slug":"通过编号执行测试","link":"#通过编号执行测试","children":[]},{"level":3,"title":"通过名称执行测试","slug":"通过名称执行测试","link":"#通过名称执行测试","children":[]},{"level":3,"title":"通过 GUID 执行测试","slug":"通过-guid-执行测试","link":"#通过-guid-执行测试","children":[]},{"level":3,"title":"执行指定技术的所有测试","slug":"执行指定技术的所有测试","link":"#执行指定技术的所有测试","children":[]},{"level":3,"title":"指定进程超时","slug":"指定进程超时","link":"#指定进程超时","children":[]},{"level":3,"title":"交互执行测试","slug":"交互执行测试","link":"#交互执行测试","children":[]},{"level":3,"title":"执行所有测试","slug":"执行所有测试","link":"#执行所有测试","children":[]}]},{"level":2,"title":"在远程执行 atomic tests","slug":"在远程执行-atomic-tests","link":"#在远程执行-atomic-tests","children":[{"level":3,"title":"前提条件","slug":"前提条件","link":"#前提条件","children":[]},{"level":3,"title":"启用 Powershell Remoting - Win2Win","slug":"启用-powershell-remoting-win2win","link":"#启用-powershell-remoting-win2win","children":[]},{"level":3,"title":"安装 Powershell Core - NoWin","slug":"安装-powershell-core-nowin","link":"#安装-powershell-core-nowin","children":[]},{"level":3,"title":"通过 SSH 配置 PowerShell Remoting - NoWin","slug":"通过-ssh-配置-powershell-remoting-nowin","link":"#通过-ssh-配置-powershell-remoting-nowin","children":[]},{"level":3,"title":"在远程机器上执行 atomic tests","slug":"在远程机器上执行-atomic-tests","link":"#在远程机器上执行-atomic-tests","children":[]}]},{"level":2,"title":"在执行完 atomic tests 之后运行清理命令","slug":"在执行完-atomic-tests-之后运行清理命令","link":"#在执行完-atomic-tests-之后运行清理命令","children":[{"level":3,"title":"运行指定测试的清理命令","slug":"运行指定测试的清理命令","link":"#运行指定测试的清理命令","children":[]},{"level":3,"title":"对给定编号的所有 atomic test 执行清理命令","slug":"对给定编号的所有-atomic-test-执行清理命令","link":"#对给定编号的所有-atomic-test-执行清理命令","children":[]}]},{"level":2,"title":"自定义参数","slug":"自定义参数","link":"#自定义参数","children":[{"level":3,"title":"交互式自定义输入参数","slug":"交互式自定义输入参数","link":"#交互式自定义输入参数","children":[]},{"level":3,"title":"可编程自定义输入参数","slug":"可编程自定义输入参数","link":"#可编程自定义输入参数","children":[]}]},{"level":2,"title":"执行日志","slug":"执行日志","link":"#执行日志","children":[{"level":3,"title":"Default Logger","slug":"default-logger","link":"#default-logger","children":[]},{"level":3,"title":"Attire Logger","slug":"attire-logger","link":"#attire-logger","children":[]},{"level":3,"title":"Syslog Logger","slug":"syslog-logger","link":"#syslog-logger","children":[]},{"level":3,"title":"WinEvent Logger","slug":"winevent-logger","link":"#winevent-logger","children":[]}]},{"level":2,"title":"攻击模拟","slug":"攻击模拟","link":"#攻击模拟","children":[]},{"level":2,"title":"可持续的 atomic testing","slug":"可持续的-atomic-testing","link":"#可持续的-atomic-testing","children":[{"level":3,"title":"Setup and Configuration","slug":"setup-and-configuration","link":"#setup-and-configuration","children":[]}]},{"level":2,"title":"辅助函数","slug":"辅助函数","link":"#辅助函数","children":[]},{"level":2,"title":"Atomic GUI","slug":"atomic-gui","link":"#atomic-gui","children":[{"level":3,"title":"启动 Atomic GUI","slug":"启动-atomic-gui","link":"#启动-atomic-gui","children":[]}]},{"level":2,"title":"卸载","slug":"卸载","link":"#卸载","children":[]}],"git":{"createdTime":1695206981000,"updatedTime":1709635981000,"contributors":[{"name":"233Official","email":"ayusummr233@gmail.com","commits":2},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":2},{"name":"Ayusummer","email":"ayusummr233@gmail.com","commits":1}]},"readingTime":{"minutes":26.61,"words":7983},"filePathRelative":"网络安全/端点安全/AtomicRedTeam/index.md","localizedDate":"2023年9月20日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/redcanaryco/atomic-red-team\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">redcanaryco/atomic-red-team: Small and highly portable detection tests based on MITRE's ATT&amp;CK. --- redcanaryco/atomic-red-team：基于 MITRE 的 ATT&amp;CK 的小型且高度便携的检测测试。 (github.com)</a></p>\\n<p><a href=\\"https://github.com/redcanaryco/invoke-atomicredteam\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">redcanaryco/invoke-atomicredteam: Invoke-AtomicRedTeam is a PowerShell module to execute tests as defined in the atomics folder of Red Canary's Atomic Red Team project. --- redcanaryco/invoke-atomicredteam：Invoke-AtomicRedTeam 是一个 PowerShell 模块，用于执行 Red Canary 的 atomics 文件夹中定义的测试原子红队项目。</a></p>\\n<p><a href=\\"https://atomicredteam.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Explore Atomic Red Team --- 探索原子红队</a></p>\\n</blockquote>"}`);export{ae as comp,ne as data};
