import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c,a as n,d as s,b as t,e as a}from"./app-DxMJFouC.js";const o={},u=n("h1",{id:"opencv-python",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#opencv-python"},[n("span",null,"OpenCV-python")])],-1),r=n("hr",null,null,-1),d=n("hr",null,null,-1),m=n("h2",{id:"cv2-cascadeclassifier",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cv2-cascadeclassifier"},[n("span",null,[n("code",null,"cv2.CascadeClassifier")])])],-1),k={href:"https://blog.csdn.net/Stray_Lambs/article/details/101123252",target:"_blank",rel:"noopener noreferrer"},v=n("hr",null,null,-1),h=n("li",null,[n("p",null,[n("code",null,"CascadeClassifier"),s("，是 Opencv 中做人脸检测的时候的一个级联分类器。并且既可以使用 Haar，也可以使用 LBP 特征。")]),n("hr")],-1),b=a('<h3 id="haar" tabindex="-1"><a class="header-anchor" href="#haar"><span><code>Haar</code></span></a></h3><ul><li><p>Haar 特征是一种反映图像的灰度变化的，像素分模块求差值的一种特征。</p></li><li><p>它分为三类：<code>边缘特征</code>、<code>线性特征</code>、<code>中心特征和对角线特征</code>。</p></li><li><p>用黑白两种矩形框组合成特征模板，在特征模板内用 黑色矩形像素和 减去 白色矩形像素和来表示这个模版的特征值。</p><ul><li>例如：脸部的一些特征能由矩形模块差值特征简单的描述，如：眼睛要比脸颊颜色要深，鼻梁两侧比鼻梁颜色要深，嘴巴比周围颜色要深等。</li><li>但矩形特征只对一些简单的图形结构，如边缘、线段较敏感，所以只能描述在特定方向(水平、垂直、对角) 上有明显像素模块梯度变化的图像结构。这样就可以进行区分人脸。</li></ul><hr></li></ul><h3 id="lbp" tabindex="-1"><a class="header-anchor" href="#lbp"><span><code>LBP</code></span></a></h3>',3),g={href:"https://blog.csdn.net/quincuntial/article/details/50541815",target:"_blank",rel:"noopener noreferrer"},_=n("br",null,null,-1),y=n("code",null,"写完才发现全摘录了,建议直接阅读原文,原文评论区有不少相关讨论",-1),C=n("hr",null,null,-1),w=a('<h4 id="lbp-特征的背景介绍" tabindex="-1"><a class="header-anchor" href="#lbp-特征的背景介绍"><span><code>LBP</code> 特征的背景介绍</span></a></h4><ul><li><p>LBP 指局部二值模式，英文全称：Local Binary Pattern，是一种用来描述图像局部特征的算子;</p></li><li><p>LBP 特征具有灰度不变性和旋转不变性等显著优点。由 T.Ojala, M.Pietikäinen, 和 D.Harwood 在1994年提出;</p></li><li><p>由于 LBP 特征计算简单、效果较好，因此 LBP 特征在计算机视觉的许多领域都得到了广泛的应用，LBP 特征比较出名的应用是用在人脸识别和目标检测中，在计算机视觉开源库 Opencv 中有使用 LBP 特征进行人脸识别的接口，也有用 LBP 特征训练目标检测分类器的方法，Opencv 实现了 LBP 特征的计算，但没有提供一个单独的计算 LBP 特征的接口。</p><hr></li></ul><h4 id="lbp特征的原理" tabindex="-1"><a class="header-anchor" href="#lbp特征的原理"><span>LBP特征的原理</span></a></h4><p>1.原始LBP特征描述及计算方法</p>',4),x=n("ul",null,[n("li",null,[s("原始的 LBP 算子定义在像素 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"3"),n("mo",null,"∗"),n("mn",null,"3")]),n("annotation",{encoding:"application/x-tex"},"3*3")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"3")])])]),s(" 的邻域内，以邻域中心像素为阈值，相邻的 8 个像素的灰度值与邻域中心的像素值进行比较，若周围像素大于中心像素值，则该像素点的位置被标记为 1 ，否则为 0 。这样，"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"3"),n("mo",null,"∗"),n("mn",null,"3")]),n("annotation",{encoding:"application/x-tex"},"3*3")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"3")])])]),s(" 邻域内的 8 个点经过比较可产生 8 位二进制数，将这 8 位二进制数依次排列形成一个二进制数字，这个二进制数字就是中心像素的 LBP 值，LBP 值共有 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"8")]),n("mo",null,"="),n("mn",null,"256")]),n("annotation",{encoding:"application/x-tex"},"2^8 = 256")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"8")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"256")])])]),s(" 种可能。中心像素的 LBP 值反映了该像素周围区域的纹理信息。")])],-1),f=n("blockquote",null,[n("p",null,"PS : 计算 LBP 特征的图像必须是灰度图，如果是彩色图，需要先转换成灰度图。")],-1),L=n("ul",null,[n("li",null,[n("p",null,[s("上述过程用图像表示为："),n("br"),n("img",{src:"http://cdn.ayusummer233.top/img/20210526101757.png",alt:"20210526101757"}),n("br"),n("img",{src:"http://cdn.ayusummer233.top/img/20210526101852.png",alt:"20210526101852"})])]),n("li",null,[n("p",null,[s("将上述过程用公式表示为："),n("br"),n("img",{src:"http://cdn.ayusummer233.top/img/20210526101929.png",alt:"20210526101929"}),n("br"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("msub",null,[n("mi",null,"x"),n("mi",null,"c")]),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"y"),n("mi",null,"c")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"(x_c, y_c)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"c")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"-0.0359em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"c")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mclose"},")")])])]),s(" 为中心像素的坐标"),n("br"),s(" p 为邻域的第 p 个像素"),n("br"),s(" ip 为邻域像素的灰度值"),n("br"),s(" ic 为中心像素的灰度值"),n("br"),s(" s(x) 为符号函数")])]),n("li",null,[n("p",null,"原始LBP特征计算代码(Opencv下)"),n("div",{class:"language-C++ line-numbers-mode","data-ext":"C++","data-title":"C++"},[n("pre",{class:"language-C++"},[n("code",null,`//原始LBP特征计算
template <typename _tp>
void getOriginLBPFeature(InputArray _src,OutputArray _dst)
{
    Mat src = _src.getMat();
    _dst.create(src.rows-2,src.cols-2,CV_8UC1);
    Mat dst = _dst.getMat();
    dst.setTo(0);
    for(int i=1;i<src.rows-1;i++)
    {
        for(int j=1;j<src.cols-1;j++)
        {
            _tp center = src.at<_tp>(i,j);
            unsigned char lbpCode = 0;
            lbpCode |= (src.at<_tp>(i-1,j-1) > center) << 7;
            lbpCode |= (src.at<_tp>(i-1,j  ) > center) << 6;
            lbpCode |= (src.at<_tp>(i-1,j+1) > center) << 5;
            lbpCode |= (src.at<_tp>(i  ,j+1) > center) << 4;
            lbpCode |= (src.at<_tp>(i+1,j+1) > center) << 3;
            lbpCode |= (src.at<_tp>(i+1,j  ) > center) << 2;
            lbpCode |= (src.at<_tp>(i+1,j-1) > center) << 1;
            lbpCode |= (src.at<_tp>(i  ,j-1) > center) << 0;
            dst.at<uchar>(i-1,j-1) = lbpCode;
        }
    }
}
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[s("测试结果："),n("br"),n("img",{src:"http://cdn.ayusummer233.top/img/20210526102435.png",alt:"20210526102435"})]),n("blockquote",null,[n("p",null,"原博主测测试结果, 我个人用的 OpenCV-python 没做测试")]),n("hr")])],-1),P=a(`<p>2.LBP 特征的改进版本</p><ul><li>在原始的 LBP 特征提出以后，研究人员对 LBP 特征进行了很多的改进，因此产生了许多 LBP 的改进版本。</li></ul><blockquote><p>save, 留个眼[bookmark]在这里, 先写其他的了</p></blockquote><hr><h3 id="detectmultiscale" tabindex="-1"><a class="header-anchor" href="#detectmultiscale"><span><code>detectMultiScale()</code></span></a></h3><div class="language-C++ line-numbers-mode" data-ext="C++" data-title="C++"><pre class="language-C++"><code>void detectMultiScale(
    // 待检测图像
    const Mat&amp; image, 
    // 被检测物体的矩形框向量          
    CV_OUT vector &amp; objects,  
    // 前后两次相继的扫描中搜索窗口的比例系数，默认为 1.1 即每次搜索窗口扩大 10%  
    double scaleFactor = 1.1, 
    /*构成检测目标的相邻矩形的最小个数 
      如果组成检测目标的小矩形的个数和
          小于 minneighbors - 1 都会被排除
      如果 minneighbors为 0 
          则函数不做任何操作就返回所有被检候选矩形框  
    */
    int minNeighbors = 3, 
    // 若设置为 CV_HAAR_DO_CANNY_PRUNING 函数将会使用 Canny 边缘检测来排除边缘过多或过少的区域      
    int flags = 0,        
    // 最后两个参数用来限制得到的目标区域的范围      
    Size minSize = Size(),
    Size maxSize = Size() 
    );
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>falgs</code><ul><li><code>CV_HAAR_DO_CANNY_PRUNING</code> : 利用Canny边缘检测器来排除一些边缘很少或者很多的图像区域</li><li><code>CV_HAAR_SCALE_IMAGE</code> : 按比例正常检测</li><li><code>CV_HAAR_FIND_BIGGEST_OBJECT</code> : 只检测最大的物体</li><li><code>CV_HAAR_DO_ROUGH_SEARCH</code> : 只做初略检测</li></ul></li></ul><hr><h2 id="直方图处理" tabindex="-1"><a class="header-anchor" href="#直方图处理"><span>直方图处理</span></a></h2>`,9),B=n("li",null,[n("p",null,"对一幅低对比度分辨率的图像采用直方图均衡化和规定化方法实现图像增强，分别采用系统函数和自己编写函数实现相应用功能。"),n("hr")],-1),O={href:"http://codec.wang/#/opencv/basic/15-histograms",target:"_blank",rel:"noopener noreferrer"},z=n("hr",null,null,-1),S=a(`<li><p><code>直方图</code> : 简单来说，直方图就是图像中每个像素值的个数统计形成的柱状图</p></li><li><p><code>OpenCV中直方图计算</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>cv2<span class="token punctuation">.</span>calcHist<span class="token punctuation">(</span>images<span class="token punctuation">,</span> channels<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> histSize<span class="token punctuation">,</span> ranges<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>images</code> : 要计算的原图，以方括号的传入，如：[img]</p></li><li><p><code>channels</code> : 类似dims，灰度图写[0]就行，彩色图B/G/R分别传入[0]/[1]/[2]</p><ul><li><code>dims</code> : 要计算的通道数，对于灰度图dims=1，普通彩色图dims=3</li></ul></li><li><p><code>mask</code> : 要计算的区域，计算整幅图的话，写None</p></li><li><p><code>histSize</code> : 子区段数目，如果我们统计0~255每个像素值histSize=256；如果划分区间，比如0~15, 16~31…240~255这样16个区间，histSize=16</p></li><li><p><code>ranges</code> : 要计算的像素值范围，一般为[0,256)</p><hr></li></ul></li><li><p><code>绘制直方图</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>  <span class="token keyword">import</span> cv2
  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

  img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;../resource/pic/lena_low_quality.jpg&#39;</span><span class="token punctuation">)</span>
  plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>img<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210410155316.png" alt="20210410155316"></p><ul><li><p>可以看出,这个图像确实有够糊的</p><hr></li></ul></li><li><p>直方图均衡化</p><ul><li><p>一副效果好的图像通常在直方图上的分布比较均匀，直方图均衡化就是用来改善图像的全局亮度和对比度。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt

img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;../resource/pic/lena_low_quality.jpg&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># 1.直方图计算</span>
<span class="token comment"># 使用OpenCV函数计算</span>
hist <span class="token operator">=</span> cv2<span class="token punctuation">.</span>calcHist<span class="token punctuation">(</span><span class="token punctuation">[</span>img<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 性能：0.022158 s</span>

<span class="token comment"># 2.绘制直方图</span>
plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>img<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 3.直方图均衡化</span>
equ <span class="token operator">=</span> cv2<span class="token punctuation">.</span>equalizeHist<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;equalization&#39;</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> equ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 并排显示</span>
cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># 绘制出均衡化后的直方图</span>
plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>equ<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210410162024.png" alt="20210410162024"></p><hr></li></ul></li><li><p>自己编写函数实现相应用功能</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt


<span class="token comment"># 直方图均衡化</span>
<span class="token keyword">def</span> <span class="token function">hist_equal</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> z_max<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    H<span class="token punctuation">,</span> W <span class="token operator">=</span> image<span class="token punctuation">.</span>shape
    S <span class="token operator">=</span> H <span class="token operator">*</span> W <span class="token operator">*</span> <span class="token number">1.</span>
    out <span class="token operator">=</span> image<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sum_h <span class="token operator">=</span> <span class="token number">0.</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        ind <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>image <span class="token operator">==</span> i<span class="token punctuation">)</span>

        sum_h <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>image<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">)</span>

        z_prime <span class="token operator">=</span> z_max <span class="token operator">/</span> S <span class="token operator">*</span> sum_h

        out<span class="token punctuation">[</span>ind<span class="token punctuation">]</span> <span class="token operator">=</span> z_prime

        out <span class="token operator">=</span> out<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>

    <span class="token keyword">return</span> out


img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&quot;../resource/pic/lena_low_quality.jpg&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>
out <span class="token operator">=</span> hist_equal<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
<span class="token comment"># 显示直方图</span>
plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>out<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 显示处理后的图像</span>
cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&quot;result&quot;</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210410163952.png" alt="20210410163952"></p></li>`,5);function V(M,A){const e=p("ExternalLinkIcon");return i(),c("div",null,[u,r,d,m,n("ul",null,[n("li",null,[n("p",null,[n("a",k,[s("参考链接"),t(e)])]),v]),h]),b,n("ul",null,[n("li",null,[n("p",null,[n("a",g,[s("LBP特征原理@SnailTyan"),t(e)]),_,s(" ["),y,s("]")]),C])]),w,x,f,L,P,n("ul",null,[B,n("li",null,[n("p",null,[n("a",O,[s("参考链接@CodecWang"),t(e)])]),z]),S])])}const j=l(o,[["render",V],["__file","OpenCV-python.html.vue"]]),H=JSON.parse('{"path":"/Language/Python/libs/OpenCV/OpenCV-python.html","title":"OpenCV-python","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"cv2.CascadeClassifier","slug":"cv2-cascadeclassifier","link":"#cv2-cascadeclassifier","children":[{"level":3,"title":"Haar","slug":"haar","link":"#haar","children":[]},{"level":3,"title":"LBP","slug":"lbp","link":"#lbp","children":[]},{"level":3,"title":"detectMultiScale()","slug":"detectmultiscale","link":"#detectmultiscale","children":[]}]},{"level":2,"title":"直方图处理","slug":"直方图处理","link":"#直方图处理","children":[]}],"git":{"createdTime":1694760760000,"updatedTime":1709635981000,"contributors":[{"name":"233Official","email":"ayusummr233@gmail.com","commits":1},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":6.23,"words":1869},"filePathRelative":"Language/Python/libs/OpenCV/OpenCV-python.md","localizedDate":"2023年9月15日","excerpt":"<!--\\n * @Author: your name\\n * @Date: 2021-05-25 22:19:51\\n * @LastEditTime: 2021-05-26 14:20:42\\n * @LastEditors: Please set LastEditors\\n * @Description: In User Settings Edit\\n * @FilePath: \\\\DailyNotes\\\\OpenCV-python.md\\n-->\\n<h1>OpenCV-python</h1>\\n<hr>\\n<hr>\\n<h2><code>cv2.CascadeClassifier</code></h2>\\n<ul>\\n<li>\\n<p><a href=\\"https://blog.csdn.net/Stray_Lambs/article/details/101123252\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考链接</a></p>\\n<hr>\\n</li>\\n<li>\\n<p><code>CascadeClassifier</code>，是 Opencv 中做人脸检测的时候的一个级联分类器。并且既可以使用 Haar，也可以使用 LBP 特征。</p>\\n<hr>\\n</li>\\n</ul>"}');export{j as comp,H as data};
