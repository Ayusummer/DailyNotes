import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,a as n,d as a,b as e,e as t}from"./app-DxMJFouC.js";const c={},u=t('<h1 id="sql-relational-databases" tabindex="-1"><a class="header-anchor" href="#sql-relational-databases"><span>SQL(Relational) Databases</span></a></h1><ul><li><a href="#sqlrelational-databases">SQL(Relational) Databases</a><ul><li><a href="#%E5%88%9B%E5%BB%BA-sqlalchemy">创建 SQLAlchemy</a></li><li><a href="#%E5%BC%95%E5%85%A5-sqlalchemy-%E5%BA%93">引入 SQLAlchemy 库</a></li><li><a href="#%E4%B8%BA-sqlalchemy-%E5%88%9B%E5%BB%BA-database-url">为 SQLAlchemy 创建 database URL</a></li><li><a href="#%E5%88%9B%E5%BB%BA-sqlalchemy-engine">创建 SQLAlchemy engine</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-sessionlocal-%E7%B1%BB">创建一个 SessionLocal 类</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-base-%E7%B1%BB">创建一个 Base 类</a></li><li><a href="#%E5%88%9B%E5%BB%BA-database-models">创建 database models</a></li><li><a href="#%E4%BB%8E-base-%E7%B1%BB%E5%88%9B%E5%BB%BA-sqlalchemy-model">从 Base 类创建 SQLAlchemy model</a></li><li><a href="#%E5%88%9B%E5%BB%BA-model-attributescolumns">创建 model attributes/columns</a></li><li><a href="#%E5%88%9B%E5%BB%BA-relationships">创建 relationships</a></li><li><a href="#%E5%88%9B%E5%BB%BA-pydantic-model">创建 Pydantic model</a></li><li><a href="#%E5%88%9B%E5%BB%BA-initial-pydantic-models--schemas">创建 initial Pydantic models / schemas</a><ul><li><a href="#sqlalchemy-style-%E5%92%8C-pydantic-style">SQLAlchemy style 和 Pydantic style</a></li></ul></li><li><a href="#%E5%88%9B%E5%BB%BA%E7%94%A8%E4%BA%8E-reading--returning-%E7%9A%84-pydantic-models--schemas">创建用于 reading / returning 的 Pydantic models / schemas</a></li><li><a href="#%E4%BD%BF%E7%94%A8-pydantic-%E7%9A%84-orm_mode">使用 Pydantic 的 orm_mode</a><ul><li><a href="#%E5%85%B3%E4%BA%8E-orm-mode-%E7%9A%84%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82">关于 ORM mode 的技术细节</a></li></ul></li><li><a href="#crud-utils">CRUD utils</a></li><li><a href="#main-fastapi-app">Main FastAPI app</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8">创建数据库表</a></li><li><a href="#%E5%88%9B%E5%BB%BA-dependency">创建 dependency</a></li><li><a href="#prisma">Prisma</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E6%85%95%E8%AF%BE%E7%BD%91">数据库操作(慕课网)</a><ul><li><a href="#%E9%85%8D%E7%BD%AE-sqlalchemy-orm">配置 SQLAlchemy ORM</a></li><li><a href="#database-models">DataBase Models</a></li></ul></li></ul></li></ul><hr><p>示例项目结构:</p><ul><li><code>sql_app</code><ul><li><code>__init__.py</code></li><li><code>crud.py</code></li><li><code>database.py</code></li><li><code>main.py</code></li><li><code>models.py</code></li><li><code>schemas.py</code></li></ul></li></ul><blockquote><p><code>__init__.py</code> 是个空文件，它只是为了让 Python 识别这是一个 module。</p></blockquote><h2 id="创建-sqlalchemy" tabindex="-1"><a class="header-anchor" href="#创建-sqlalchemy"><span>创建 SQLAlchemy</span></a></h2>',7),d={href:"https://www.sqlalchemy.org/",target:"_blank",rel:"noopener noreferrer"},r=t(`<p>首先要装下 <code>SQLAlchemy</code> 库</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> sqlalchemy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编辑 <code>database.py</code> 文件</p><h2 id="引入-sqlalchemy-库" tabindex="-1"><a class="header-anchor" href="#引入-sqlalchemy-库"><span>引入 SQLAlchemy 库</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="为-sqlalchemy-创建-database-url" tabindex="-1"><a class="header-anchor" href="#为-sqlalchemy-创建-database-url"><span>为 SQLAlchemy 创建 database URL</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>SQLALCHEMY_DATABASE_URL <span class="token operator">=</span> <span class="token string">&quot;sqlite:///E:/ProgrammingLessons/Vue/vite/ViteLearningBackend/ViteLearningBackend.db&quot;</span>
<span class="token comment"># SQLALCHEMY_DATABASE_URL = &quot;postgresql://user:password@postgresserver/db&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在本次示例中, 使用 SQLite 作为数据库, 在 <code>E:/ProgrammingLessons/Vue/vite/ViteLearningBackend/</code> 目录下有一个 <code>ViteLearningBackend.db</code> 数据库文件, 因此 URL 最后部分是 <code>E:/ProgrammingLessons/Vue/vite/ViteLearningBackend/ViteLearningBackend.db</code></p><p><img src="http://cdn.ayusummer233.top/img/20220419093125.png" alt="20220419093125"></p><p>如果使用 <code>PostgreSQL</code> 的话可以如注释这般使用</p><p>使用其他数据库的话把 <code>sqlite</code> 字段相应的换成 <code>MySQL</code>, <code>mariadb</code> 等即可</p><h2 id="创建-sqlalchemy-engine" tabindex="-1"><a class="header-anchor" href="#创建-sqlalchemy-engine"><span>创建 SQLAlchemy engine</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>
    SQLALCHEMY_DATABASE_URL<span class="token punctuation">,</span> connect_args<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;check_same_thread&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>connect_args={&quot;check_same_thread&quot;: False}</code> 字段只有在使用 <code>SQLite</code> 时才需要</p><blockquote><p>SQLite 默认只允许一个线程通信, 假设每个线程处理一个独立的请求</p><p>这是为了防止意外地为不同请求共享相同的 connection</p><p>但是在 FastAPI 的函数中, 不止一个 thread 可以向 database 发起请求, 所以我们需要让 SQLIte 知道它应当通过 <code>connect_args = {&quot;check_same_thread&quot;: False}</code> 允许这些 thread 向数据库发请求</p></blockquote><h2 id="创建一个-sessionlocal-类" tabindex="-1"><a class="header-anchor" href="#创建一个-sessionlocal-类"><span>创建一个 SessionLocal 类</span></a></h2><p>SessionLocal 类的每个实例都是一个 database session, 不过该类本身并非 database session(数据库会话)</p><p>但是一旦我们创建了一个 SessionLocal 类的示例, 那么这个实例将会成为实际的 database session</p><p>我们将其命名为 SessionLocal 以与从 SQLAlchemy 中引入的 Session 相区分</p><p>使用 sessionmaker 来创建一个 SessionLocal 类</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>SessionLocal <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>autocommit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> autoflush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="创建一个-base-类" tabindex="-1"><a class="header-anchor" href="#创建一个-base-类"><span>创建一个 Base 类</span></a></h2><p>使用 declarative_base 来返回一个类赋给 Base</p><p>后面我们会继承这个类来创建每个数据库的 model 和 class(ORM models)</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="创建-database-models" tabindex="-1"><a class="header-anchor" href="#创建-database-models"><span>创建 database models</span></a></h2><p>编辑 <code>models.py</code></p><h2 id="从-base-类创建-sqlalchemy-model" tabindex="-1"><a class="header-anchor" href="#从-base-类创建-sqlalchemy-model"><span>从 Base 类创建 SQLAlchemy model</span></a></h2><blockquote><p>SQLAlchemy 使用术语 &quot;model&quot; 来指代这些与数据库交互的 class 及 instance</p><p>不过需要注意的是 Pydantic 也使用术语 &quot;model&quot; 来指代不同的东西, data validation, coversion, documentation classes 以及 instances</p></blockquote><p>从 <code>database.py</code> 引入 <code>Base</code> 类</p><p>创建继承于 Base 类的子类</p><p>这些子类都是 SQLAlchemy model</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span>database <span class="token keyword">import</span> Base

<span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span>

<span class="token keyword">class</span> <span class="token class-name">Good</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
__tablename__ <span class="token operator">=</span> <span class="token string">&quot;Good&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 因为这里是直接在 jupyter笔记本里写的, 已经运行过代码块了直接使用 Base 即可</span>
<span class="token comment"># from .database import Base</span>
<span class="token keyword">from</span> tokenize <span class="token keyword">import</span> Double
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Boolean<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> FLOAT
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship

<span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span>

    uid <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Good</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;Good&quot;</span>

    GoodID <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    GoodName <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
    GoodPrice <span class="token operator">=</span> Column<span class="token punctuation">(</span>FLOAT<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__tablename__</code> 属性告诉 SQLAlchemy 在数据库中为每个 model 使用的表名</p><hr><h2 id="创建-model-attributes-columns" tabindex="-1"><a class="header-anchor" href="#创建-model-attributes-columns"><span>创建 model attributes/columns</span></a></h2><p>创建所有 model 的 attribute</p><p>这些 attribute 对应的表示数据库相应表中的一列</p><p>我们使用 SQLAlchemy 中的 <code>Column</code> 作为默认值</p><p>然后传递一个 SQLAlchemy 类 &quot;type&quot;, 作为 <code>Interger</code>, <code>String</code>, 或者 <code>Boolean</code>, 将数据库中的字段类型定义为一个参数</p><p><img src="http://cdn.ayusummer233.top/img/20220419103008.png" alt="20220419103008"></p><hr><h2 id="创建-relationships" tabindex="-1"><a class="header-anchor" href="#创建-relationships"><span>创建 relationships</span></a></h2><blockquote><p>个人写的示例中没有定义外键, 因为后面要加速开发原型, 所以个人示例比较简略</p><p>因此这部分搬下官方示例</p></blockquote><p>我们使用 SQLAlchemy ORM 提供的 <code>relationship</code> 来创建 relationship</p><p>这将或多或少称为一个 &quot;magic&quot; attribute, 他讲包含与此表关联的其他表的值</p><p><img src="http://cdn.ayusummer233.top/img/20220419103414.png" alt="20220419103414"></p><p>当我们从 <code>User</code> 中访问 <code>items</code> 属性时, 比如 <code>my_user.items</code>, 他将生成一个 <code>Item</code> SQLAlchemy models 列表(来自 <code>items</code> 表), 其中有一个外键指向 <code>users</code> 表中的这个记录</p><p>当访问 <code>my_usr.items</code> 时, SQLAlchemy 实际上会从数据库的 <code>items</code> 表中查询到这些 items并填入这里</p><p>当我们访问 <code>Item</code> 中的 <code>owner</code> 属性时, 他将包含来自 <code>users</code> 表的 <code>User</code> SQLAlchemy model; 他将使用 <code>onwer_id</code> attribute/column 及其外键来决定从 <code>users</code> 表中获取哪些记录</p><hr><h2 id="创建-pydantic-model" tabindex="-1"><a class="header-anchor" href="#创建-pydantic-model"><span>创建 Pydantic model</span></a></h2><p>编辑 <code>schemas.py</code></p><blockquote><p>为了避免 <code>SQLAlchemy models</code> 和 <code>Pydantic models</code> 之间的混淆，我们在 <code>models.py</code> 中创建 <code>SQLAlchemy models</code>, 在 <code>shcemas.py</code> 中创建<code>Pydantic models</code></p></blockquote><blockquote><p>这些 <code>Pydantic models</code> 或多或少地定义了一个<code>&quot;schema&quot;</code>(一个有效的 <code>data shape</code>)。</p></blockquote><blockquote><p>因此，这将有助于我们避免在使用二者时可能产生的混淆</p></blockquote><h2 id="创建-initial-pydantic-models-schemas" tabindex="-1"><a class="header-anchor" href="#创建-initial-pydantic-models-schemas"><span>创建 initial Pydantic models / schemas</span></a></h2><p>创建一个 <code>StaffBase Pydantic model</code> (或者说 <code>schema</code>) 一遍在创建和读取数据时由公共属性</p><p>然后创建一个 <code>StaffCreate</code> 继承自 <code>StaffBase</code></p><p><img src="http://cdn.ayusummer233.top/img/20220425192442.png" alt="20220425192442"></p><hr><h3 id="sqlalchemy-style-和-pydantic-style" tabindex="-1"><a class="header-anchor" href="#sqlalchemy-style-和-pydantic-style"><span>SQLAlchemy style 和 Pydantic style</span></a></h3><p>在 SQLAlchemy models 中定义属性时使用的是 <code>=</code>, 并将类型作为参数传给 <code>Column</code>, 如下:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而在 Pydantic models 中使用 <code>:</code> 声明这些类型, 如下:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>name<span class="token punctuation">:</span> <span class="token builtin">str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="创建用于-reading-returning-的-pydantic-models-schemas" tabindex="-1"><a class="header-anchor" href="#创建用于-reading-returning-的-pydantic-models-schemas"><span>创建用于 reading / returning 的 Pydantic models / schemas</span></a></h2><p>创建 Pydantic models(schemas), 当从 API 返回数据时, 将在读取数据时使用它</p><p>例如, 在创建一个 staff 时我们不知道他的 id 是什么, 但是当读取他(从 API 返回他) 时, 我们已经知道它的 ID</p><p><img src="http://cdn.ayusummer233.top/img/20220425193620.png" alt="20220425193620"></p><hr><h2 id="使用-pydantic-的-orm-mode" tabindex="-1"><a class="header-anchor" href="#使用-pydantic-的-orm-mode"><span>使用 Pydantic 的 orm_mode</span></a></h2><p>现在, 在 Pydantic models 中为了方便读取, 给 Staff 类添加一个内部的 Config 类</p><p>这个 Config 类用于向 Pydantic 提供配置</p><p>在 Config 类中, 将 orm_mode 属性设置为 True</p><blockquote><p>需要注意的是使用 <code>=</code> 进行赋值<br> 它不像前面一样使用 <code>:</code> 进行类型声明<br> 这是设置一个配置值而非声明一个类型</p></blockquote><p>Pydantic 的 orm-mode 会告诉 Pydantic model 读取数据, 即便它并非是个 dict 而是 ORM model(或者其他任何具有属性的任意对象)</p><p>如此一来, 不再只是类似如下操作一样从 dict 中获取类型:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">id</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它也会尝试从属性中获取到 id, 如:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token builtin">id</span> <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token builtin">id</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有了这些, Pydantic model 就和 ORM 兼容了, 并且你可以只在 path 操作中的 <code>response_model</code> 参数中声明它</p><p>您将能够返回一个 database model, 并从中读取数据</p><hr><h3 id="关于-orm-mode-的技术细节" tabindex="-1"><a class="header-anchor" href="#关于-orm-mode-的技术细节"><span>关于 ORM mode 的技术细节</span></a></h3>`,87),k={href:"https://fastapi.tiangolo.com/zh/tutorial/sql-databases/#technical-details-about-orm-mode",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>SQLAlchemy 和许多其他的默认方法是“lazy loading”。</p><p>这意味着，例如，它们不会从数据库中获取关系数据，除非您尝试访问将包含该数据的属性。</p><p>例如，访问 items 属性:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>current_user<span class="token punctuation">.</span>items
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将使 SQLAlchemy 转到 items 表并获取该用户的条目，但不是在此之前。</p><p>如果没有 orm_mode，则如果从路径操作返回 SQLAlchemy 模型，它将不包含关系数据。</p><p>即使你在你的 Pydantic 模型中声明了这些关系。</p><p>但是在 ORM 模式下，由于 Pydantic 本身将尝试从属性访问它需要的数据(而不是假设 dict) ，你可以声明你想要返回的特定数据，它将能够去获取它，甚至是从 ORM。</p><hr><h2 id="crud-utils" tabindex="-1"><a class="header-anchor" href="#crud-utils"><span>CRUD utils</span></a></h2><p>编辑 <code>crud.py</code></p><p>在这个文件中，我们将使用可重用的函数与数据库中的数据进行交互。</p><p>CRUD 来自: Creat(创建)、Read(读取)、Update(更新) 和 Delete(删除)。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;
Author: 咸鱼型233
Date: 2022-04-25 16:35:15
LastEditors: 咸鱼型233
LastEditTime: 2022-04-25 20:29:15
FilePath: \\VbenBackend\\sql_app\\curd.py
Description: 
Copyright (c) 2022 by 咸鱼型233, All Rights Reserved.
&#39;&#39;&#39;</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
-*- encoding: utf-8 -*-
@文件    :curd.py
@时间    :2022/04/18 21:07:48
@作者    :咸鱼型233
@说明    :
&#39;&#39;&#39;</span>
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> Session

<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models<span class="token punctuation">,</span> schemas

<span class="token comment"># 通过 id 读取 Staff</span>
<span class="token keyword">def</span> <span class="token function">get_staff</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span> Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 通过 staffNo 读取 Staff</span>
<span class="token keyword">def</span> <span class="token function">get_staff_by_staffNo</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span> Session<span class="token punctuation">,</span> staffNo<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span>staffNo <span class="token operator">==</span> staffNo<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 获取所有 Staff</span>
<span class="token keyword">def</span> <span class="token function">get_staffs</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span> Session<span class="token punctuation">,</span> skip<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span>offset<span class="token punctuation">(</span>skip<span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建 Staff</span>
<span class="token keyword">def</span> <span class="token function">create_staff</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span> Session<span class="token punctuation">,</span> staff<span class="token punctuation">:</span> schemas<span class="token punctuation">.</span>StaffCreate<span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> models<span class="token punctuation">.</span>Staff<span class="token punctuation">(</span><span class="token operator">**</span>staff<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>add<span class="token punctuation">(</span>db_staff<span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span>db_staff<span class="token punctuation">)</span>
    <span class="token keyword">return</span> db_staff

<span class="token comment"># 更新 staffNo</span>
<span class="token keyword">def</span> <span class="token function">update_staff_staffNo</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span> Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> staffNo<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db_staff<span class="token punctuation">.</span>staffNo <span class="token operator">=</span> staffNo
    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> db_staff

<span class="token comment"># 更新 name</span>
<span class="token keyword">def</span> <span class="token function">update_staff_name</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span> Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db_staff<span class="token punctuation">.</span>name <span class="token operator">=</span> name
    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> db_staff

<span class="token comment"># 更新 sex</span>
<span class="token keyword">def</span> <span class="token function">update_staff_sex</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db_staff<span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
    db<span class="token punctuation">.</span>commit
    <span class="token keyword">return</span> db_staff

<span class="token comment"># 更新 birthday</span>
<span class="token keyword">def</span> <span class="token function">update_staff_birthday</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> birthday<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db_staff<span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday
    db<span class="token punctuation">.</span>commit
    <span class="token keyword">return</span> db_staff

<span class="token comment"># 更新 phone</span>
<span class="token keyword">def</span> <span class="token function">update_staff_phone</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> phone<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db_staff<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone
    db<span class="token punctuation">.</span>commit
    <span class="token keyword">return</span> db_staff

<span class="token comment"># 更新 education</span>
<span class="token keyword">def</span> <span class="token function">update_staff_education</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> education<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db_staff<span class="token punctuation">.</span>education <span class="token operator">=</span> education
    db<span class="token punctuation">.</span>commit
    <span class="token keyword">return</span> db_staff

<span class="token comment"># 更新 namePinyin</span>
<span class="token keyword">def</span> <span class="token function">update_staff_namePinyin</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> namePinyin<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db_staff<span class="token punctuation">.</span>namePinyin <span class="token operator">=</span> namePinyin
    db<span class="token punctuation">.</span>commit
    <span class="token keyword">return</span> db_staff


<span class="token comment"># 删除 Staff</span>
<span class="token keyword">def</span> <span class="token function">delete_staff</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span> Session<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db_staff <span class="token operator">=</span> db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Staff<span class="token punctuation">.</span><span class="token builtin">id</span> <span class="token operator">==</span> <span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>db_staff<span class="token punctuation">)</span>
    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> db_staff

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="main-fastapi-app" tabindex="-1"><a class="header-anchor" href="#main-fastapi-app"><span>Main FastAPI app</span></a></h2><p>编辑 <code>main.py</code></p><hr><h2 id="创建数据库表" tabindex="-1"><a class="header-anchor" href="#创建数据库表"><span>创建数据库表</span></a></h2><p>用一种非常简单的方式创建数据库表</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>models<span class="token punctuation">.</span>Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="创建-dependency" tabindex="-1"><a class="header-anchor" href="#创建-dependency"><span>创建 dependency</span></a></h2><p>现在使用我们在 <code>sql_app/databases.py</code> 文件中创建的 <code>SessionLocal</code> 类创建一个依赖项。</p><p>我们需要每个请求都有一个独立的数据库会话/连接(SessionLocal) ，在所有请求中使用同一个会话，然后在请求完成后关闭它。</p><p>然后为下一个请求创建一个新会话。</p><p>为此，我们将创建一个带有 yield 的新 dependency，如前面关于 Dependencies 与 yield 的部分所解释的那样。</p><p>我们的依赖项将创建一个新的 SQLAlchemy SessionLocal，它将在单个请求中使用，然后在请求完成后关闭它。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Dependency</span>
<span class="token keyword">def</span> <span class="token function">get_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    db <span class="token operator">=</span> SessionLocal<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> db
    <span class="token keyword">finally</span><span class="token punctuation">:</span>
        db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们将 <code>SessionLocal()</code> 的创建和请求的处理放在一个 try 块中。<br> 然后我们在 finally 块关闭它。 这样我们就可以确保在请求之后数据库会话总是关闭的。即使在处理请求时出现异常。 但是您不能从退出代码(在 yield 之后)中引发另一个异常</p></blockquote><p>然后，当在路径操作函数中使用依赖项时，我们使用直接从 SQLAlchemy 导入的 Session 类型声明它。</p><p>这样我们就可以在路径操作函数中获得更好的编辑器支持，因为编辑器会知道 db 参数的类型是 Session:</p><hr><h2 id="prisma" tabindex="-1"><a class="header-anchor" href="#prisma"><span>Prisma</span></a></h2>`,34),b={href:"https://github.com/tiangolo/fastapi/issues/4659#issuecomment-1143744431",target:"_blank",rel:"noopener noreferrer"},v={href:"https://prisma-client-py.readthedocs.io/en/stable/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/prisma/prisma",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.prisma.io/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>[TODO: 前端 TS 能用, 后端可以用 Prisma-python, 看起来比 SQLAlchemy 好用, 下个项目准备上 Prisma &amp;&amp; Prisma-python]</p><hr><hr><h2 id="数据库操作-慕课网" tabindex="-1"><a class="header-anchor" href="#数据库操作-慕课网"><span>数据库操作(慕课网)</span></a></h2><h3 id="配置-sqlalchemy-orm" tabindex="-1"><a class="header-anchor" href="#配置-sqlalchemy-orm"><span>配置 SQLAlchemy ORM</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker
<span class="token keyword">import</span> os

<span class="token comment"># sqlite 数据库 url</span>
SQLALCHEMY_DATABASE_URL <span class="token operator">=</span> <span class="token string">&quot;sqlite:///E:/GithubProject/Vben/VbenBackend/static/data/vben.db&quot;</span>
<span class="token comment"># SQLALCHEMY_DATABASE_URL = &quot;postgresql://user:password@postgresserver/db&quot;</span>

<span class="token comment"># 创建 SQLAlchemy 引擎</span>
engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>
    SQLALCHEMY_DATABASE_URL<span class="token punctuation">,</span> 
    encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span>
    <span class="token comment"># echo=True表示引擎将用repr()函数记录所有语句及其参数列表到日志</span>
    echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    <span class="token comment"># 由于SQLAlchemy是多线程，</span>
    <span class="token comment"># 指定check_same_thread=False来让建立的对象任意线程都可使用。</span>
    <span class="token comment"># 这个参数只在用SQLite数据库时设置</span>
    connect_args<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;check_same_thread&quot;</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>

<span class="token comment"># 在SQLAlchemy中，CRUD都是通过会话(session)进行的，</span>
<span class="token comment"># 所以我们必须要先创建会话，每一个SessionLocal实例就是一个数据库session</span>
<span class="token comment"># 创建SessionLocal 类</span>
SessionLocal <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>
    <span class="token comment"># commit()是指提交事务，将变更保存到数据库文件</span>
    autocommit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> 
    <span class="token comment"># flush()是指发送数据库语句到数据库，但数据库不一定执行写入磁盘；</span>
    autoflush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> 
    bind<span class="token operator">=</span>engine
<span class="token punctuation">)</span>

<span class="token comment"># 创建一个 Base 类, 后面继承这个类来创建每个数据库的 ORM Model</span>
Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="database-models" tabindex="-1"><a class="header-anchor" href="#database-models"><span>DataBase Models</span></a></h3>`,8),g={href:"https://www.bilibili.com/video/BV1iN411X72b?p=35",target:"_blank",rel:"noopener noreferrer"},_=t(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;
Author: 咸鱼型233
Date: 2022-04-28 16:38:14
LastEditors: 咸鱼型233
LastEditTime: 2022-04-30 23:54:14
FilePath: \\VbenBackend\\app\\model.py
Description: database model
Copyright (c) 2022 by 咸鱼型233, All Rights Reserved.
&#39;&#39;&#39;</span>
<span class="token keyword">from</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">import</span> Comment
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> <span class="token punctuation">(</span>
    Boolean<span class="token punctuation">,</span> 
    Column<span class="token punctuation">,</span> 
    ForeignKey<span class="token punctuation">,</span> 
    Integer<span class="token punctuation">,</span> 
    String<span class="token punctuation">,</span> 
    FLOAT<span class="token punctuation">,</span>
    BigInteger<span class="token punctuation">,</span>
    Date<span class="token punctuation">,</span>
    DateTime<span class="token punctuation">,</span>
    func<span class="token punctuation">,</span> 
<span class="token punctuation">)</span>
<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship
<span class="token keyword">from</span> <span class="token punctuation">.</span>database <span class="token keyword">import</span> Base

<span class="token comment"># 部门/科室类</span>
<span class="token keyword">class</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;部门类
    &quot;&quot;&quot;</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;department&quot;</span>    <span class="token comment"># 表名</span>

    did <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> comment <span class="token operator">=</span> <span class="token string">&quot;部门id&quot;</span><span class="token punctuation">)</span>
    dname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;部门名称&quot;</span><span class="token punctuation">)</span>
    
    <span class="token comment"># 关联 &lt;- staff.did</span>
    staffs <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">&quot;Staff&quot;</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">&quot;reDid&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># 当数据创建或者更新时插入当前时间</span>
    created_at <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">,</span> server_default<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;创建时间&quot;</span><span class="token punctuation">)</span>
    updated_at <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">,</span> server_default<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                            onupdate<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;更新时间&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># # 排序相关(新版 SQLAlchemy 已弃用)</span>
    <span class="token comment"># __mapper_args__ = {</span>
    <span class="token comment">#     # 倒序的话可以使用   &quot;order_by&quot;: did.desc()</span>
    <span class="token comment">#     &quot;order_by&quot;: did</span>
    <span class="token comment"># }</span>

    <span class="token comment"># 显示类对象</span>
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;&lt;Department </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>did<span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>dname<span class="token punctuation">}</span></span><span class="token string">&gt;&quot;</span></span>


<span class="token comment"># 员工类</span>
<span class="token keyword">class</span> <span class="token class-name">Staff</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;员工类
    &quot;&quot;&quot;</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;staff&quot;</span>   <span class="token comment"># 表名</span>

    sid <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;员工id&quot;</span><span class="token punctuation">)</span>
    sname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;员工姓名&quot;</span><span class="token punctuation">)</span>
    did <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">&quot;department.did&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;员工所属单位id&quot;</span><span class="token punctuation">)</span>     <span class="token comment"># 外键</span>

    <span class="token comment"># 外键 -&gt; department.did</span>
    reDid <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">&quot;Department&quot;</span><span class="token punctuation">,</span> back_populates<span class="token operator">=</span><span class="token string">&quot;staffs&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># 当数据创建或者更新时插入当前时间</span>
    created_at <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">,</span> server_default<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;创建时间&quot;</span><span class="token punctuation">)</span>
    updated_at <span class="token operator">=</span> Column<span class="token punctuation">(</span>DateTime<span class="token punctuation">,</span> server_default<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                            onupdate<span class="token operator">=</span>func<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;更新时间&quot;</span><span class="token punctuation">)</span>

    <span class="token comment"># # 排序相关(新版 SQLAlchemy 已弃用)</span>
    <span class="token comment"># __mapper_args__ = {</span>
    <span class="token comment">#     # 倒序的话可以使用   &quot;order_by&quot;: did.desc()</span>
    <span class="token comment">#     &quot;order_by&quot;: sid</span>
    <span class="token comment"># }</span>

    <span class="token comment"># 显示类对象</span>
    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;&lt;Staff </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>sid<span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>sname<span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>did<span class="token punctuation">}</span></span><span class="token string">&gt;&quot;</span></span>

<span class="token comment"># 用户类</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;用户类
    &quot;&quot;&quot;</span>
    __tablename__ <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span>

    uid <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;用户id&quot;</span><span class="token punctuation">)</span>
    account <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;账号&quot;</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;密码&quot;</span><span class="token punctuation">)</span>
    uname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;用户名&quot;</span><span class="token punctuation">)</span>
    role <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">&quot;身份组&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B={href:"https://www.imooc.com/qadetail/353354",target:"_blank",rel:"noopener noreferrer"},q=n("strong",null,"mapper_args",-1),E=t(`<p>新版本的 sqlalchemy 丢弃了 <strong>mappter_args</strong> 当中设置的方法</p><p>应当用 db.query().order_by() 直接在 Query 对象后面显示地调用 order_by 函数</p><p>例如:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>City<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>models<span class="token punctuation">.</span>City<span class="token punctuation">.</span>province<span class="token punctuation">)</span><span class="token punctuation">.</span>offset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>limit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

db<span class="token punctuation">.</span>query<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span>models<span class="token punctuation">.</span>Data<span class="token punctuation">.</span>confirmed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),A=n("hr",null,null,-1);function S(L,w){const s=o("ExternalLinkIcon");return l(),i("div",null,[u,n("blockquote",null,[n("p",null,[n("a",d,[a("SQLAlchemy"),e(s)])])]),r,n("p",null,[n("a",k,[a("关于 ORM mode 的技术细节"),e(s)])]),m,n("blockquote",null,[n("p",null,[n("a",b,[a("What is the best tool or ORM to manage database in Fast API? · Issue #4659 · tiangolo/fastapi (github.com)"),e(s)])]),n("p",null,[n("a",v,[a("Prisma Client Python (prisma-client-py.readthedocs.io)"),e(s)])]),n("p",null,[n("a",h,[a("prisma/prisma: Next-generation ORM for Node.js & TypeScript | PostgreSQL, MySQL, MariaDB, SQL Server, SQLite, MongoDB and CockroachDB (Preview) (github.com)"),e(s)])]),n("p",null,[n("a",y,[a("Prisma - Next-generation Node.js and TypeScript ORM for Databases"),e(s)])])]),f,n("blockquote",null,[n("p",null,[n("a",g,[a("【独家新技术】从0到1学习 FastAPI 框架的所有知识点_哔哩哔哩_bilibili"),e(s)])])]),_,n("blockquote",null,[n("p",null,[n("a",B,[q,a(' = {"order_by":...-慕课网 (imooc.com)'),e(s)])]),E]),A])}const D=p(c,[["render",S],["__file","数据库操作.html.vue"]]),x=JSON.parse('{"path":"/%E5%90%8E%E7%AB%AF/FastAPI/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C.html","title":"SQL(Relational) Databases","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"创建 SQLAlchemy","slug":"创建-sqlalchemy","link":"#创建-sqlalchemy","children":[]},{"level":2,"title":"引入 SQLAlchemy 库","slug":"引入-sqlalchemy-库","link":"#引入-sqlalchemy-库","children":[]},{"level":2,"title":"为 SQLAlchemy 创建 database URL","slug":"为-sqlalchemy-创建-database-url","link":"#为-sqlalchemy-创建-database-url","children":[]},{"level":2,"title":"创建 SQLAlchemy engine","slug":"创建-sqlalchemy-engine","link":"#创建-sqlalchemy-engine","children":[]},{"level":2,"title":"创建一个 SessionLocal 类","slug":"创建一个-sessionlocal-类","link":"#创建一个-sessionlocal-类","children":[]},{"level":2,"title":"创建一个 Base 类","slug":"创建一个-base-类","link":"#创建一个-base-类","children":[]},{"level":2,"title":"创建 database models","slug":"创建-database-models","link":"#创建-database-models","children":[]},{"level":2,"title":"从 Base 类创建 SQLAlchemy model","slug":"从-base-类创建-sqlalchemy-model","link":"#从-base-类创建-sqlalchemy-model","children":[]},{"level":2,"title":"创建 model attributes/columns","slug":"创建-model-attributes-columns","link":"#创建-model-attributes-columns","children":[]},{"level":2,"title":"创建 relationships","slug":"创建-relationships","link":"#创建-relationships","children":[]},{"level":2,"title":"创建 Pydantic model","slug":"创建-pydantic-model","link":"#创建-pydantic-model","children":[]},{"level":2,"title":"创建 initial Pydantic models / schemas","slug":"创建-initial-pydantic-models-schemas","link":"#创建-initial-pydantic-models-schemas","children":[{"level":3,"title":"SQLAlchemy style 和 Pydantic style","slug":"sqlalchemy-style-和-pydantic-style","link":"#sqlalchemy-style-和-pydantic-style","children":[]}]},{"level":2,"title":"创建用于 reading / returning 的 Pydantic models / schemas","slug":"创建用于-reading-returning-的-pydantic-models-schemas","link":"#创建用于-reading-returning-的-pydantic-models-schemas","children":[]},{"level":2,"title":"使用 Pydantic 的 orm_mode","slug":"使用-pydantic-的-orm-mode","link":"#使用-pydantic-的-orm-mode","children":[{"level":3,"title":"关于 ORM mode 的技术细节","slug":"关于-orm-mode-的技术细节","link":"#关于-orm-mode-的技术细节","children":[]}]},{"level":2,"title":"CRUD utils","slug":"crud-utils","link":"#crud-utils","children":[]},{"level":2,"title":"Main FastAPI app","slug":"main-fastapi-app","link":"#main-fastapi-app","children":[]},{"level":2,"title":"创建数据库表","slug":"创建数据库表","link":"#创建数据库表","children":[]},{"level":2,"title":"创建 dependency","slug":"创建-dependency","link":"#创建-dependency","children":[]},{"level":2,"title":"Prisma","slug":"prisma","link":"#prisma","children":[]},{"level":2,"title":"数据库操作(慕课网)","slug":"数据库操作-慕课网","link":"#数据库操作-慕课网","children":[{"level":3,"title":"配置 SQLAlchemy ORM","slug":"配置-sqlalchemy-orm","link":"#配置-sqlalchemy-orm","children":[]},{"level":3,"title":"DataBase Models","slug":"database-models","link":"#database-models","children":[]}]}],"git":{"createdTime":1714457095000,"updatedTime":1714457095000,"contributors":[{"name":"233JG","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":11.52,"words":3455},"filePathRelative":"后端/FastAPI/数据库操作.md","localizedDate":"2024年4月30日","excerpt":"\\n<ul>\\n<li><a href=\\"#sqlrelational-databases\\">SQL(Relational) Databases</a>\\n<ul>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-sqlalchemy\\">创建 SQLAlchemy</a></li>\\n<li><a href=\\"#%E5%BC%95%E5%85%A5-sqlalchemy-%E5%BA%93\\">引入 SQLAlchemy 库</a></li>\\n<li><a href=\\"#%E4%B8%BA-sqlalchemy-%E5%88%9B%E5%BB%BA-database-url\\">为 SQLAlchemy 创建 database URL</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-sqlalchemy-engine\\">创建 SQLAlchemy engine</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-sessionlocal-%E7%B1%BB\\">创建一个 SessionLocal 类</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-base-%E7%B1%BB\\">创建一个 Base 类</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-database-models\\">创建 database models</a></li>\\n<li><a href=\\"#%E4%BB%8E-base-%E7%B1%BB%E5%88%9B%E5%BB%BA-sqlalchemy-model\\">从 Base 类创建 SQLAlchemy model</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-model-attributescolumns\\">创建 model attributes/columns</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-relationships\\">创建 relationships</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-pydantic-model\\">创建 Pydantic model</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-initial-pydantic-models--schemas\\">创建 initial Pydantic models / schemas</a>\\n<ul>\\n<li><a href=\\"#sqlalchemy-style-%E5%92%8C-pydantic-style\\">SQLAlchemy style 和 Pydantic style</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA%E7%94%A8%E4%BA%8E-reading--returning-%E7%9A%84-pydantic-models--schemas\\">创建用于 reading / returning 的 Pydantic models / schemas</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8-pydantic-%E7%9A%84-orm_mode\\">使用 Pydantic 的 orm_mode</a>\\n<ul>\\n<li><a href=\\"#%E5%85%B3%E4%BA%8E-orm-mode-%E7%9A%84%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82\\">关于 ORM mode 的技术细节</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#crud-utils\\">CRUD utils</a></li>\\n<li><a href=\\"#main-fastapi-app\\">Main FastAPI app</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8\\">创建数据库表</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-dependency\\">创建 dependency</a></li>\\n<li><a href=\\"#prisma\\">Prisma</a></li>\\n<li><a href=\\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E6%85%95%E8%AF%BE%E7%BD%91\\">数据库操作(慕课网)</a>\\n<ul>\\n<li><a href=\\"#%E9%85%8D%E7%BD%AE-sqlalchemy-orm\\">配置 SQLAlchemy ORM</a></li>\\n<li><a href=\\"#database-models\\">DataBase Models</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{D as comp,x as data};
