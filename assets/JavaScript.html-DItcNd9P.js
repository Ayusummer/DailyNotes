import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as i,a as n,d as s,b as e,e as t}from"./app-DxMJFouC.js";const c={},r=t('<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h1><ul><li><a href="#javascript">JavaScript</a><ul><li><a href="#%E7%B1%BB">类</a></li><li><a href="#axios">Axios</a><ul><li><a href="#%E7%89%B9%E6%80%A7">特性</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">应用场景</a></li><li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li></ul></li><li><a href="#web-api-%E6%8E%A5%E5%8F%A3">Web API 接口</a><ul><li><a href="#window">Window</a><ul><li><a href="#windowlocalstorage">Window.localStorage</a><ul><li><a href="#%E7%A4%BA%E4%BE%8B">示例</a></li></ul></li></ul></li></ul></li><li><a href="#%E5%8A%A8%E7%94%BB%E5%8A%A8%E6%95%88">动画/动效</a><ul><li><a href="#sliderland">sliderland</a></li></ul></li><li><a href="#%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5">模拟键盘输入</a></li><li><a href="#iife%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F">IIFE(立即调用函数表达式)</a></li></ul></li></ul><hr><ul><li><code>toLocaleString()</code><ul><li><code>toLocaleString()</code> 方法可根据本地时间把 Date 对象转换为字符串，并返回结果。</li><li>以将数字变成千分位格式</li></ul></li></ul>',4),u={href:"https://www.tomche.space/post/using-javascript-kernel-in-vscode-jupyter-notebooks/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.runoob.com/jsref/jsref-tolocalestring.html",target:"_blank",rel:"noopener noreferrer"},k=n("hr",null,null,-1),v=n("h2",{id:"类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类"},[n("span",null,"类")])],-1),m={href:"https://www.w3school.com.cn/js/js_class_intro.asp",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> displayProperty</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>displayProperty <span class="token operator">=</span> displayProperty<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例化:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> item2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;兼职&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="axios" tabindex="-1"><a class="header-anchor" href="#axios"><span>Axios</span></a></h2>`,5),g={href:"https://zhuanlan.zhihu.com/p/69157371",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>Axios 是一个基于 promise 的 HTTP 库，简单的讲就是可以发送get、post请求。</p><p>前几年Jquery比较火的时候，大家都在用他。但是由于Vue、React等框架的出现，Jquery也不是那么吃香了。也正是Vue、React等框架的出现，促使了Axios轻量级库的出现，因为Vue等，不需要操作Dom，所以不需要引入Jquery.js了。</p><hr><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><p>1、可以在浏览器中发送 XMLHttpRequests 2、可以在 node.js 发送 http 请求 3、支持 Promise API 4、拦截请求和响应 5、转换请求数据和响应数据 6、能够取消请求 7、自动转换 JSON 数据 8、客户端支持保护安全免受 XSRF 攻击</p><hr><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><p>浏览器发送请求，或者Node.js发送请求都可以用到Axios。</p><p>像Vue、React、Node等项目就可以使用Axios</p><p>如果你的项目里面用了Jquery，此时就不需要多此一举了，jquery里面本身就可以发送请求。</p><hr><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>安装模块</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> axios
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者直接引入:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>引入模块后可以直接使用</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// GET</span>
axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">12345</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// POST</span>
axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Javan&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">website</span><span class="token operator">:</span> <span class="token string">&#39;www.javanx.cn&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的参数是可选的</p><p>并发多个请求，可以这样写:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/12345/permissions&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acct<span class="token punctuation">,</span> perms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 两个请求都执行完成才会执行</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="web-api-接口" tabindex="-1"><a class="header-anchor" href="#web-api-接口"><span>Web API 接口</span></a></h2><h3 id="window" tabindex="-1"><a class="header-anchor" href="#window"><span>Window</span></a></h3><h4 id="window-localstorage" tabindex="-1"><a class="header-anchor" href="#window-localstorage"><span>Window.localStorage</span></a></h4>`,25),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"localStorage",-1),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"Document",-1),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Storage",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"Storage",-1),x=n("code",null,"localStorage",-1),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"sessionStorage",-1),I=n("code",null,"localStorage",-1),j=n("code",null,"sessionStorage",-1),J=n("p",null,[s("应注意，无论数据存储在 "),n("code",null,"localStorage"),s(" 还是 "),n("code",null,"sessionStorage"),s(" ，"),n("strong",null,"它们都特定于页面的协议。")],-1),D=n("p",null,[s("另外，"),n("code",null,"localStorage"),s(" 中的键值对总是以字符串的形式存储。 (需要注意, 和js对象相比, 键值对总是以字符串的形式存储意味着数值类型会自动转化为字符串类型).")],-1),z=n("h5",{id:"示例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#示例"},[n("span",null,"示例")])],-1),N={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Storage",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"Storage",-1),q={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Storage/setItem",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"Storage.setItem()",-1),P=t(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;myCat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>读取 <code>localStorage</code> 项:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> cat <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;myCat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>移除 <code>localStorage</code> 项:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;myCat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>移除所有的 <code>localStorage</code> 项:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 移除所有</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h2 id="动画-动效" tabindex="-1"><a class="header-anchor" href="#动画-动效"><span>动画/动效</span></a></h2><h3 id="sliderland" tabindex="-1"><a class="header-anchor" href="#sliderland"><span>sliderland</span></a></h3>`,11),C={href:"https://github.com/blinry/sliderland",target:"_blank",rel:"noopener noreferrer"},V={href:"https://sliderland.blinry.org/",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,[n("img",{src:"http://cdn.ayusummer233.top/img/202205230930199.png",alt:"image-20220523093011957"})],-1),R=n("hr",null,null,-1),L=n("h2",{id:"模拟键盘输入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#模拟键盘输入"},[n("span",null,"模拟键盘输入")])],-1),G={href:"https://blog.csdn.net/a0405221/article/details/124374119",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>对于被框架劫持setter事件可以使用如下方式录入数据</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">changeReactInputValue</span><span class="token punctuation">(</span><span class="token parameter">inputDom<span class="token punctuation">,</span>newText</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> lastValue <span class="token operator">=</span> inputDom<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    inputDom<span class="token punctuation">.</span>value <span class="token operator">=</span> newText<span class="token punctuation">;</span>
    <span class="token keyword">let</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">bubbles</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    event<span class="token punctuation">.</span>simulated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> tracker <span class="token operator">=</span> inputDom<span class="token punctuation">.</span>_valueTracker<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tracker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tracker<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    inputDom<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> userIdDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;userName&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//普通JS获取输入框Dom</span>
<span class="token keyword">let</span> passwdDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//普通JS获取输入框Dom</span>

<span class="token function">changeReactInputValue</span><span class="token punctuation">(</span>userIdDom<span class="token punctuation">,</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">//改变React的输入框的值</span>
<span class="token function">changeReactInputValue</span><span class="token punctuation">(</span>passwdDom<span class="token punctuation">,</span><span class="token string">&#39;passwd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">//改变React的输入框的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="iife-立即调用函数表达式" tabindex="-1"><a class="header-anchor" href="#iife-立即调用函数表达式"><span>IIFE(立即调用函数表达式)</span></a></h2>`,4),U={href:"https://developer.mozilla.org/en-US/docs/Glossary/IIFE",target:"_blank",rel:"noopener noreferrer"},O=n("strong",null,"IIFE",-1),H={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/JavaScript",target:"_blank",rel:"noopener noreferrer"},X={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Function",target:"_blank",rel:"noopener noreferrer"},K=t(`<div class="language-JavaScript line-numbers-mode" data-ext="JavaScript" data-title="JavaScript"><pre class="language-JavaScript"><code>(function () {
  // …
})();

(() =&gt; {
  // …
})();

(async () =&gt; {
  // …
})();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202302141454393.png" alt="image-20230214145357266"></p></blockquote>`,2),Q={href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Self-Executing_Anonymous_Function",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"圆括号运算符",-1),$=n("code",null,"()",-1),nn=n("p",null,[s("第二部分再一次使用 "),n("code",null,"()"),s(" 创建了一个立即执行函数表达式，JavaScript 引擎到此将直接执行函数。")],-1),sn=n("hr",null,null,-1);function an(en,tn){const a=p("ExternalLinkIcon");return l(),i("div",null,[r,n("blockquote",null,[n("p",null,[n("a",u,[s("Using Javascript Kernel in Vscode Jupyter Notebooks (tomche.space)"),e(a)])]),n("p",null,[n("a",d,[s("JavaScript toLocaleString() 方法 | 菜鸟教程 (runoob.com)"),e(a)])])]),k,v,n("blockquote",null,[n("p",null,[n("a",m,[s("JavaScript 类 (w3school.com.cn)"),e(a)])])]),h,n("blockquote",null,[n("p",null,[n("a",g,[s("Axios是什么？用在什么场景？如何使用？ - 知乎 (zhihu.com)"),e(a)])])]),b,n("blockquote",null,[n("p",null,[n("a",f,[s("Window.localStorage - Web API 接口参考 | MDN (mozilla.org)"),e(a)])])]),n("p",null,[s("只读的"),_,s(" 属性允许你访问一个"),n("a",E,[w,e(a)]),s(" 源(origin) 的对象 "),n("a",y,[A,e(a)]),s("；存储的数据将保存在浏览器会话中。"),x,s(" 类似 "),n("a",S,[B,e(a)]),s("，但其区别在于：存储在 "),I,s(" 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 "),j,s(" 的数据会被清除 。")]),J,D,z,n("p",null,[s("访问了当前域名下的本地 "),n("a",N,[W,e(a)]),s(" 对象，并通过 "),n("a",q,[F,e(a)]),s(" 增加一个数据项目:")]),P,n("blockquote",null,[n("p",null,[n("a",C,[s("blinry/sliderland: A (very) minimalist creative coding playground. Make animations using only 64 HTML sliders! (github.com)"),e(a)])]),n("p",null,[n("a",V,[s("Sliderland (blinry.org)"),e(a)])])]),T,R,L,n("blockquote",null,[n("p",null,[n("a",G,[s("javascript 模拟按键事件 触发输入框oninput事件_谢泽的网络日志的博客-CSDN博客_js模拟输入数字到input"),e(a)])])]),M,n("blockquote",null,[n("p",null,[n("a",U,[s("IIFE - MDN Web Docs Glossary: Definitions of Web-related terms | MDN (mozilla.org)"),e(a)])])]),n("p",null,[O,s("(立即调用函数表达式) 是一个在定义时就会立即执行的 "),n("a",H,[s("JavaScript"),e(a)]),s(),n("a",X,[s("函数"),e(a)]),s("。")]),K,n("p",null,[s("这是一个被称为 "),n("a",Q,[s("自执行匿名函数"),e(a)]),s(" 的设计模式，主要包含两部分。第一部分是包围在 "),n("a",Y,[Z,e(a)]),s(),$,s(" 里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。")]),nn,sn])}const ln=o(c,[["render",an],["__file","JavaScript.html.vue"]]),cn=JSON.parse('{"path":"/Language/JavaScript/JavaScript.html","title":"JavaScript","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"类","slug":"类","link":"#类","children":[]},{"level":2,"title":"Axios","slug":"axios","link":"#axios","children":[{"level":3,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]},{"level":2,"title":"Web API 接口","slug":"web-api-接口","link":"#web-api-接口","children":[{"level":3,"title":"Window","slug":"window","link":"#window","children":[]}]},{"level":2,"title":"动画/动效","slug":"动画-动效","link":"#动画-动效","children":[{"level":3,"title":"sliderland","slug":"sliderland","link":"#sliderland","children":[]}]},{"level":2,"title":"模拟键盘输入","slug":"模拟键盘输入","link":"#模拟键盘输入","children":[]},{"level":2,"title":"IIFE(立即调用函数表达式)","slug":"iife-立即调用函数表达式","link":"#iife-立即调用函数表达式","children":[]}],"git":{"createdTime":1667831333000,"updatedTime":1709635981000,"contributors":[{"name":"233Official","email":"ayusummer233@qq.com","commits":3},{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":2},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":4.07,"words":1220},"filePathRelative":"Language/JavaScript/JavaScript.md","localizedDate":"2022年11月7日","excerpt":"\\n<ul>\\n<li><a href=\\"#javascript\\">JavaScript</a>\\n<ul>\\n<li><a href=\\"#%E7%B1%BB\\">类</a></li>\\n<li><a href=\\"#axios\\">Axios</a>\\n<ul>\\n<li><a href=\\"#%E7%89%B9%E6%80%A7\\">特性</a></li>\\n<li><a href=\\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\\">应用场景</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8\\">使用</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#web-api-%E6%8E%A5%E5%8F%A3\\">Web API 接口</a>\\n<ul>\\n<li><a href=\\"#window\\">Window</a>\\n<ul>\\n<li><a href=\\"#windowlocalstorage\\">Window.localStorage</a>\\n<ul>\\n<li><a href=\\"#%E7%A4%BA%E4%BE%8B\\">示例</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%8A%A8%E7%94%BB%E5%8A%A8%E6%95%88\\">动画/动效</a>\\n<ul>\\n<li><a href=\\"#sliderland\\">sliderland</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5\\">模拟键盘输入</a></li>\\n<li><a href=\\"#iife%E7%AB%8B%E5%8D%B3%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\\">IIFE(立即调用函数表达式)</a></li>\\n</ul>\\n</li>\\n</ul>"}');export{ln as comp,cn as data};
