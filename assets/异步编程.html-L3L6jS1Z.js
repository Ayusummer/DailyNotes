import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as i,a as n,d as s,b as e,e as t}from"./app-DxMJFouC.js";const l={},d=n("h1",{id:"python-异步编程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python-异步编程"},[n("span",null,"Python 异步编程")])],-1),u={href:"http://www.ruanyifeng.com/blog/2019/11/python-asyncio.html",target:"_blank",rel:"noopener noreferrer"},r={href:"https://realpython.com/async-io-python/",target:"_blank",rel:"noopener noreferrer"},m=n("hr",null,null,-1),k=n("li",null,[n("p",null,"历史上，Python 并不支持专门的异步编程语法，因为不需要。")],-1),v={href:"https://timber.io/blog/multiprocessing-vs-multithreading-in-python-what-you-need-to-know/",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"threading",-1),h=n("code",null,"multiprocessing",-1),b=n("li",null,[n("p",null,'但是，多线程有 "线程竞争" 的问题，处理起来很复杂，还涉及加锁。对于简单的异步任务来说(比如与网页互动) ，写起来很麻烦。')],-1),g=n("li",null,[n("p",null,[s("Python 3.4 引入了 "),n("code",null,"asyncio"),s(" 模块，增加了异步编程，跟 JavaScript 的"),n("code",null,"async/await"),s(" 极为类似，大大方便了异步任务的处理。它受到了开发者的欢迎，成为从 Python 2 升级到 Python 3 的主要理由之一。")])],-1),_=n("hr",null,null,-1),w=n("h2",{id:"asyncio-的设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#asyncio-的设计"},[n("span",null,"asyncio 的设计")])],-1),f=n("p",null,[n("code",null,"asyncio"),s(" 模块最大特点就是，只存在一个线程，跟 JavaScript 一样。")],-1),x=n("p",null,'由于只有一个线程，就不可能多个任务同时运行。asyncio 是"多任务合作"模式(cooperative multitasking) ，允许异步任务交出执行权给其他任务，等到其他任务完成，再收回执行权继续往下执行，这跟 JavaScript 也是一样的。',-1),P=n("p",null,"由于代码的执行权在多个任务之间交换，所以看上去好像多个任务同时运行，其实底层只有一个线程，多个任务分享运行时间。",-1),O=n("p",null,"表面上，这是一个不合理的设计，明明有多线程多进程的能力，为什么放着多余的 CPU 核心不用，而只用一个线程呢？但是就像前面说的，单线程简化了很多问题，使得代码逻辑变得简单，写法符合直觉。",-1),T=n("p",null,[n("img",{src:"http://cdn.ayusummer233.top/img/image-20210614075932427.png",alt:"image-20210614075932427"})],-1),A={href:"https://wangdoc.com/javascript/async/general.html",target:"_blank",rel:"noopener noreferrer"},q=t(`<p><img src="http://cdn.ayusummer233.top/img/image-20210614080137145.png" alt="image-20210614080137145"></p><hr><h2 id="asyncio-api" tabindex="-1"><a class="header-anchor" href="#asyncio-api"><span>asyncio API</span></a></h2><p>下面介绍 <code>asyncio</code> 模块最主要的几个API。注意，必须使用 Python 3.7 或更高版本，早期的语法已经变了。</p><p>第一步，<code>import</code> 加载 <code>asyncio</code> 模块。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二步，函数前面加上 <code>async</code> 关键字，就变成了 async 函数。这种函数最大特点是执行可以暂停，交出执行权。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步，在 async 函数内部的异步任务前面，加上<code>await</code>命令。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>asyncio.sleep(1)</code> 方法可以生成一个异步任务，休眠1秒钟然后结束。</p><p>执行引擎遇到<code>await</code>命令，就会在异步任务开始执行之后，暂停当前 async 函数的执行，把执行权交给其他任务。等到异步任务结束，再把执行权交回 async 函数，继续往下执行。</p><p>第四步，<code>async.run()</code> 方法加载 async 函数，启动事件循环。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>asyncio.run()</code> 在事件循环上监听 async 函数<code>main</code>的执行。等到 <code>main</code> 执行完了，事件循环才会终止。</p><hr><h2 id="async-函数的示例" tabindex="-1"><a class="header-anchor" href="#async-函数的示例"><span>async 函数的示例</span></a></h2><p>下面是 async 函数的例子，新建一个脚本<code>async.py</code>，代码如下。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token comment"># async.py</span>

<span class="token keyword">import</span> asyncio

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;One&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Two&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面脚本中，在 async 函数<code>main</code>的里面，<code>asyncio.gather()</code> 方法将多个异步任务(三个 <code>count()</code>) 包装成一个新的异步任务，必须等到内部的多个异步任务都执行结束，这个新的异步任务才会结束。</p><p>脚本的运行结果如下。</p><blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ python3 async.py
One
One
One
Two
Two
Two
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>上面运行结果的原因是，三个 <code>count()</code> 依次执行，打印完 <code>One</code>，就休眠1秒钟，把执行权交给下一个 <code>count()</code>，所以先连续打印出三个 <code>One</code>。等到1秒钟休眠结束，执行权重新交回第一个 <code>count()</code>，开始执行 <code>await</code> 命令下一行的语句，所以会接着打印出三个<code>Two</code>。脚本总的运行时间是1秒。</p><p>作为对比，下面是这个例子的同步版本 <code>sync.py</code>。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token comment"># sync.py</span>

<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;One&quot;</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Two&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        count<span class="token punctuation">(</span><span class="token punctuation">)</span>

main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面脚本的运行结果如下。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ python3 sync.py 
One
Two
One
Two
One
Two
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面运行结果的原因是，三个 <code>count()</code> 都是同步执行，必须等到前一个执行完，才能执行后一个。脚本总的运行时间是3秒。</p><hr><h2 id="实例-pyppeteer-模块" tabindex="-1"><a class="header-anchor" href="#实例-pyppeteer-模块"><span>实例：pyppeteer 模块</span></a></h2><p>最后是一个异步编程的真实例子：操作无头浏览器。异步编程对代码的简化，在这个例子体现得淋漓尽致。</p>`,31),S={href:"https://pypi.org/project/pyppeteer/",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> pyppeteer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，写一个网页截图脚本<code>screenshot.py</code>。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token comment"># screenshot.py</span>

<span class="token keyword">import</span> asyncio
<span class="token keyword">from</span> pyppeteer <span class="token keyword">import</span> launch

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    browser <span class="token operator">=</span> <span class="token keyword">await</span> launch<span class="token punctuation">(</span><span class="token punctuation">)</span>
    page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span>newPage<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token string">&#39;http://example.com&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> page<span class="token punctuation">.</span>screenshot<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;example.png&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，启动浏览器(<code>launch</code>) 、打开新 Tab(<code>newPage()</code>) 、访问网址(<code>page.goto()</code>) 、截图(<code>page.screenshot()</code>) 、关闭浏览器(<code>browser.close()</code>) ，这一系列操作都是异步任务，使用 <code>await</code> 命令写起来非常自然简单。</p><p>执行这个脚本，当前目录下就会生成截图文件 <code>example.png</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ python3 screenshot.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),C=n("code",null,"No usable sandbox!",-1),I={href:"https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#setting-up-chrome-linux-sandbox",target:"_blank",rel:"noopener noreferrer"},E={href:"https://miyakogi.github.io/pyppeteer/",target:"_blank",rel:"noopener noreferrer"};function J(N,L){const a=p("ExternalLinkIcon");return c(),i("div",null,[d,n("p",null,[n("a",u,[s("原文链接(几乎完全照搬了内容)-Python 异步编程入门 - 阮一峰的网络日志 (ruanyifeng.com)"),e(a)])]),n("ul",null,[n("li",null,[n("a",r,[s("参考链接: Async IO in Python: A Complete Walkthrough"),e(a)]),s(", Brad Solomon")])]),m,n("ul",null,[k,n("li",null,[n("p",null,[s("有了"),n("a",v,[s("多线程("),y,s(") 和多进程("),h,s(") "),e(a)]),s("，就没必要一定支持异步了。如果一个线程(或进程) 阻塞，新建其他线程(或进程) 就可以了，程序不会卡死。")])]),b,g]),_,w,f,x,P,O,T,n("p",null,[s("asyncio 模块在单线程上启动一个事件循环(event loop) ，时刻监听新进入循环的事件，加以处理，并不断重复这个过程，直到异步任务结束。事件循环的内部机制，可以参考 "),n("a",A,[s("JavaScript 的模型"),e(a)]),s("，两者是一样的。")]),q,n("p",null,[s("我们需要用到 "),n("a",S,[s("pyppeteer 模块"),e(a)]),s("，它是无头浏览器 Puppeteer 的 Python 移植，API 跟 JavaScript 版本基本一致。下面是安装命令。")]),B,n("p",null,[s("果脚本执行时报错 "),C,s("，可以参考"),n("a",I,[s("这里"),e(a)]),s("。另外，第一次执行这个脚本，会下载安装 Puppeteer，可能需要等待较长时间，但是此后的执行就会很快。")]),n("p",null,[s("Pyppeteer 的"),n("a",E,[s("官网"),e(a)]),s("还有其他实例，比如向网页注入 JavaScript 代码，大家可以自己试玩。")])])}const j=o(l,[["render",J],["__file","异步编程.html.vue"]]),z=JSON.parse('{"path":"/Language/Python/libs/asyncio/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B.html","title":"Python 异步编程","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"asyncio 的设计","slug":"asyncio-的设计","link":"#asyncio-的设计","children":[]},{"level":2,"title":"asyncio API","slug":"asyncio-api","link":"#asyncio-api","children":[]},{"level":2,"title":"async 函数的示例","slug":"async-函数的示例","link":"#async-函数的示例","children":[]},{"level":2,"title":"实例：pyppeteer 模块","slug":"实例-pyppeteer-模块","link":"#实例-pyppeteer-模块","children":[]}],"git":{"createdTime":1694760760000,"updatedTime":1709635981000,"contributors":[{"name":"233Official","email":"ayusummr233@gmail.com","commits":1},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":4.97,"words":1490},"filePathRelative":"Language/Python/libs/asyncio/异步编程.md","localizedDate":"2023年9月15日","excerpt":"\\n<p><a href=\\"http://www.ruanyifeng.com/blog/2019/11/python-asyncio.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">原文链接(几乎完全照搬了内容)-Python 异步编程入门 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\\n<ul>\\n<li><a href=\\"https://realpython.com/async-io-python/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考链接: Async IO in Python: A Complete Walkthrough</a>, Brad Solomon</li>\\n</ul>"}');export{j as comp,z as data};
