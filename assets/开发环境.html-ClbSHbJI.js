import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as d,c as u,b as a,w as l,a as e,d as n,e as t}from"./app-DxMJFouC.js";const h={},m=t('<h1 id="python-开发环境配置" tabindex="-1"><a class="header-anchor" href="#python-开发环境配置"><span>Python 开发环境配置</span></a></h1><ul><li><a href="#python-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">Python 开发环境配置</a><ul><li><a href="#%E5%AE%89%E8%A3%85-python">安装 Python</a></li><li><a href="#pip-%E6%93%8D%E4%BD%9C">pip 操作</a><ul><li><a href="#%E7%A6%BB%E7%BA%BF%E8%BF%81%E7%A7%BB-python-%E5%BA%93">离线迁移 python 库</a></li></ul></li><li><a href="#%E6%8D%A2%E6%BA%90%E6%93%8D%E4%BD%9C">换源操作</a><ul><li><a href="#%E6%BA%90%E5%9C%B0%E5%9D%80">源地址</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">使用方法</a><ul><li><a href="#%E6%96%B9%E6%B3%95%E4%B8%80%E4%B8%B4%E6%97%B6%E4%BD%BF%E7%94%A8">方法一：临时使用</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E6%BA%90">方法二：更改默认源</a></li><li><a href="#%E6%96%B9%E6%B3%95%E4%B8%89python%E4%BB%A3%E7%A0%81%E6%9B%B4%E6%94%B9%E5%AE%89%E8%A3%85%E6%BA%90">方法三：python代码更改安装源</a></li></ul></li></ul></li><li><a href="#%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">环境/依赖版本管理工具</a><ul><li><a href="#virtual-environment">virtual environment</a></li><li><a href="#pipenv">Pipenv</a></li><li><a href="#poetry">Poetry</a><ul><li><a href="#%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82">系统需求</a></li><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a><ul><li><a href="#pyprojecttoml">pyproject.toml</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">基本用法</a><ul><li><a href="#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96">安装依赖</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">使用虚拟环境</a></li><li><a href="#%E7%BB%93%E5%90%88-conda-%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8">结合 conda 环境使用</a><ul><li><a href="#%E5%9C%A8%E5%BD%93%E5%89%8D-conda-%E7%8E%AF%E5%A2%83%E7%9A%84-bin-%E7%9B%AE%E5%BD%95%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0-activate-%E8%84%9A%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%8E%AF%E5%A2%83%E6%BF%80%E6%B4%BB%E5%A4%B1%E8%B4%A5ubuntu">在当前 conda 环境的 <code>bin</code> 目录中找不到 activate 脚本导致环境激活失败(ubuntu)</a></li></ul></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a><ul><li><a href="#failed-to-create-the-collection-prompt-dismissed">Failed to create the collection: Prompt dismissed..</a></li><li><a href="#%E5%8D%A1-keyring">卡 keyring</a></li></ul></li></ul></li><li><a href="#pdm">PDM</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">主要特性</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">为什么不用虚拟环境</a></li><li><a href="#%E5%AE%89%E8%A3%85-1">安装</a></li><li><a href="#quickstart">QuickStart</a></li><li><a href="#working-with-pep-582">working with PEP 582</a></li><li><a href="#pdm-scripts">PDM Scripts</a></li><li><a href="#pdm-packer">PDM-packer</a></li></ul></li></ul></li><li><a href="#anaconda">Anaconda</a><ul><li><a href="#windows">Windows</a><ul><li><a href="#anaconda-%E6%8D%A2%E6%BA%90">Anaconda 换源</a></li><li><a href="#%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA-conda-%E7%8E%AF%E5%A2%83">新建一个 conda 环境</a></li><li><a href="#anaconda-navigator-%E5%8D%87%E7%BA%A7">Anaconda Navigator 升级</a></li></ul></li><li><a href="#ubuntu">Ubuntu</a></li><li><a href="#%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86">报错收集</a><ul><li><a href="#check_hostname-requires-server_hostname"><code>check_hostname requires server_hostname</code></a></li><li><a href="#%E5%90%84%E7%B1%BB-httperror-%E7%9B%B8%E5%85%B3">各类 <code>HTTPError</code> 相关</a></li><li><a href="#modulenotfounderror-no-module-named-pip_vendor"><code>ModuleNotFoundError: No module named &#39;pip._vendor....&#39;</code></a></li></ul></li></ul></li><li><a href="#vscode">VSCode</a><ul><li><a href="#%E6%89%A9%E5%B1%95">扩展</a></li><li><a href="#pylance-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97">Pylance 无法加载自定义模块</a></li></ul></li><li><a href="#%E7%94%9F%E6%88%90%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96">生成环境依赖</a></li><li><a href="#pycharm">Pycharm</a><ul><li><a href="#pycharm-%E6%8D%A2%E6%BA%90">Pycharm 换源</a></li><li><a href="#%E5%BF%AB%E6%8D%B7%E9%94%AE">快捷键</a><ul><li><a href="#%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2">查找替换</a></li></ul></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A%E8%84%9A%E6%9C%AC">创建文档注释脚本</a></li><li><a href="#%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A8%A1%E5%9D%97%E6%8A%A5%E7%BA%A2">导入自己的模块报红</a></li><li><a href="#pep8-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5">PEP8 代码规范检查</a></li></ul></li><li><a href="#jupyterlab">JupyterLab</a><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li><li><a href="#%E6%8F%92%E4%BB%B6">插件</a><ul><li><a href="#%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90">插件推荐</a><ul><li><a href="#kitecojupyterlab-kite"><code>@kiteco/jupyterlab-kite</code></a></li></ul></li></ul></li><li><a href="#%E5%BF%AB%E6%8D%B7%E9%94%AE-1">快捷键</a><ul><li><a href="#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F-%E6%8C%89%E9%94%AE-esc-%E5%BC%80%E5%90%AF">命令模式 (按键 Esc 开启)</a></li><li><a href="#%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F--enter-%E9%94%AE%E5%90%AF%E5%8A%A8">编辑模式 ( Enter 键启动)</a></li></ul></li></ul></li><li><a href="#pipx">pipx</a><ul><li><a href="#%E5%AE%89%E8%A3%85-2">安装</a></li><li><a href="#%E6%A6%82%E8%BF%B0-1">概述</a><ul><li><a href="#pipx-%E4%B8%8E-pip-%E7%9A%84%E5%8C%BA%E5%88%AB">pipx 与 pip 的区别</a></li><li><a href="#pipx-%E4%BB%8E%E4%BB%80%E4%B9%88%E5%9C%B0%E6%96%B9%E5%AE%89%E8%A3%85-app">pipx 从什么地方安装 app</a></li></ul></li></ul></li><li><a href="#ubuntu-1604-%E5%AE%89%E8%A3%85-python-3812">ubuntu 16.04 安装 Python 3.8.12</a><ul><li><a href="#%E9%85%8D%E7%BD%AE%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83">配置依赖环境</a></li><li><a href="#%E4%B8%8B%E8%BD%BD-python3812-%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%B9%B6%E8%A7%A3%E5%8E%8B">下载 Python3.8.12 压缩包并解压</a></li></ul></li><li><a href="#ubuntu-1604-lts-%E9%85%8D%E7%BD%AEjupyter%E6%9C%8D%E5%8A%A1">Ubuntu 16.04 LTS 配置Jupyter服务</a></li><li><a href="#%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86-1">报错收集</a><ul><li><a href="#error-could-not-install-packages-due-to-an-environment">ERROR: Could not install packages due to an Environment</a></li></ul></li></ul></li></ul><hr><h2 id="安装-python" tabindex="-1"><a class="header-anchor" href="#安装-python"><span>安装 Python</span></a></h2>',4),v=e("p",null,"WIndows 下直接到官网下载可执行文件安装即可, 或者下 Anaconda, 从 Anaconda 里装也可以",-1),b=e("hr",null,null,-1),g=e("p",null,"下载好的 python 安装程序除了手动运行安装外还可以使用命令行来安装, 例如:",-1),k=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[n("python-3"),e("span",{class:"token punctuation"},"."),n("10"),e("span",{class:"token punctuation"},"."),n("6-amd64"),e("span",{class:"token punctuation"},"."),n("exe "),e("span",{class:"token operator"},"/"),n(`quiet InstallAllUsers=1 TargetDir=C:\\Python310 PrependPath=1 Include_test=0
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),y=e("ul",null,[e("li",null,[e("p",null,[e("code",null,"InstallAllUsers=1"),n(" 所有用户可用")])]),e("li",null,[e("p",null,[e("code",null,"PrependPath=1"),n(" 添加环境变量")])]),e("li",null,[e("p",null,[e("code",null,"TargetDir=C:\\Python310"),n(": 指定安装目录")])]),e("li",null,[e("p",null,[e("code",null,"Include_test=0"),n(": 不安装 Python 的测试文件或测试模块。测试文件通常用于开发和测试 Python 本身，而不是用于一般应用程序开发")])])],-1),E=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202310101104873.png",alt:"image-20231010093627141"})],-1),_=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202310101106885.png",alt:"image-20231010110608749"})],-1),f=e("p",null,"等待一会儿后新开个 powershell / cmd 窗口验证下:",-1),x=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202310101108621.png",alt:"image-20231010110837513"})],-1),A=e("p",null,"可以看到已经成功安装在默认目录下且添加了环境变量了",-1),B=e("p",null,"重开 powershell 窗口会重新加载环境变量, 而有时候当前 powershell 窗口可能保存了一些当前需要的临时变量, 重开后就丢失了, 还需要重新操作, 此时也可以通过如下方式, 在不关闭当前 powershell 窗口的前提下重新加载环境变量",-1),w={href:"https://chocolatey.org/install",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"refreshenv",-1),q=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202310101425869.png",alt:"image-20231010142501820"})],-1),D=e("li",null,[e("p",null,"如果没装 Chocolatey 的话也可以在当前 powershell 窗口中执行如下命令来将当前 PowerShell 进程中的 PATH 环境变量设置为与系统环境变量中的 PATH 值相同"),e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[e("span",{class:"token namespace"},"[System.Environment]"),n("::SetEnvironmentVariable"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"Path"'),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token namespace"},"[System.Environment]"),n("::GetEnvironmentVariable"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"Path"'),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token namespace"},"[System.EnvironmentVariableTarget]"),n("::Machine"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),n(),e("span",{class:"token namespace"},"[System.EnvironmentVariableTarget]"),n("::"),e("span",{class:"token keyword"},"Process"),e("span",{class:"token punctuation"},")"),n(`
`),e("span",{class:"token comment"},"# 或者使用如下命令也是可以的:"),n(`
`),e("span",{class:"token variable"},"$env"),n(":Path = "),e("span",{class:"token namespace"},"[System.Environment]"),n("::GetEnvironmentVariable"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"Path"'),e("span",{class:"token punctuation"},","),e("span",{class:"token string"},'"Machine"'),e("span",{class:"token punctuation"},")"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202310120951755.png",alt:"image-20231010144609439"})]),e("ul",null,[e("li",null,[e("code",null,'[System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::Machine)'),n('： 从系统环境变量中获取名为 "Path" 的环境变量的值。 '),e("code",null,"[System.Environment]"),n(" 是 .NET Framework 中的一个类，用于访问系统环境变量。 "),e("code",null,"[System.EnvironmentVariableTarget]::Machine"),n(" 参数指定了要获取的是计算机级别的环境变量。")]),e("li",null,[e("code",null,'[System.Environment]::SetEnvironmentVariable("Path", ...)'),n("：用获取到的系统环境变量值来更新当前 PowerShell 进程中的 PATH 环境变量。"),e("code",null,"[System.Environment]::SetEnvironmentVariable"),n(" 方法用于设置环境变量的值。它接受三个参数： "),e("ul",null,[e("li",null,'第一个参数是要设置的环境变量的名称，这里是 "Path"，表示 PATH 环境变量。'),e("li",null,"第二个参数是要设置的新值，它使用了之前获取的系统环境变量的值，确保当前进程中的 PATH 与系统环境变量中的 PATH 一致。"),e("li",null,[n("第三个参数是指定了要设置的环境变量的范围，这里是 "),e("code",null,"[System.EnvironmentVariableTarget]::Process"),n("，表示将更改应用于当前进程。")])])])])],-1),C=e("hr",null,null,-1),S={href:"https://zhuanlan.zhihu.com/p/149796622",target:"_blank",rel:"noopener noreferrer"},j=e("hr",null,null,-1),F=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 更新源"),n(`
`),e("span",{class:"token function"},"apt"),n(` update
`),e("span",{class:"token comment"},"# 安装 Python3"),n(`
`),e("span",{class:"token function"},"apt"),n(),e("span",{class:"token function"},"install"),n(` python3-pip
`),e("span",{class:"token comment"},"# 验证"),n(`
pip `),e("span",{class:"token parameter variable"},"-V"),n(`
python3 `),e("span",{class:"token parameter variable"},"-V"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),T=e("p",null,"修改默认 Python 版本",-1),L={href:"https://blog.csdn.net/White_Idiot/article/details/78240298",target:"_blank",rel:"noopener noreferrer"},N=e("hr",null,null,-1),M=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 删除原来的软链接"),n(`
`),e("span",{class:"token function"},"rm"),n(` /usr/bin/python3
`),e("span",{class:"token comment"},"# 添加新的软链接"),n(`
`),e("span",{class:"token function"},"ln"),n(),e("span",{class:"token parameter variable"},"-s"),n(` /root/anaconda3/envs/py310/bin/python /usr/bin/python3
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),R=t(`<hr><h2 id="pip-操作" tabindex="-1"><a class="header-anchor" href="#pip-操作"><span>pip 操作</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 将包安装到指定路径(示例)</span>
pip <span class="token function">install</span> <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple  pygame <span class="token parameter variable">--target</span><span class="token operator">=</span>C:/Users/233/AppData/Local/Programs/Python/Python38/Lib/site-packages
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="离线迁移-python-库" tabindex="-1"><a class="header-anchor" href="#离线迁移-python-库"><span>离线迁移 python 库</span></a></h3>`,5),V={href:"https://stackoverflow.com/questions/11091623/how-to-install-packages-offline",target:"_blank",rel:"noopener noreferrer"},U={href:"https://pip.pypa.io/en/stable/cli/pip_download/",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>要在一台断网的机器上安装 python 库的话, 可以现在一台联网的机子上下载所需的 whl 包, 然后拷贝到断网机器中来安装</p><blockquote><p>PS: 两台机器需要有<mark>相同的系统以及相同的 python 以及 pip 版本</mark></p></blockquote><p>对于需要安装的库可以现在联网的机器上新建并 CD 到一个空目录, 然后执行如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> pip 
<span class="token builtin class-name">cd</span> pip
pip download pip
<span class="token function">mkdir</span> wheel
<span class="token builtin class-name">cd</span> wheel
pip download wheel
<span class="token function">mkdir</span> <span class="token punctuation">[</span>pkg_name<span class="token punctuation">]</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">[</span>pkg_name<span class="token punctuation">]</span>
pip download <span class="token punctuation">[</span>pkg_name<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这会在当前命令行目录下新建一堆包目录, 每个包目录都尤其相关的 whl 依赖, 将这些目录拷贝到离线主机的某个目录中, 并在 powershell 中 cd 到该目录, 运行如下命令即可安装这些包</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code><span class="token variable">$packages</span> = <span class="token function">Get-ChildItem</span> <span class="token operator">-</span>Directory
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$package</span> in <span class="token variable">$packages</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$package_name</span> = <span class="token variable">$package</span><span class="token punctuation">.</span>Name
    <span class="token variable">$package_path</span> = <span class="token variable">$package</span><span class="token punctuation">.</span>FullName
    <span class="token function">Write-Host</span> <span class="token string">&quot;Install package: <span class="token variable">$package_name</span>&quot;</span>
    <span class="token function">Write-Host</span> <span class="token string">&quot;Package path: <span class="token variable">$package_path</span>&quot;</span>
    pip install <span class="token operator">--</span>no-index <span class="token operator">--</span><span class="token function">find-links</span> <span class="token variable">$package_path</span> <span class="token variable">$package_name</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>--no-index</code>: 忽略包索引(只查看 <code>--find-links URL</code>)</li><li><code>--find-links</code>: <ul><li>如果是 html 文件的 URL 或路径，则解析指向存档的链接，例如 sdist (.tar.gz) 或wheel (.whl) 文件。</li><li>如果是本地路径或 file:// URL，则在目录列表中查找档案。</li><li>不支持指向 VCS 项目 URL 的链接</li></ul></li></ul><p><img src="http://cdn.ayusummer233.top/DailyNotes/202310120949022.png" alt="image-20231010155816398"></p><p>要逐个包安装的话也是如此:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>pip install <span class="token operator">--</span>no-index <span class="token operator">--</span><span class="token function">find-links</span> <span class="token operator">/</span>path/to/download/<span class="token function">dir</span><span class="token operator">/</span> <span class="token namespace">[pkg_name]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202310101537336.png" alt="image-20231010153724106"></p><hr><p>PS: 上述是逐个梳理依赖的情况, 如果有完整的 requirements 的话就比较方便了, 首先是在联网主机上下载这些依赖</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>pip download <span class="token operator">-</span>r <span class="token punctuation">.</span>\\requirements<span class="token punctuation">.</span>txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202310120939547.png" alt="image-20231010160410354"></p><p>将该目录拷贝到离线主机上后执行如下命令</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>pip install <span class="token operator">--</span>no-index <span class="token operator">--</span><span class="token function">find-links</span> <span class="token namespace">[targer_path]</span> <span class="token operator">-</span>r <span class="token namespace">[requirements.txt_path]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202310120938543.png" alt="image-20231010160725345"></p><hr><h2 id="换源操作" tabindex="-1"><a class="header-anchor" href="#换源操作"><span>换源操作</span></a></h2>`,20),J={href:"https://github.com/winrey/EasyConnectedInChina",target:"_blank",rel:"noopener noreferrer"},H=t(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 单独使用</span>
py <span class="token operator">-</span><span class="token number">3.8</span> <span class="token operator">-</span>m pip install <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple opencc  
pip install <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple opencc  

<span class="token comment"># 通过文件安装依赖</span>
py <span class="token operator">-</span><span class="token number">3.8</span> <span class="token operator">-</span>m pip install <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt

pip install <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt

<span class="token comment"># 更新 pip</span>
py <span class="token operator">-</span><span class="token number">3.8</span> <span class="token operator">-</span>m pip install <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple <span class="token operator">-</span><span class="token operator">-</span>upgrade pip

pip install <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>tuna<span class="token punctuation">.</span>tsinghua<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>simple <span class="token operator">-</span><span class="token operator">-</span>upgrade pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>镜像源地址 <ul><li>阿里云<br> https://mirrors.aliyun.com/pypi/simple/</li><li>中国科技大学<br> https://pypi.mirrors.ustc.edu.cn/simple/</li><li>豆瓣(douban)<br> http://pypi.douban.com/simple/</li><li>清华大学<br> https://pypi.tuna.tsinghua.edu.cn/simple/</li><li>中国科学技术大学<br> http://pypi.mirrors.ustc.edu.cn/simple/</li></ul></li></ul><blockquote><ul><li><p>补充:将包装到指定路径:</p><div class="language-Python line-numbers-mode" data-ext="Python" data-title="Python"><pre class="language-Python"><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple  pygame --target=C:/Users/233/AppData/Local/Programs/Python/Python38/Lib/site-packages
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></blockquote><h4 id="源地址" tabindex="-1"><a class="header-anchor" href="#源地址"><span>源地址</span></a></h4><ul><li><p>官方源</p><p>https://pypi.python.org/simple</p></li><li><p>阿里云</p><p>https://mirrors.aliyun.com/pypi/simple/</p></li><li><p>中国科技大学</p><p>https://pypi.mirrors.ustc.edu.cn/simple/</p></li><li><p>豆瓣(douban)</p><p>http://pypi.douban.com/simple/</p></li><li><p>清华大学</p><p>https://pypi.tuna.tsinghua.edu.cn/simple/</p></li><li><p>中国科学技术大学</p><p>http://pypi.mirrors.ustc.edu.cn/simple/</p></li></ul><hr><h4 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h4><h5 id="方法一-临时使用" tabindex="-1"><a class="header-anchor" href="#方法一-临时使用"><span>方法一：临时使用</span></a></h5><p>直接在pip后加-i后跟这次使用的源即可，例：</p><pre><code>pip install web.py -i https://mirrors.aliyun.com/pypi/simple/
</code></pre><p>指令中的网址为上方的源地址。</p><blockquote><p>如果出现带有<code>trusted-host</code>字样的报错，这是由源不为 https 协议导致的，使用：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> web.py <span class="token parameter variable">-i</span> http://pypi.douban.com/simple --trusted-host pypi.douban.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>添加信任主机即可。</p></blockquote><hr><h5 id="方法二-更改默认源" tabindex="-1"><a class="header-anchor" href="#方法二-更改默认源"><span>方法二：更改默认源</span></a></h5><p>可以使用</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 获取当前默认源</span>
pip config get global.index-url
<span class="token comment"># 设置默认源</span>
pip config <span class="token builtin class-name">set</span> global.index-url xxxx
<span class="token comment"># 例如更改为清华源</span>
pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple/
<span class="token comment"># 改回官方源</span>
pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.python.org/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来设置 <code>xxxx</code> 源</p><p>查看当前 pip 配置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip config list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205262004901.png" alt="image-20220526200452483"></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 备份</span>
global.index-url<span class="token operator">=</span><span class="token string">&#39;https://pypi.tuna.tsinghua.edu.cn/simple&#39;</span>
install.trusted-host<span class="token operator">=</span><span class="token string">&#39;pypi.tuna.tsinghua.edu.cn&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>创建或修改配置文件(一般都是创建)</p><ul><li><p>linux与mac的设置的文件在 <code>~/.pip/pip.conf</code>，</p></li><li><pre><code>vim ~/.pip/pip.conf
</code></pre></li><li><p>windows在 <code>%HOMEPATH%\\pip\\pip.ini</code></p></li><li><p>如果没有创建即可。</p></li></ul><p>更改内容：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[global]
index-url = https://mirrors.aliyun.com/pypi/simple/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[global]
index-url = http://pypi.douban.com/simple
[install]
trusted-host=pypi.douban.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件中的网址为上方的源地址。 刚刚下面的内容是http协议源的实例。需要添加信任。 保存退出即可。</p><hr><h5 id="方法三-python代码更改安装源" tabindex="-1"><a class="header-anchor" href="#方法三-python代码更改安装源"><span>方法三：python代码更改安装源</span></a></h5><p>临时使用其他源安装软件包的python脚本如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/python</span>
 
<span class="token keyword">import</span> os
 
package <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">&quot;Please input the package which you want to install!\\n&quot;</span><span class="token punctuation">)</span>
command <span class="token operator">=</span> <span class="token string">&quot;pip install %s -i https://mirrors.aliyun.com/pypi/simple/&quot;</span> <span class="token operator">%</span> package
<span class="token comment"># http源的代码实例如下</span>
<span class="token comment"># command = &quot;pip install %s -i http://pypi.mirrors.ustc.edu.cn/simple --trusted-host pypi.mirrors.ustc.edu.cn&quot; % package</span>
os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="环境-依赖版本管理工具" tabindex="-1"><a class="header-anchor" href="#环境-依赖版本管理工具"><span>环境/依赖版本管理工具</span></a></h2><hr><h3 id="virtual-environment" tabindex="-1"><a class="header-anchor" href="#virtual-environment"><span>virtual environment</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装 virtualenv</span>
pip <span class="token function">install</span> virtualenv

<span class="token comment"># 使用 virtualenv 创建虚拟环境</span>
virtualenv <span class="token parameter variable">-p</span> python3 <span class="token function">env</span>

<span class="token comment"># 激活虚拟环境(Windows)</span>
.<span class="token punctuation">\\</span>env<span class="token punctuation">\\</span>Scripts<span class="token punctuation">\\</span>activate

<span class="token comment"># 激活虚拟环境(Linux)</span>
<span class="token builtin class-name">source</span> env/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里的 <code>-p python3</code> 中的 <code>python3</code> 具体会创建什么版本的 python 环境, 只需要在当前命令行中 <code>python3 -V</code> 看一下就知道了</p><p>相应的要创建什么版本的 python 环境, 也可以直接将 python3 环境指定环境 python 解释器的路径, 例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>virtualenv <span class="token parameter variable">-p</span> /usr/bin/python3.11 <span class="token function">env</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>PS: 使用 conda 环境的 python 创建虚拟环境时最好进入 <code>conda activate [env_name]</code> 然后再使用 <code>virtualenv -p python [env_name]</code> 来创建, 直接使用 conda python 路径创建可能会卡住</p></blockquote><ul><li><p>在 Win 中对应环境变量中路径下匹配到的首个 <code>python.exe</code>, 相应的 <code>python3</code> 就对应的是第一个匹配到的 <code>python3.exe</code>, 可以使用如下命令确认:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>python <span class="token operator">-</span>V
python3 <span class="token operator">-</span>V

python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>executable<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202311091447843.png" alt="image-20231109144745689"></p></li><li><p>在 Linux 中对应的即为 <code>/usr/bin/python</code> 符号链接指向的 python 程序, linux 中要修改的话修改相应 <code>/usr/bin/pythonxx</code> 符号链接对应的 python 程序路径即可</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202311091451909.png" alt="image-20231109145155632"></p></li></ul></blockquote><hr><h3 id="pipenv" tabindex="-1"><a class="header-anchor" href="#pipenv"><span>Pipenv</span></a></h3><blockquote><p>这里记录的是 ubuntu 下的配置<br> Windows 的话 Pycharm 中有自带的 Pipenv 包</p></blockquote>`,42),O={href:"https://www.w3cschool.cn/article/94449206.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://laomeinote.com/4-points-need-to-be-noticed-about-pipenv-usage-in-wsl-ubuntu-18.04",target:"_blank",rel:"noopener noreferrer"},z={href:"https://pipenv.pypa.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},$={href:"https://docs.python.org/3/tutorial/venv.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://pipenv.pypa.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://pip.pypa.io/en/stable/",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://docs.python.org/3/library/venv.html",target:"_blank",rel:"noopener noreferrer"},Q=t(`<p>虚拟环境是一个自包含的目录树，其中包含针对特定 Python 版本的 Python 安装，以及许多其他包。</p><p>安装 <code>pipenv</code> 模块:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> pipenv
pip insatll pipenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cd</code> 命令切换到需要安装虚拟环境的目录安装虚拟环境(如果当前目录下没有 <code>Pipfile</code> 则会先生成 <code>Pipfile</code>, 如果有的话便会继续安装虚拟环境):</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pipenv <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>Pipfile</code> 中将 <code>[[source]]</code> 区域下的 <code>url</code> 改为国内的源</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 华为镜像</span>
https://repo.huaweicloud.com/repository/pypi/simple
<span class="token comment"># 阿里镜像</span>
https://mirrors.aliyun.com/pypi/simple
<span class="token comment"># 官方源</span>
https://pypi.python.org/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202111142217965.png" alt="image-20211114221709756"></p><p>如果默认生成的 <code>Pipfile</code> 中的包特别多, 那么这条命令会执行很长时间且没有 log, 这将会是一个很折磨的过程(</p></blockquote><p>启动虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pipenv shell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过 <code>exit</code> 退出虚拟环境</p><hr><h3 id="poetry" tabindex="-1"><a class="header-anchor" href="#poetry"><span>Poetry</span></a></h3>`,11),X={href:"https://python-poetry.org/",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/python-poetry/poetry",target:"_blank",rel:"noopener noreferrer"},ee=t('<hr><p>Poetry 是 Python 的依赖管理器</p><p>Poetry 可以帮助您声明、管理和安装 Python 项目的依赖项，确保到处都有正确的 stack。</p><p>支持 python 3.7 +</p><hr><h4 id="系统需求" tabindex="-1"><a class="header-anchor" href="#系统需求"><span>系统需求</span></a></h4><p>需求 Python 2.7 或 3.5+. 支持跨平台, 在 Windows, Linux, OSX 系统上都可以同样出色地运行;</p><blockquote><p>Python 2.7 以及 3.5 后续版本不再支持, 需要升级 Python 版本<br> 个人建议 Python 3.8 以上, 因为用 Python 3.7.3 安装报错了</p></blockquote><hr><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h4>',10),ne={href:"https://python-poetry.org/docs/#windows-powershell-install-instructions",target:"_blank",rel:"noopener noreferrer"},ae=e("hr",null,null,-1),se=e("p",null,"Poetry 提供了一个自定义的安装程序, 通过解构 Poetry 的依赖关系, 将 Poetry 与系统的其他部分隔离开",-1),te=e("hr",null,null,-1),le=e("p",null,[e("code",null,"osx / linux / bashonwindows install instructions"),n(":")],-1),ie=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-sSL"),n(" https://install.python-poetry.org "),e("span",{class:"token operator"},"|"),n(` python -
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),oe=e("blockquote",null,[e("p",null,"如果报错"),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208101916266.png",alt:"image-20220810191651104"})]),e("p",null,[n("则可通过 "),e("code",null,"--insecure"),n(" 参数来放弃验证")]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-sSL"),n(),e("span",{class:"token parameter variable"},"--insecure"),n(" https://install.python-poetry.org "),e("span",{class:"token operator"},"|"),n(` python -
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208101919959.png",alt:"image-20220810191920848"})]),e("hr"),e("p",null,[n("如果出现 "),e("code",null,"syntax error"),n(" 那么大概是 Python 版本比较低, 可以安装 python3.8 及以上版本后使用")]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-sSL"),n(),e("span",{class:"token parameter variable"},"--insecure"),n(" https://install.python-poetry.org "),e("span",{class:"token operator"},"|"),n(` python3 -
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202209132050127.png",alt:"image-20220913205028516"})])],-1),pe=e("p",null,[n("打开 "),e("code",null,"~/.bashrc"),n(": 将 poetry 所在目录添加到该配置文件中")],-1),re=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"export"),n(),e("span",{class:"token assign-left variable"},[e("span",{class:"token environment constant"},"PATH")]),e("span",{class:"token operator"},"="),e("span",{class:"token string"},[n('"/root/.local/bin:'),e("span",{class:"token environment constant"},"$PATH"),n('"')]),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),ce=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 重载配置文件"),n(`
`),e("span",{class:"token builtin class-name"},"source"),n(` ~/.bashrc
`),e("span",{class:"token comment"},"# 查看 poetry 版本"),n(`
poetry `),e("span",{class:"token parameter variable"},"-V"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),de=e("blockquote",null,[e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208101927167.png",alt:"image-20220810192714020"})])],-1),ue=e("hr",null,null,-1),he=e("p",null,[e("code",null,"windows powershell install instructions"),n(":")],-1),me=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[e("span",{class:"token punctuation"},"("),e("span",{class:"token function"},"Invoke-WebRequest"),n(),e("span",{class:"token operator"},"-"),n("Uri https:"),e("span",{class:"token operator"},"/"),e("span",{class:"token operator"},"/"),n("install"),e("span",{class:"token punctuation"},"."),n("python-poetry"),e("span",{class:"token punctuation"},"."),n("org "),e("span",{class:"token operator"},"-"),n("UseBasicParsing"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),n("Content "),e("span",{class:"token punctuation"},"|"),n(" python "),e("span",{class:"token operator"},"-"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),ve=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202205270657858.png",alt:"image-20220527065741632"})],-1),be=e("blockquote",null,[e("p",null,[n("上图中使用的是旧版的 "),e("code",null,"1.x"),n(" 版本的安装链接: "),e("code",null,"https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py"),n(", 新版本推荐使用 "),e("code",null,"https://install.python-poetry.org"),n(" 来安装")]),e("p",null,[e("mark",null,"建议在安装Python之前系统优先的Python不要是conda环境, 也就是说最好系统优先的 Python 环境是自己手动安装的标准 Python 环境")]),e("p",null,"PS: 因为我没装标准Python环境直接用 conda 出问题了, poetry 安装位置会乱飞还会找不到dll"),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208041015646.png",alt:"image-20220804101533439"})]),e("p",null,[n("使用 "),e("code",null,"poetry --version"),n(" 报错的话需要手动加下环境变量, 如上图所示的目录加到系统变量的 "),e("code",null,"path"),n(" 变量中即可")]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208041018136.png",alt:"image-20220804101836027"})]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208041017345.png",alt:"image-20220804101729257"})]),e("hr"),e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[n("urllib"),e("span",{class:"token punctuation"},"."),n("error"),e("span",{class:"token punctuation"},"."),n("URLError: <urlopen error unknown url "),e("span",{class:"token function"},"type"),n(`: https>
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,"如果出现以上错误, 那可能是因为默认 Python 版本比较低, 建议使用 3.8 以上的版本")],-1),ge=e("p",null,[n("poetry 会自动添加环境变量, 安装完后重启 "),e("code",null,"powershell"),n(", 检查下 poetry 版本:")],-1),ke=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[n("poetry "),e("span",{class:"token operator"},"--"),n(`version
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),ye=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202205270701015.png",alt:"image-20220527070102934"})],-1),Ee=e("hr",null,null,-1),_e=e("p",null,"安装 pipx(需要 pip 19.0 及以上版本)",-1),fe=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[n("pip install "),e("span",{class:"token operator"},"--"),n(`user pipx
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),xe=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202403191137749.png",alt:"image-20240319113705723"})],-1),Ae=e("p",null,"可以看到最后有 warning 提示当前没有添加 Path, 可以 cd 到对应目录然后运行",-1),Be=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[e("span",{class:"token punctuation"},"."),n("\\pipx"),e("span",{class:"token punctuation"},"."),n(`exe ensurepath
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),we=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202403191139344.png",alt:"image-20240319113958368"})],-1),Pe=e("hr",null,null,-1),qe=e("p",null,"安装完 pipx 后可以通过 pipx 安装 poetry(记得重启 powershell 以更新环境变量)",-1),De=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,`pipx install poetry
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Ce=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202403191144311.png",alt:"image-20240319114404568"})],-1),Se=e("hr",null,null,-1),je=e("hr",null,null,-1),Fe=e("h4",{id:"配置文件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#配置文件"},[e("span",null,"配置文件")])],-1),Te={href:"https://python-poetry.org/docs/configuration/",target:"_blank",rel:"noopener noreferrer"},Le=t(`<hr><ul><li>macOS: <code>~/Library/Application Support/pypoetry</code></li><li>Windows: <code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\pypoetry</code></li></ul><p>可以通过:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>poetry config virtualenvs<span class="token punctuation">.</span>in-project true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来让 poetry 默认在项目根目录下创建 <code>venv</code> 作为虚拟环境目录, 或者直接写配置文件:</p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">virtualenvs</span><span class="token punctuation">]</span>
<span class="token key property">in-project</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此项配置默认为 <code>false</code></p><p>若在配置此项之前创建了虚拟环境, windows 下应该在 <code>C:\\Users\\用户名\\AppData\\Local\\pypoetry\\Cache\\virtualenvs</code> 目录下, 将其删除后重新在项目根目录下 <code>poetry install</code> 即可在项目根目录下创建 <code>.venv</code> 作为虚拟环境目录</p></blockquote><hr><h5 id="pyproject-toml" tabindex="-1"><a class="header-anchor" href="#pyproject-toml"><span>pyproject.toml</span></a></h5><p><code>换源</code></p>`,10),Ne={href:"https://python-poetry.org/docs/pyproject/",target:"_blank",rel:"noopener noreferrer"},Me=t(`<p>Poetry 默认配置从 PyPI 查询依赖包, 如果想要使用私仓(或是镜像)的话需要如如下配置</p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">tool.poetry.source</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;private&quot;</span>
<span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">&quot;http://example.com/simple&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>例如:</p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">tool.poetry.source</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;aliyun&quot;</span>
<span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">&quot;http://mirrors.aliyun.com/pypi/simple&quot;</span>
<span class="token key property">default</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">tool.poetry.source</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;tsinghua&quot;</span>
<span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple/&quot;</span>
<span class="token key property">default</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h4><hr><h5 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖"><span>安装依赖</span></a></h5>`,7),Re={href:"http://yun.win80.net/portal/article/index/id/6627/cid/2.html",target:"_blank",rel:"noopener noreferrer"},Ve={href:"https://bbs.huaweicloud.com/blogs/317789",target:"_blank",rel:"noopener noreferrer"},Ue={href:"https://juejin.cn/post/7013280966852476941",target:"_blank",rel:"noopener noreferrer"},Ie=t(`<p>对于一个用 poetry 设置 python 环境的项目, 其根目录下有 poetry 的<code>pyproject.toml</code> 即可通过 <code>poetry install</code> 来安装该项目所需的依赖, 如果发现卡主或是其他问题, 可以使用 <code>poetry -vvv install</code> 以在安装依赖时查看更详细的调试信息</p><hr><p>可以在 <code>pyproject.toml</code> 的 <code>tool.poetry.dependencies</code> 区域指明依赖版本</p><p><img src="http://cdn.ayusummer233.top/img/202205270737225.png" alt="image-20220527073752137"></p><p>也可以通过 <code>poetry add</code> 来安装依赖</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>poetry add numpy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h5 id="使用虚拟环境" tabindex="-1"><a class="header-anchor" href="#使用虚拟环境"><span>使用虚拟环境</span></a></h5><p>默认情况下, poetry 会在 <code>{cache-dir}/virtualenvs</code> (<code>{cache-dir}\\virtualenvs</code> on Windows)目录下创建一个虚拟环境:</p><p><img src="http://cdn.ayusummer233.top/img/202205270746721.png" alt="image-20220527074613612"></p><p>如果先前设置了 <code>poetry config virtualenvs.in-project true</code> 的话执行 <code>poetry install</code> 安装依赖则会装在项目根目录的 <code>.venv</code> 里</p><p>激活虚拟环境: <code>cd</code> 进入 <code>.venv</code> 然后使用 <code>poetry shell</code> 激活虚拟环境</p><hr><h5 id="结合-conda-环境使用" tabindex="-1"><a class="header-anchor" href="#结合-conda-环境使用"><span>结合 conda 环境使用</span></a></h5><p>poetry 可以直接使用 conda 环境而不单独创建虚拟环境</p><p>只需要先 activate 对应 conda 环境, 然后把 <code>pyproject.toml</code> 中的 python 版本对其当前 conda 环境版本即可</p><p>此时使用 <code>poetry shell</code> 会输出 <code>Virtual environment already activated: xxxxxx</code></p><p>不过当然也可以使用 conda 环境来创建虚拟环境, 只需要使用 <code>poetry env use 对应conda环境的python.exe路径</code> 即可利用该 conda 环境创建虚拟环境</p><h6 id="在当前-conda-环境的-bin-目录中找不到-activate-脚本导致环境激活失败-ubuntu" tabindex="-1"><a class="header-anchor" href="#在当前-conda-环境的-bin-目录中找不到-activate-脚本导致环境激活失败-ubuntu"><span>在当前 conda 环境的 <code>bin</code> 目录中找不到 activate 脚本导致环境激活失败(ubuntu)</span></a></h6><p>在该 conda 环境的 bin 目录下新建一个 activate 文件, 写入如下代码然后重新 poetry shell 即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token assign-left variable">_CONDA_ROOT</span><span class="token operator">=</span><span class="token string">&quot;/root/anaconda3/envs/xxx&quot;</span>	<span class="token comment"># 该 conda 环境根目录</span>
<span class="token comment"># Copyright (C) 2012 Anaconda, Inc</span>
<span class="token comment"># SPDX-License-Identifier: BSD-3-Clause</span>
<span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$_CONDA_ROOT</span>/etc/profile.d/conda.sh&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">return</span> <span class="token variable">$?</span>
conda activate <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>奇怪的是虽然没有 activate 脚本, 但是直接 conda activate 是有用的</p></blockquote><hr><h4 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h4><h5 id="failed-to-create-the-collection-prompt-dismissed" tabindex="-1"><a class="header-anchor" href="#failed-to-create-the-collection-prompt-dismissed"><span>Failed to create the collection: Prompt dismissed..</span></a></h5>`,25),Je={href:"https://github.com/python-poetry/poetry/issues/2692",target:"_blank",rel:"noopener noreferrer"},He={href:"https://blog.frank-mich.com/python-poetry-1-0-0-private-repo-issue-fix/",target:"_blank",rel:"noopener noreferrer"},Oe=t(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># test.py</span>
<span class="token keyword">import</span> keyring
<span class="token keyword">print</span><span class="token punctuation">(</span>keyring<span class="token punctuation">.</span>util<span class="token punctuation">.</span>platform_<span class="token punctuation">.</span>config_root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>poetry run python test.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开输出的文件目录(不存在则创建), 新建一个 <code>keyringrc.cfg</code>, 填入</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[backend]                                    
default-keyring=keyring.backends.fail.Keyring
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="卡-keyring" tabindex="-1"><a class="header-anchor" href="#卡-keyring"><span>卡 keyring</span></a></h5>`,6),We={href:"https://github.com/python-poetry/poetry/issues/6050",target:"_blank",rel:"noopener noreferrer"},ze=t(`<p>有时候 <code>poetry install</code> 会一只卡 pending, 此时需要查看一些调试信息, 可以使用 <code>poetry -vvv install </code> 来查看更多运行时信息, 如果发现是卡在 keyring 上, 可以运行如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHON_KEYRING_BACKEND</span><span class="token operator">=</span>keyring.backends.null.Keyring
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后重新 <code>poetry -vvv install</code> 即可</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202404151517164.png" alt="企业微信截图_17131654242132"></p><hr><h5 id="python-版本不对" tabindex="-1"><a class="header-anchor" href="#python-版本不对"><span>python 版本不对</span></a></h5><p>比如这个仓库需要 <code>python 3.10</code> 以上的 python 版本, 这里虽然我全局 python 目前是 3.10, 但是 poetry 当时是 python 3.8 版本安装的, 使用了当时全局的 python 3.8 环境</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202405072246932.png" alt="image-20240507224630840"></p><p>因此这里需要将 poetry 的默认 python 版本指向 python3.10</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看 poetry 当前使用的 python 版本(在带 pyproject.toml 的目录下执行)</span>
poetry <span class="token function">env</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202405072301117.png" alt="image-20240507230153035"></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 为 poetry 指定需要使用的 python 环境</span>
poetry <span class="token function">env</span> use <span class="token punctuation">[</span>python可执行程序路径<span class="token punctuation">]</span>
<span class="token comment"># PS: 如果需要使用的就是当前全局的 python 的话也可以直接</span>
poetry <span class="token function">env</span> use python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202405072303970.png" alt="image-20240507230346854"></p><hr><h3 id="pdm" tabindex="-1"><a class="header-anchor" href="#pdm"><span>PDM</span></a></h3>`,15),$e={href:"https://github.com/pdm-project/pdm",target:"_blank",rel:"noopener noreferrer"},Ge={href:"https://frostming.com/2020/02-28/pdm-introduction/",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://github.com/pdm-project/pdm/blob/main/README_zh.md",target:"_blank",rel:"noopener noreferrer"},Ye=e("p",null,"官方文档已经讲得很详细了, 这里摘录下来方便个人阅读",-1),Qe={href:"https://networm.me/2022/02/13/python-in-continuous-integration/#pdm",target:"_blank",rel:"noopener noreferrer"},Xe=e("blockquote",null,[e("p",null,"PDM 是由 Poetry 开发组的成员开发的( •̀ ω •́ )✧")],-1),Ze=e("hr",null,null,-1),en=e("h4",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述"},[e("span",null,"概述")])],-1),nn=e("p",null,[n("PDM 旨在成为下一代 Python 软件包管理工具。它最初是为个人兴趣而诞生的。如果你觉得 "),e("code",null,"pipenv"),n(" 或者 "),e("code",null,"poetry"),n(" 用着非常好，并不想引入一个新的包管理器，那么继续使用它们吧；但如果你发现有些东西这些 工具不支持，那么你很可能可以在 "),e("code",null,"pdm"),n(" 中找到。")],-1),an={href:"https://www.python.org/dev/peps/pep-0582",target:"_blank",rel:"noopener noreferrer"},sn=t(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>foo
    __pypackages__
        3.8
            lib
                bottle
    myscript.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),tn=e("code",null,"__pypackages__",-1),ln=e("code",null,"npm",-1),on=e("code",null,"node_modules",-1),pn={href:"https://www.python.org/dev/peps/pep-0582/#specification",target:"_blank",rel:"noopener noreferrer"},rn=e("hr",null,null,-1),cn=e("h4",{id:"主要特性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#主要特性"},[e("span",null,"主要特性")])],-1),dn={href:"https://www.python.org/dev/peps/pep-0582",target:"_blank",rel:"noopener noreferrer"},un=e("li",null,"一个简单且相对快速的依赖解析器，特别是对于大的二进制包发布。",-1),hn={href:"https://www.python.org/dev/peps/pep-0517",target:"_blank",rel:"noopener noreferrer"},mn=e("li",null,"灵活且强大的插件系统",-1),vn={href:"https://www.python.org/dev/peps/pep-0621",target:"_blank",rel:"noopener noreferrer"},bn={href:"https://pnpm.io/motivation#saving-disk-space-and-boosting-installation-speed",target:"_blank",rel:"noopener noreferrer"},gn=e("hr",null,null,-1),kn=e("h4",{id:"为什么不用虚拟环境",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#为什么不用虚拟环境"},[e("span",null,"为什么不用虚拟环境")])],-1),yn=e("p",null,"现在大部分的 Python 包管理器也同时管理虚拟环境，这主要是为了隔离项目开发环境。但如果涉及到虚拟 环境嵌套虚拟环境的时候，问题就来了：你可能用一个虚拟环境的 Python 安装了某个虚拟环境管理工具， 然后又用这个工具去创建更多虚拟环境。当某一天你升级了新版本的 Python 你必须一个一个去检查这些 虚拟环境，没准哪个就用不了了。",-1),En={href:"https://www.python.org/dev/peps/pep-0582",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://github.com/David-OConnor/pyflow",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://www.python.org/dev/peps/pep-0517",target:"_blank",rel:"noopener noreferrer"},xn=e("hr",null,null,-1),An=e("h4",{id:"安装-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-1"},[e("span",null,"安装")])],-1),Bn={href:"https://github.com/pdm-project/pdm/blob/main/README_zh.md#%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"},wn=e("hr",null,null,-1),Pn=e("p",null,"安装 PDM 需要 Python 3.7 或更高版本",-1),qn=e("blockquote",null,[e("p",null,"但是运行 PDM 没有 Python 版本要求")],-1),Dn=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-sSL"),n("  https://ghproxy.com/https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py "),e("span",{class:"token operator"},"|"),n(` python3 -
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Cn=e("p",null,[e("code",null,"使用 powershell"),n(":")],-1),Sn=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[e("span",{class:"token punctuation"},"("),e("span",{class:"token function"},"Invoke-WebRequest"),n(),e("span",{class:"token operator"},"-"),n("Uri https:"),e("span",{class:"token operator"},"/"),e("span",{class:"token operator"},"/"),n("raw"),e("span",{class:"token punctuation"},"."),n("githubusercontent"),e("span",{class:"token punctuation"},"."),n("com/pdm-project/pdm/main/"),e("span",{class:"token function"},"install-pdm"),e("span",{class:"token punctuation"},"."),n("py "),e("span",{class:"token operator"},"-"),n("UseBasicParsing"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),n("Content "),e("span",{class:"token punctuation"},"|"),n(" python "),e("span",{class:"token operator"},"-"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),jn=e("blockquote",null,[e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202301101130757.png",alt:""})]),e("p",null,"自动添加的 PATH 在用户变量中, 重启 VSCode 后可能依然无法正确识别 p"),e("p",null,"dm 命令, 此时可以手动修改环境变量, 在系统变量的 PATH 中加上上图中的相应值")],-1),Fn=e("hr",null,null,-1),Tn=e("p",null,[e("code",null,"使用 pipx"),n(":")],-1),Ln=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,`pipx install pdm
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Nn=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202205262110720.png",alt:"image-20220526211028582"})],-1),Mn=t(`<hr><h4 id="quickstart" tabindex="-1"><a class="header-anchor" href="#quickstart"><span>QuickStart</span></a></h4><p>初始化一个新的 PDM 项目:</p><p>新建一个项目文件夹, 在当前文件夹目录下打开 powershell:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>pdm init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>按照指引回答提示的问题，一个 PDM 项目和对应的<code>pyproject.toml</code>文件就创建好了。</p><p><img src="http://cdn.ayusummer233.top/img/202205262120012.png" alt="image-20220526212055852"></p><p><strong>把依赖安装到 <code>__pypackages__</code> 文件夹中</strong></p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>pdm add tk

<span class="token comment"># 删除则可用:</span>
pdm remove tk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="working-with-pep-582" tabindex="-1"><a class="header-anchor" href="#working-with-pep-582"><span>working with PEP 582</span></a></h4><p>推荐在 <code>.gitignore</code> 中忽略</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>__pypackages__/
.pdm.toml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>对于 VSCode, 可以先用命令行安装 pdm-vscode:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pdm plugin <span class="token function">add</span> pdm-vscode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完后, 在输入 <code>pdm init</code> 或者 <code>pdm use</code> 命令后会自动创建 <code>.vscode/settings.json</code></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;python.autoComplete.extraPaths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;__pypackages__/&lt;major.minor&gt;/lib&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;python.analysis.extraPaths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;__pypackages__/&lt;major.minor&gt;/lib&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>需要结合 pylance 使用的话需要在项目根目录创建一个 <code>pyrightconfig.json</code>:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;__pypackages__&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="pdm-scripts" tabindex="-1"><a class="header-anchor" href="#pdm-scripts"><span>PDM Scripts</span></a></h4><p>例如运行 <code>main.py</code> 可以使用</p>`,24),Rn=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`pdm run python main.py
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Vn=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`pdm run python main.py
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Un=e("p",null,"或者",-1),In=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"eval"),n(),e("span",{class:"token string"},[n('"'),e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),n("pdm "),e("span",{class:"token parameter variable"},"--pep582"),e("span",{class:"token variable"},")")]),n('"')]),n(`
python main.py
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Jn=e("p",null,[n("或者将 "),e("code",null,"pdm --pep582"),n(" 写到 "),e("code",null,"/root/.bash_profile"),n(" 然后再在 bash 中使用 "),e("code",null,"python main.py")],-1),Hn=e("hr",null,null,-1),On=e("h4",{id:"pdm-packer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pdm-packer"},[e("span",null,"PDM-packer")])],-1),Wn={href:"https://github.com/frostming/pdm-packer",target:"_blank",rel:"noopener noreferrer"},zn=t(`<hr><p>A PDM plugin that packs your packages into a zipapp</p><hr><p>pdm-packer requires Python &gt;=3.7</p><hr><p>安装:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pdm plugin <span class="token function">add</span> pdm-packer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205262140421.png" alt="image-20220526214016279"></p><hr><p>使用:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ pdm pack <span class="token punctuation">[</span>common-options<span class="token punctuation">]</span> <span class="token punctuation">[</span>pack-options<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Common Options:</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-h, --help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>show this help message and exit</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-v, --verbose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>-v for detailed output and -vv for more detailed</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-g, --global
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Use the global project, supply the project root with <code>-p</code> option</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-p PROJECT_PATH, --project PROJECT_PATH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Specify another path as the project root, which changes the base of pyproject.toml and <code>__pypackages__</code></p></blockquote><p><strong>Pack Options:</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-m MAIN, --main MAIN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Specify the console script entry point for the zipapp</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-o OUTPUT, --output OUTPUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Specify the output filename. By default the file name will be inferred from the project name.</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-c, --compress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Compress files with the deflate method, no compress by default</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>--pyc, --compile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Compile source into pyc files</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>--no-py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Remove the .py files in favor of .pyc files</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-i INTERPRETER, --interpreter INTERPRETER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>The Python interpreter path, default: the project interpreter</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>--exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Create an executable file. If the output file isn&#39;t given, the file name will end with .exe(Windows) or no suffix(Posix)</p></blockquote><p>See also: https://docs.python.org/3.9/library/zipapp.html</p><hr><p>示例:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Create with default name(&lt;project_name&gt;.pyz) and console_script as the __main__.py</span>
pdm pack
<span class="token comment"># Create an executable file</span>
pdm pack <span class="token parameter variable">--exe</span>
<span class="token comment"># Create with custom __main__.py and filename</span>
pdm pack <span class="token parameter variable">-o</span> app.pyz <span class="token parameter variable">-m</span> app:main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="anaconda" tabindex="-1"><a class="header-anchor" href="#anaconda"><span>Anaconda</span></a></h2><p><code>Anaconda</code> 安装完成后调起命令行会默认启动 conda 环境, 可以使用如下命令开启或关闭该项配置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 关闭自动启动conda环境</span>
conda config <span class="token parameter variable">--set</span> auto_activate_base <span class="token boolean">false</span>
<span class="token comment"># 启动自动启动conda环境</span>
conda config <span class="token parameter variable">--set</span> auto_activate_base <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>创建一个名为 <code>BigData</code>, python 版本为 3.9 的虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">-n</span> BigData <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>激活 <code>BigData</code> conda 环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda activate BigData
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202208031558796.png" alt="20211219072053"></p><p>退出当前虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda deactivate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,51),$n={href:"https://www.jianshu.com/p/f14ac62bef99",target:"_blank",rel:"noopener noreferrer"},Gn=e("br",null,null,-1),Kn={href:"https://blog.csdn.net/chenxy_bwave/article/details/119996001",target:"_blank",rel:"noopener noreferrer"},Yn=e("br",null,null,-1),Qn={href:"https://www.anaconda.com/products/individual",target:"_blank",rel:"noopener noreferrer"},Xn=e("br",null,null,-1),Zn=e("h3",{id:"windows",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#windows"},[e("span",null,"Windows")])],-1),ea=e("blockquote",null,[e("p",null,"需要注意的是, 使用 Anaconda Navigator 或者 conda 环境操作时需要关掉梯子, 否则可能会报 host 错误")],-1),na={href:"https://ayusummer-my.sharepoint.com/:f:/g/personal/233_ayusummer_onmicrosoft_com/EhGEGFxHsINMtuhCpcUlQtUBRflV21xfYIkwpbeF2-d8IQ?e=Inh6dl",target:"_blank",rel:"noopener noreferrer"},aa={href:"https://www.anaconda.com/products/individual",target:"_blank",rel:"noopener noreferrer"},sa=e("br",null,null,-1),ta=t(`<blockquote><p>需要注意的是 Anaconda 装完之后打开命令行总会自动进入 conda 环境, 可以通过更改 conda 配置来取消自动进入</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--set</span> auto_activate_base <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要设置自动进入的话将 <code>false</code> 改为 <code>true</code> 运行即可</p></blockquote><p>安装完成后打开 <code>Anaconda Navigator</code>:</p><p><img src="http://cdn.ayusummer233.top/img/202205230936469.png" alt="image-20220523093633147"></p><h4 id="anaconda-换源" tabindex="-1"><a class="header-anchor" href="#anaconda-换源"><span>Anaconda 换源</span></a></h4>`,4),la={href:"https://www.cnblogs.com/yuvejxke/p/13169172.html",target:"_blank",rel:"noopener noreferrer"},ia={href:"https://blog.csdn.net/scl52tg/article/details/120959893",target:"_blank",rel:"noopener noreferrer"},oa=t(`<ul><li><p>打开 <code>anaconda prompt</code><br><img src="http://cdn.ayusummer233.top/img/20220113131937.png" alt="20220113131937"><br><img src="http://cdn.ayusummer233.top/img/20220113132007.png" alt="20220113132007"></p></li><li><p>执行以下命令来配置清华源：</p><blockquote><p>不打开 navigator 也是完全可行的, 打开命令行就可以了, 前提是为 anaconda 配置了环境变量</p><p>只要在命令行中 <code>conda -V</code> 有版本号输出就可以了</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置清华源是为了后续使用 <code>pip</code> 命令安装 python 库时快些, 不配置换源而直接使用默认源的话在墙内容易超时报错</p><blockquote><p>中科大源:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/
conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>需要注意的是 conda 换源后会使更新 conda 的操作可能会报错</p><p>因此在更新 conda 的时候记得回复默认源</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config --remove-key channels
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看源:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--show</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202208040122840.png" alt="image-20220804012242625"></p></blockquote></li></ul><hr><h4 id="新建一个-conda-环境" tabindex="-1"><a class="header-anchor" href="#新建一个-conda-环境"><span>新建一个 conda 环境</span></a></h4><p>打开 <code>Anaconda Navigator -&gt; Environments</code> 在环境列表底部按钮中找到 <code>Create</code> 并点击</p><p><img src="http://cdn.ayusummer233.top/img/202205171533981.png" alt="image-20220517153334579"></p><p>为新环境命一个名(英文命名, 尽量简短些, 之后激活要用)</p><blockquote><p>这里选择了 Python 3.8.13, 不上 3.9 或者 3.10 主要是因为有一些三方库更新没跟上, 不一定支持 python3.9 及以上</p></blockquote><p><img src="http://cdn.ayusummer233.top/img/202205171534732.png" alt="image-20220517153442365"></p><p>在命令行中使用 conda 环境可以使用如下指令激活:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda activate 环境名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205171537691.png" alt="image-20220517153733464"></p><hr><h4 id="anaconda-navigator-升级" tabindex="-1"><a class="header-anchor" href="#anaconda-navigator-升级"><span>Anaconda Navigator 升级</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda update conda <span class="token parameter variable">-y</span>
conda update anaconda <span class="token parameter variable">-y</span>
conda update anaconda-navigator <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果进行了换源操作记得在升级前恢复默认源, 否则可能会在镜像源中找不到更新包</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config --remove-key channels
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><hr><h3 id="ubuntu" tabindex="-1"><a class="header-anchor" href="#ubuntu"><span>Ubuntu</span></a></h3>`,17),pa={href:"https://cloud.tencent.com/developer/article/1649008",target:"_blank",rel:"noopener noreferrer"},ra=e("br",null,null,-1),ca={href:"https://blog.csdn.net/chenxy_bwave/article/details/119996001",target:"_blank",rel:"noopener noreferrer"},da=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装 Anaconda</span>
<span class="token comment">#wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</span>
<span class="token comment">#bash Anaconda3-2021.11-Linux-x86_64.sh</span>
<span class="token function">wget</span> https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
<span class="token function">bash</span> Anaconda3-2022.05-Linux-x86_64.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/20211219065157.png" alt="20211219065157"></p><p>若出现 <code>段错误 (核心已转储)</code> 字样, 可以使用</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从断点处继续下载</p></blockquote><p>长按 ENTER 阅读完条款</p><p><img src="http://cdn.ayusummer233.top/img/20211219065309.png" alt="20211219065309"></p><p>yes</p><p><img src="http://cdn.ayusummer233.top/img/20211219065431.png" alt="20211219065431"></p><p>选择安装路径, 默认为 <code>/root/anaconda3</code>, 这个过程会比较长</p><p><img src="http://cdn.ayusummer233.top/img/20211219065943.png" alt="20211219065943"></p><p>yes, 执行初始化, 这将会将命令行工具 conda 添加到系统的 PATH 环境变量中。<br> 不过想要激活 Anaconda，还需要关闭并且重新打开你的 shell 或者在当前 shell 会话中输入下面的命令，来重新加载 PATH 环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以使用 <code>conda --version</code> 查看 Anaconda 版本</p><p><img src="http://cdn.ayusummer233.top/img/20211219070617.png" alt="20211219070617"></p><p>设置国内镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#设置清华镜像</span>
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
<span class="token comment">#设置bioconda</span>
conda config <span class="token parameter variable">--add</span> channels bioconda
conda config <span class="token parameter variable">--add</span> channels conda-forge
<span class="token comment">#设置搜索时显示通道地址</span>
conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个名为 <code>BigData</code>, python 版本为 3.9 的虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">-n</span> BigData <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>激活 <code>BigData</code> 虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda activate BigData
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20211219072053.png" alt="20211219072053"></p><p>退出当前虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda deactivate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21),ua={href:"https://www.jianshu.com/p/f14ac62bef99",target:"_blank",rel:"noopener noreferrer"},ha=e("br",null,null,-1),ma={href:"https://blog.csdn.net/chenxy_bwave/article/details/119996001",target:"_blank",rel:"noopener noreferrer"},va=e("br",null,null,-1),ba={href:"https://www.anaconda.com/products/individual",target:"_blank",rel:"noopener noreferrer"},ga=e("br",null,null,-1),ka=e("hr",null,null,-1),ya=e("h3",{id:"报错收集",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#报错收集"},[e("span",null,"报错收集")])],-1),Ea=e("hr",null,null,-1),_a=e("h4",{id:"check-hostname-requires-server-hostname",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#check-hostname-requires-server-hostname"},[e("span",null,[e("code",null,"check_hostname requires server_hostname")])])],-1),fa=e("li",null,[n("本来是在 "),e("code",null,"Pycharm"),n(" 中新建 "),e("code",null,"conda"),n(" 环境报的错误,接着打开 "),e("code",null,"Anaconda Navigator"),n(" 也报了相同的错误")],-1),xa={href:"https://github.com/ContinuumIO/anaconda-issues/issues/12410",target:"_blank",rel:"noopener noreferrer"},Aa=e("ul",null,[e("li",null,"关掉VPN即可解决(")],-1),Ba=e("p",null,"对于 Clash 而言可以打开此项配置",-1),wa=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202307281210626.png",alt:"image-20230719000029091"})],-1),Pa={href:"https://github.com/python/cpython/pull/26307",target:"_blank",rel:"noopener noreferrer"},qa=t('<p>开了之后就正常了:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202307281210111.png" alt="image-20230719000057721"></p><hr><h4 id="各类-httperror-相关" tabindex="-1"><a class="header-anchor" href="#各类-httperror-相关"><span>各类 <code>HTTPError</code> 相关</span></a></h4><p>我这边报错都是清华的源报错,换成阿里的源就没问题了(</p><ul><li><p><code>https://mirrors.aliyun.com/anaconda/pkgs/main/</code></p><p><img src="http://cdn.ayusummer233.top/img/20210522090710.png" alt="20210522090710"></p></li></ul><hr><h4 id="modulenotfounderror-no-module-named-pip-vendor" tabindex="-1"><a class="header-anchor" href="#modulenotfounderror-no-module-named-pip-vendor"><span><code>ModuleNotFoundError: No module named &#39;pip._vendor....&#39;</code></span></a></h4><ul><li><code>pip</code> 出问题了</li><li>在 <code>CMD.exe Prompt</code> 中执行 <code>conda update pip</code> 即可</li></ul><hr><h2 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode"><span>VSCode</span></a></h2>',11),Da={href:"https://ayusummer-my.sharepoint.com/:u:/g/personal/233_ayusummer_onmicrosoft_com/EazLjY72FsFBvNS9qfiXUNsBoncvju914TnopNKvIkyU_A?e=H46sLL",target:"_blank",rel:"noopener noreferrer"},Ca=t(`<p>用于编辑与运行 python 程序, 选择 VSCode 主要是其比较轻量, 启动比较快, 用起来比较顺手, 且插件市场庞大, 对于许多语言都有插件支持, 按需下载</p><p>比起安装 python 解释器自带的 IDLE 友好许多, 又不会像 Pycharm 一样庞大/启动慢/占资源, 作为平时写点小脚本, 小玩意儿来说完全够用</p><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h3><ul><li><p>汉化插件</p><p><img src="http://cdn.ayusummer233.top/img/202201131327282.png" alt="image-20220113132736972"></p></li><li><p>Python 相关基础插件</p><p><img src="http://cdn.ayusummer233.top/img/202201131329644.png" alt="image-20220113132900552"></p></li><li><p>jupyter 插件</p><p><img src="http://cdn.ayusummer233.top/img/202201131329984.png" alt="image-20220113132930881"></p><p>使用 Jupyter 的好处在于可以边写笔记边写代码, 如下图所示, 在笔记中可以插入代码块并运行及显示</p><p><img src="http://cdn.ayusummer233.top/img/202201131331074.png" alt="image-20220113133105876"></p></li><li><p>Markdown 插件</p><p><img src="http://cdn.ayusummer233.top/img/202201131333467.png" alt="image-20220113133332281"></p></li><li><p>命令行插件 Terminal</p><p><img src="http://cdn.ayusummer233.top/img/202201131344681.png" alt="image-20220113134443536"></p><p>用于在 VSCode 中打开 powershell 执行命令</p><p><img src="http://cdn.ayusummer233.top/img/202201131346049.png" alt="image-20220113134623777"></p><hr></li></ul><h3 id="pylance-无法加载自定义模块" tabindex="-1"><a class="header-anchor" href="#pylance-无法加载自定义模块"><span>Pylance 无法加载自定义模块</span></a></h3><p>有时 Pylance 可能会识别不了 import 导入的自定义包, 此时需要设置 VScode Pylance 的 <code>python.analysis.extraPaths</code> 属性, 加上自定义包的所在目录</p><p>可以在设置中添加:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202307281206501.png" alt="image-20230728120654244"></p><p>也可以直接在当前工作目录下新建一个 <code>.vscode/settings.json</code> 进行配置:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;python.analysis.extraPaths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;/usr/local/python37/lib/python3.7/site-packages&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以 Pylance 正常加载相关包了</p><blockquote><p>有时候可能仍旧索引不到相关模块, 那么可以将层级写深点, 不止于 <code>site-packages</code>, 而是写到模块 py 文件所在目录</p></blockquote><hr><h2 id="生成环境依赖" tabindex="-1"><a class="header-anchor" href="#生成环境依赖"><span>生成环境依赖</span></a></h2>`,14),Sa={href:"https://blog.csdn.net/pearl8899/article/details/113877334",target:"_blank",rel:"noopener noreferrer"},ja=t(`<hr><ul><li><p>生成整个当前环境的依赖</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip freeze <span class="token operator">&gt;</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>如果对项目使用了虚拟环境那么这会是一个生成项目依赖的不错的方法</p></blockquote><ul><li><p>生成当前项目的依赖</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pipreqs
pipreqs <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="pycharm" tabindex="-1"><a class="header-anchor" href="#pycharm"><span>Pycharm</span></a></h2><h3 id="pycharm-换源" tabindex="-1"><a class="header-anchor" href="#pycharm-换源"><span>Pycharm 换源</span></a></h3><p><img src="http://cdn.ayusummer233.top/img/20210522085736.png" alt="20210522085736"></p><blockquote><p>实际上这里我用的 <code>conda环境</code> ,相应的也可以在 <code>anaconda</code> 中进行换源配置</p></blockquote><hr><h3 id="快捷键" tabindex="-1"><a class="header-anchor" href="#快捷键"><span>快捷键</span></a></h3><h4 id="查找替换" tabindex="-1"><a class="header-anchor" href="#查找替换"><span>查找替换</span></a></h4><ul><li><code>Ctrl + R</code> 替换</li><li><code>Ctrl + Shift + R</code> 全局替换</li></ul><blockquote><p>无意中触发了TIM快捷键:\`\`Ctrl+Alt+F\`(文字识别)</p></blockquote><h3 id="创建文档注释脚本" tabindex="-1"><a class="header-anchor" href="#创建文档注释脚本"><span>创建文档注释脚本</span></a></h3><ul><li><p><code>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates</code></p><ul><li><p>例:Python Script</p><ul><li><p>例:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># -*- coding: utf-8 -*-
# @Time    : \${DATE} \${TIME}
# @Author  : 咸鱼型233
# @File    : \${NAME}.py
# @Software: \${PRODUCT_NAME}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul><hr><h3 id="导入自己的模块报红" tabindex="-1"><a class="header-anchor" href="#导入自己的模块报红"><span>导入自己的模块报红</span></a></h3>`,18),Fa={href:"https://blog.csdn.net/qq_30622831/article/details/80978118",target:"_blank",rel:"noopener noreferrer"},Ta=e("li",null,[n("结论: "),e("ul",null,[e("li",null,"本地路径并未被标记“源目录”")])],-1),La=e("li",null,[n("解决方案: "),e("ul",null,[e("li",null,[n("File | Settings | Build, Execution, Deployment | Console | Python Console "),e("ul",null,[e("li",null,'勾选"Add source roots to PYTHONPAT"')])]),e("li",null,"当前程序根目录右键->“Mark Directory as”->“Sources Root”")])],-1),Na=e("hr",null,null,-1),Ma=e("h3",{id:"pep8-代码规范检查",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pep8-代码规范检查"},[e("span",null,"PEP8 代码规范检查")])],-1),Ra={href:"https://blog.csdn.net/qq_36759224/article/details/89304878",target:"_blank",rel:"noopener noreferrer"},Va=e("hr",null,null,-1),Ua=e("h2",{id:"jupyterlab",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jupyterlab"},[e("span",null,"JupyterLab")])],-1),Ia=e("blockquote",null,[e("p",null,[n("接触 VSCode 的 Jupyter 插件后感觉还是 VSCode + Jupyter 比较好用, 一方面 VSCode 可以安装许多插件作为编码的辅助工具, 另一方面, 单个 "),e("code",null,".ipynb"),n(" 文件也比较方便编辑")])],-1),Ja=e("hr",null,null,-1),Ha=e("h3",{id:"简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#简介"},[e("span",null,"简介")])],-1),Oa={href:"https://zhuanlan.zhihu.com/p/87403131",target:"_blank",rel:"noopener noreferrer"},Wa=t("<li>JupyterLab是Jupyter主打的最新数据科学生产工具，某种意义上，它的出现是为了取代Jupyter Notebook。不过不用担心Jupyter Notebook会消失，JupyterLab包含了Jupyter Notebook所有功能。</li><li>JupyterLab作为一种基于web的集成开发环境，你可以使用它编写notebook、操作终端、编辑markdown文本、打开交互模式、查看csv文件及图片等功能。</li><li>可以把JupyterLab当作一种究极进化版的Jupyter Notebook。原来的单兵作战，现在是空陆空联合协作。</li><li>Jupyter有如下特点 <ul><li><strong>交互模式</strong>：Python交互式模式可以直接输入代码，然后执行，并立刻得到结果，因此Python交互模式主要是为了调试Python代码用的</li><li><strong>内核支持的文档</strong>：使你可以在可以在Jupyter内核中运行的任何文本文件(Markdown，Python，R等) 中启用代码</li><li><strong>模块化界面</strong>：可以在同一个窗口同时打开好几个notebook或文件(HTML, TXT, Markdown等等) ，都以标签的形式展示，更像是一个IDE</li><li><strong>镜像notebook输出</strong>：让你可以轻易地创建仪表板</li><li><strong>同一文档多视图</strong>：使你能够实时同步编辑文档并查看结果</li><li><strong>支持多种数据格式</strong>：你可以查看并处理多种数据格式，也能进行丰富的可视化输出或者Markdown形式输出</li><li><strong>云服务</strong>：使用Jupyter Lab连接Google Drive等服务，极大得提升生产力</li></ul></li>",4),za=e("hr",null,null,-1),$a=e("h3",{id:"使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用"},[e("span",null,"使用")])],-1),Ga=e("li",null,[e("p",null,[n("Anaconda自带,直接在"),e("code",null,"Home"),n("里"),e("code",null,"Launch"),n("即可"),e("br"),e("img",{src:"http://cdn.ayusummer233.top/img/202211072244361.png",alt:"image-20221107224451336"})])],-1),Ka=e("p",null,[n("启动完之后会发现默认启动路径是电脑"),e("code",null,"用户根目录"),n(",可以将其改到一个自己觉得合适的目录,操作如下")],-1),Ya={href:"https://blog.csdn.net/housz77/article/details/106125831",target:"_blank",rel:"noopener noreferrer"},Qa=e("strong",null,"原文链接",-1),Xa=e("li",null,[e("code",null,"Anaconda"),n("的"),e("code",null,"Environments"),n("界面用"),e("code",null,"Terminal"),n("打开默认的Python环境(也即默认安装的JupyterLab的依赖环境) "),e("img",{src:"http://cdn.ayusummer233.top/img/202211072245967.png",alt:"image-20221107224525938"})],-1),Za=e("li",null,[n("安装"),e("code",null,"zmq")],-1),es=t(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>  pip install -i https://mirrors.aliyun.com/pypi/simple/ zmq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>生成配置文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Jupyter notebook --generate-config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>若成功则会显示<code>Writing default config to: 文件路径</code></p><ul><li>打开该<code>文件路径</code>指向的文件,利用<code>Ctrl+f</code>找到<code>c.NotebookApp.notebook</code>,将其#注释删除,在<code>&#39;&#39;</code>中填入自己认为合适的启动路径</li></ul><blockquote><p>我这里是<code>C:\\Users\\233\\.jupyter\\jupyter_notebook_config.py</code></p></blockquote><ul><li>记得保存文件</li></ul></li></ul></li><li><p>再次在<code>Home</code>里<code>Launch</code>启动<code>JupyterLab</code>确认配置情况 <img src="http://cdn.ayusummer233.top/img/20210401094701.png" alt="20210401094701"></p></li></ul>`,2),ns=t(`<hr><h3 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h3><ul><li><p>环境准备</p><ul><li><p>打开<code>cmd prompt</code>或者<code>Powershell prompt</code><br><img src="http://cdn.ayusummer233.top/img/202211072246063.png" alt="image-20221107224622026"></p><ul><li><p>安装<code>npm</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple npm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>安装<code>nodejs</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>conda install -c conda-forge nodejs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul><blockquote><ul><li><strong>不要</strong>给<code>yarn</code>和<code>npm</code>换淘宝的源 <ul><li>淘宝源里没有JupyterLab相关的插件,下载插件时会<code>404</code></li></ul></li></ul></blockquote></li><li><p>安装插件</p><ul><li>在<code>JupyterLab</code>可视化界面中安装<br><img src="http://cdn.ayusummer233.top/img/202211072247385.png" alt="image-20221107224757341"></li></ul><blockquote><p>会有安装提示<code>install</code>及<code>rebuild</code>等</p></blockquote><ul><li>安装好并且<code>rebuild</code>之后若左侧栏目未正常显示该插件则先关闭<code>JupyterLab</code>再重新启动看看有没有正常加载,若仍未正常显示则可以看看下面这条</li></ul></li><li><p>反复安装与卸载插件可能会导致插件无法正常加载的错误</p><ul><li><p>错误发现:</p><ul><li><p>Anaconda中运行<code>cmd prompt</code>或者<code>Powershell prompt</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>jupyter labextension list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并回车,会给出<code>Known labextensions</code>和<code>Uninstalled core extensions</code></p><ul><li>若一个插件同时在两项中出现则其无法正常加载</li></ul></li></ul></li><li><p>错误解决方法</p><ul><li>找到<code>JupyterLab</code>插件<code>build</code>的配置文件 <ul><li>位置在 <ul><li><code>&lt;conda_root&gt;/envs/&lt;env_name&gt;/share/jupyter/lab/settings/build_config.json</code></li></ul></li><li>若<code>JupyterLab</code>的环境<code>conda</code>的默认的<code>root</code>环境,则位置在 <ul><li><code>&lt;conda_root&gt;/share/jupyter/lab/settings/build_config.json</code></li></ul></li></ul></li></ul></li></ul></li></ul><hr><h4 id="插件推荐" tabindex="-1"><a class="header-anchor" href="#插件推荐"><span>插件推荐</span></a></h4><hr><h5 id="kiteco-jupyterlab-kite" tabindex="-1"><a class="header-anchor" href="#kiteco-jupyterlab-kite"><span><code>@kiteco/jupyterlab-kite</code></span></a></h5><ul><li><p><code>Python</code>代码提示</p></li><li><p>在<code>Anaconda</code>中安装<code>Spyder</code>的时候一般会引导下载<code>Kite</code></p><ul><li><img src="http://cdn.ayusummer233.top/img/202211072249470.png" alt="image-20221107224953401"></li></ul></li><li><p>使用效果</p><ul><li><img src="http://cdn.ayusummer233.top/img/202211072249880.png" alt="image-20221107224914859"></li></ul></li><li><p>安装</p><ul><li><p><code>Prompt</code>安装</p><ul><li><p>打开<code>Anaconda</code>的<code>Prompt</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple jupyter-kite
jupyter labextension install @kiteco/jupyterlab-kite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重启<code>JupyterLab</code>即可</p></li></ul></li></ul></li></ul><hr><h3 id="快捷键-1" tabindex="-1"><a class="header-anchor" href="#快捷键-1"><span>快捷键</span></a></h3>`,10),as={href:"https://blog.csdn.net/weixin_44676081/article/details/102703646",target:"_blank",rel:"noopener noreferrer"},ss=t('<hr><h4 id="命令模式-按键-esc-开启" tabindex="-1"><a class="header-anchor" href="#命令模式-按键-esc-开启"><span>命令模式 (按键 Esc 开启)</span></a></h4><p><code>Enter</code> 转入编辑模式</p><p><code>Shift-Enter</code> 运行本单元，选中下个单元</p><p><code>Ctrl-Enter</code> 运行本单元</p><p><code>Alt-Enter</code> 运行本单元，在其下插入新单元</p><p><code>Y</code> 单元转入代码状态</p><p><code>M</code> 单元转入markdown状态</p><p><code>R</code> 单元转入raw状态</p><p><code>1</code> 设定 1 级标题</p><p><code>2</code> 设定 2 级标题</p><p><code>3</code> 设定 3 级标题</p><p><code>4</code> 设定 4 级标题</p><p><code>5</code> 设定 5 级标题</p><p><code>6</code> 设定 6 级标题</p><p><code>Up</code> 选中上方单元</p><p><code>K</code> 选中上方单元</p><p><code>Down</code> 选中下方单元</p><p><code>J</code> 选中下方单元</p><p><code>Shift-K</code> 扩大选中上方单元</p><p><code>Shift-J</code> 扩大选中下方单元</p><p><code>A</code> 在上方插入新单元</p><p><code>B</code> 在下方插入新单元</p><p><code>X</code> 剪切选中的单元</p><p><code>C</code> 复制选中的单元</p><p><code>Shift-V</code> 粘贴到上方单元</p><p><code>V</code> 粘贴到下方单元</p><p><code>Z</code> 恢复删除的最后一个单元</p><p><code>D,D</code> 删除选中的单元</p><p><code>Shift-M</code> 合并选中的单元</p><p><code>Ctrl-S</code> 文件存盘</p><p><code>S</code> 文件存盘</p><p><code>L</code> 转换行号</p><p><code>O</code> 转换输出</p><p><code>Shift-O</code> 转换输出滚动</p><p><code>Esc</code> 关闭页面</p><p><code>Q</code> 关闭页面</p><p><code>H</code> 显示快捷键帮助</p><p><code>I,I</code> 中断Notebook内核</p><p><code>0,0</code> 重启Notebook内核</p><p><code>Shift</code> 忽略</p><p><code>Shift-Space</code> 向上滚动</p><p><code>Space</code> 向下滚动</p><hr><h4 id="编辑模式-enter-键启动" tabindex="-1"><a class="header-anchor" href="#编辑模式-enter-键启动"><span>编辑模式 ( Enter 键启动)</span></a></h4><p><code>Tab</code> 代码补全或缩进</p><p><code>Shift-Tab</code> 提示</p><p><code>Ctrl-]</code> 缩进</p><p><code>Ctrl-[</code> 解除缩进</p><p><code>Ctrl-A</code> 全选</p><p><code>Ctrl-Z</code> 复原</p><p><code>Ctrl-Shift-Z</code> 再做</p><p><code>Ctrl-Y</code> 再做</p><p><code>Ctrl-Home</code> 跳到单元开头</p><p><code>Ctrl-Up</code> 跳到单元开头</p><p><code>Ctrl-End</code> 跳到单元末尾</p><p><code>Ctrl-Down</code> 跳到单元末尾</p><p><code>Ctrl-Left</code> 跳到左边一个字首</p><p><code>Ctrl-Right</code> 跳到右边一个字首</p><p><code>Ctrl-Backspace</code> 删除前面一个字</p><p><code>Ctrl-Delete</code> 删除后面一个字</p><p><code>Esc</code> 进入命令模式</p><p><code>Ctrl-M</code> 进入命令模式</p><p><code>Shift-Enter</code> 运行本单元，选中下一单元</p><p><code>Ctrl-Enter</code> 运行本单元</p><p><code>Alt-Enter</code> 运行本单元，在下面插入一单元</p><p><code>Ctrl-Shift</code>– 分割单元</p><p><code>Ctrl-Shift-Subtract</code> 分割单元</p><p><code>Ctrl-S</code> 文件存盘</p><p><code>Shift</code> 忽略</p><p><code>Up</code> 光标上移或转入上一单元</p><p><code>Down</code>光标下移或转入下一单元</p><hr>',73),ts={href:"https://blog.ja-ke.tech/2019/01/20/jupyterlab-shortcuts.html",target:"_blank",rel:"noopener noreferrer"},ls=e("hr",null,null,-1),is=e("h2",{id:"pipx",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pipx"},[e("span",null,"pipx")])],-1),os={href:"https://pypa.github.io/pipx/",target:"_blank",rel:"noopener noreferrer"},ps={href:"https://github.com/pypa/pipx",target:"_blank",rel:"noopener noreferrer"},rs=t(`<hr><h3 id="安装-2" tabindex="-1"><a class="header-anchor" href="#安装-2"><span>安装</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pipx <span class="token parameter variable">--user</span> pipx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205262032936.png" alt="image-20220526203216819"></p><p>提示需要将路径添加到 PATH, 这个可以让 pipx 来完成</p><p>首先 <code>cd</code> 到安装 pipx 的目录, 然后执行 <code>./pipx ensurepath</code>:</p><p><img src="http://cdn.ayusummer233.top/img/202205262032569.png" alt="image-20220526203255502"></p><hr><p>然后重启终端输入 pipx 看看有没有反馈信息</p><p>如果有回显信息:</p><p><img src="http://cdn.ayusummer233.top/img/202205262057504.png" alt="image-20220526205728337"></p><p>那么说明成功了</p><p>如果没有的话则需要手动将 <code>C:\\Users\\233\\AppData\\Roaming\\Python\\Python38\\Scripts</code>(以我上面安装pipx的路径为例) 添加到环境变量的 <code>PATH</code> 变量中</p><hr><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h3><p>Pipx 是一个帮助您安装和运行用 Python 编写的最终用户应用程序的工具。它大致类似于 macOS 的 brew，JavaScript 的 npx，和 Linux 的 apt。</p><p>它与 pip 密切相关。实际上，它使用 pip，但是它专注于安装和管理可以从命令行直接作为应用程序运行的 Python 包。</p><hr><h4 id="pipx-与-pip-的区别" tabindex="-1"><a class="header-anchor" href="#pipx-与-pip-的区别"><span>pipx 与 pip 的区别</span></a></h4><p>Pip 是一个通用的包安装程序，用于没有环境隔离的库和应用程序。</p><p>Pipx 是专门为应用程序安装而设计的，因为它增加了隔离性，但仍然使应用程序可以在外壳中使用: pipx 为每个应用程序及其相关包创建一个隔离的环境。</p><hr><h4 id="pipx-从什么地方安装-app" tabindex="-1"><a class="header-anchor" href="#pipx-从什么地方安装-app"><span>pipx 从什么地方安装 app</span></a></h4><p>默认情况下，pipx 使用与 pip 相同的包索引 PyPI。Pipx 还可以从所有其他来源安装 pip can，比如本地目录、 wheel、 git url 等。</p><p>Python 和 PyPI 允许开发人员使用“控制台脚本入口点”分发代码。这些入口点允许用户从命令行调用 Python 代码，有效地起到独立应用程序的作用。</p><p>Pipx 是一个工具，用于以安全、方便和可靠的方式安装和运行这些数千个包含应用程序的软件包。在某种程度上，它把 pythonpackageindex (PyPI)变成了 Python 应用程序的大型应用程序商店。并不是所有的 Python 包都有入口点，但是很多都有。</p><hr><h2 id="ubuntu-16-04-安装-python-3-8-12" tabindex="-1"><a class="header-anchor" href="#ubuntu-16-04-安装-python-3-8-12"><span>ubuntu 16.04 安装 Python 3.8.12</span></a></h2><blockquote><p>成功了但没完全成功, 不打算再在 ubuntu 16.04 LTS 上整花活了.</p><p>PS: 2022-8-5: 成功了, 详见 [Ubuntu 16.04 LTS 配置Jupyter服务](#Ubuntu 16.04 LTS 配置Jupyter服务)</p></blockquote>`,29),cs={href:"https://www.cnblogs.com/daofaziran/p/12604726.html",target:"_blank",rel:"noopener noreferrer"},ds=t(`<blockquote><p>PS: VSCode 用 <code>Python Environment Manager</code> 扩展获取最新 Python 环境也是可以的(推荐使用此项, 一键安装免配置, 懒人解法)</p><p><code>20220803 ubuntu16.04LTS Python Environment Managerv1.0.4 拉取最新 Python 装了个 3.9.13 的 conda 环境</code></p></blockquote><p>ubuntu 16.04 默认自带 Python2.7 和 Python3.5, 可以通过<code>whereis python</code> 查看</p><blockquote><p>这里选择 3.8.12 属于是保守了, 一方面考虑到 1604 有点老, 另一方面有些三方库也并没有跟上时代</p></blockquote><hr><h3 id="配置依赖环境" tabindex="-1"><a class="header-anchor" href="#配置依赖环境"><span>配置依赖环境</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="下载-python3-8-12-压缩包并解压" tabindex="-1"><a class="header-anchor" href="#下载-python3-8-12-压缩包并解压"><span>下载 Python3.8.12 压缩包并解压</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://www.python.org/ftp/python/3.8.12/Python-3.8.12.tar.xz
<span class="token comment"># 解压</span>
<span class="token function">tar</span> <span class="token parameter variable">-xf</span> Python-3.8.12.tar.xz
<span class="token comment"># 进入解压目录</span>
<span class="token builtin class-name">cd</span> Python-3.8.12
<span class="token comment"># 执行安装(这两步时间会比较长)</span>
./configure <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/python3
<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202208031533401.png" alt="image-20220803153339331"></p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 备份原来的 Python 软链接</span>
<span class="token function">mv</span> /usr/bin/python /usr/bin/python.bak
<span class="token comment"># 修改 python3 软链接</span>
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3/bin/python3 /usr/bin/python
<span class="token comment"># 验证安装</span>
python <span class="token parameter variable">-V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202208031535792.png" alt="image-20220803153520745"></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 更新 pip</span>
python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip
<span class="token comment"># 验证更新</span>
pip <span class="token parameter variable">-V</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202208031541457.png" alt="image-20220803154129388"></p></blockquote><hr><h2 id="ubuntu-16-04-lts-配置jupyter服务" tabindex="-1"><a class="header-anchor" href="#ubuntu-16-04-lts-配置jupyter服务"><span>Ubuntu 16.04 LTS 配置Jupyter服务</span></a></h2><blockquote><p><code>实验环境</code>: windows 10 使用 root 用户 远程 ubuntu 16.04 LTS 虚拟机</p></blockquote><p>直接使用 VSCode 的 <code>Python Environment Manager</code>扩展获取最新 conda 环境</p><p><img src="http://cdn.ayusummer233.top/img/202208101047205.png" alt="image-20220810104753103"></p><p>激活当前 conda 环境 <code>conda activate xxx</code></p><p>安装 <code>jupyter</code> 套件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> jupyter
pip <span class="token function">install</span> jupyterlab
pip <span class="token function">install</span> notebook
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开 VScode 的 <code>settings.json</code>,加上</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>  <span class="token property">&quot;jupyter.jupyterCommandLineArguments&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;--allow-root&quot;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="报错收集-1" tabindex="-1"><a class="header-anchor" href="#报错收集-1"><span>报错收集</span></a></h2><h3 id="error-could-not-install-packages-due-to-an-environment" tabindex="-1"><a class="header-anchor" href="#error-could-not-install-packages-due-to-an-environment"><span>ERROR: Could not install packages due to an Environment</span></a></h3>`,27),us={href:"https://i007it.com/2022/06/03/Python-Failed-to-write-executable-trying-to-use-deleteme-logic/",target:"_blank",rel:"noopener noreferrer"},hs=e("hr",null,null,-1),ms=t(`<p>如果在 VSCode 中的终端中运行安装库的命令出现类似于如下报错</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>ERROR: Could not install packages due to an Environment: <span class="token namespace">[WinError 2]</span> 系统找不到指定的文件 : xxxxxxxxx <span class="token operator">-</span>&gt; xxxxx\\\\pythonxx\\\\Scripts\\\\xxx<span class="token punctuation">.</span>exe<span class="token punctuation">.</span>deleteme
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么就是权限问题, 请使用管理员方式打开 VSCode</p>`,3);function vs(bs,gs){const s=r("ExternalLinkIcon"),p=r("Tabs");return d(),u("div",null,[m,a(p,{id:"439",data:[{id:"Windows"},{id:"ubuntu"}],active:0},{title0:l(({value:i,isActive:o})=>[n("Windows")]),title1:l(({value:i,isActive:o})=>[n("ubuntu")]),tab0:l(({value:i,isActive:o})=>[v,b,g,k,y,E,_,f,x,A,e("blockquote",null,[B,e("ul",null,[e("li",null,[e("p",null,[n("如果已经 "),e("a",w,[n("安装了 Chocolatey"),a(s)]),n(", 那么可以直接使用 "),P,n(" 来刷新当前 powershell 窗口的环境变量")]),q]),D])]),C]),tab1:l(({value:i,isActive:o})=>[e("blockquote",null,[e("p",null,[e("a",S,[n("Ubuntu安装Python3 - 知乎 (zhihu.com)"),a(s)])]),j]),F,e("ul",null,[e("li",null,[T,e("blockquote",null,[e("p",null,[e("a",L,[n("【Python】Ubuntu修改默认Python版本_remo0x的博客-CSDN博客_ubuntu更改默认python版本"),a(s)])]),N]),M])])]),_:1}),R,e("blockquote",null,[e("p",null,[e("a",V,[n("python - How to install packages offline? - Stack Overflow --- python - 如何离线安装软件包？ - 堆栈溢出"),a(s)])]),e("p",null,[e("a",U,[n("pip download - pip documentation v23.2.1 --- pip 下载 - pip 文档 v23.2.1 (pypa.io)"),a(s)])])]),I,e("blockquote",null,[e("p",null,[e("a",J,[n("winrey/EasyConnectedInChina: 汇总apt，pip，nodejs等各种工具国内镜像源和设置镜像源的方法 (github.com)"),a(s)])])]),H,e("blockquote",null,[e("p",null,[e("a",O,[n("如何开始使用 Pipenv？ | w3c笔记 (w3cschool.cn)"),a(s)])]),e("p",null,[e("a",W,[n("WSL Ubuntu 18.04上使用pipenv的4个关键点 | 老梅笔记 (laomeinote.com)"),a(s)])]),e("p",null,[e("a",z,[n("Pipenv: Python Dev Workflow for Humans — pipenv 2021.11.9 documentation (pypa.io)"),a(s)])]),e("p",null,[e("a",$,[n("12. Virtual Environments and Packages — Python 3.10.0 documentation"),a(s)])])]),e("p",null,[e("a",G,[n("Pipenv"),a(s)]),n(" 是 Python 的 Python 打包工具，是对使用 "),e("a",K,[n("Pip"),a(s)]),n("、"),e("a",Y,[n("Venv"),a(s)]),n(" 和 requirements.txt的升级。Pipenv 是将包管理与虚拟环境相结合的好方法。")]),Q,e("blockquote",null,[e("p",null,[e("a",X,[n("Poetry - Python dependency management and packaging made easy (python-poetry.org)"),a(s)])]),e("p",null,[e("a",Z,[n("python-poetry/poetry: Python dependency management and packaging made easy. (github.com)"),a(s)])])]),ee,e("blockquote",null,[e("p",null,[e("a",ne,[n("Introduction | Documentation | Poetry - Python dependency management and packaging made easy (python-poetry.org)"),a(s)])])]),ae,se,te,a(p,{id:"990",data:[{id:"Linux"},{id:"Windows"},{id:"pipx"}],active:1},{title0:l(({value:i,isActive:o})=>[n("Linux")]),title1:l(({value:i,isActive:o})=>[n("Windows")]),title2:l(({value:i,isActive:o})=>[n("pipx")]),tab0:l(({value:i,isActive:o})=>[le,ie,oe,pe,re,ce,de,ue]),tab1:l(({value:i,isActive:o})=>[he,me,ve,be,ge,ke,ye,Ee]),tab2:l(({value:i,isActive:o})=>[_e,fe,xe,Ae,Be,we,Pe,qe,De,Ce,Se]),_:1}),je,Fe,e("blockquote",null,[e("p",null,[e("a",Te,[n("Configuration | Documentation | Poetry - Python dependency management and packaging made easy (python-poetry.org)"),a(s)])])]),Le,e("blockquote",null,[e("p",null,[e("a",Ne,[n("The pyproject.toml file | Documentation | Poetry - Python dependency management and packaging made easy (python-poetry.org)"),a(s)])])]),Me,e("blockquote",null,[e("p",null,[e("a",Re,[n("Python - poetry(5) 依赖规范 (win80.net)"),a(s)])]),e("p",null,[e("a",Ve,[n("使用 Python Poetry 进行依赖管理-云社区-华为云 (huaweicloud.com)"),a(s)])]),e("p",null,[e("a",Ue,[n("Python依赖管理及打包工具Poetry使用规范 - 掘金 (juejin.cn)"),a(s)])])]),Ie,e("blockquote",null,[e("p",null,[e("a",Je,[n("Error: Unable to store the password for poetry-repository-pypi in the key ring: Failed to unlock the collection! · Issue #2692 · python-poetry/poetry (github.com)"),a(s)])]),e("p",null,[e("a",He,[n("python poetry 1.0.0 private repo issue fix – Frank-Mich's Blog"),a(s)])])]),Oe,e("blockquote",null,[e("p",null,[e("a",We,[n('Poetry blocks on "Pending..." during installation · Issue #6050 · python-poetry/poetry (github.com)'),a(s)])])]),ze,e("blockquote",null,[e("p",null,[e("a",$e,[n("pdm-project/pdm: A modern Python package manager with PEP 582 support. (github.com)"),a(s)])]),e("p",null,[e("a",Ge,[n("PDM - 一款新的 Python 包管理器 | Frost's Blog (frostming.com)"),a(s)])]),e("p",null,[e("a",Ke,[n("pdm/README_zh.md at main · pdm-project/pdm (github.com)"),a(s)])]),Ye,e("p",null,[e("a",Qe,[n("持续集成中的 Python - 狂飙 (networm.me)"),a(s)])])]),Xe,Ze,en,nn,e("p",null,[e("a",an,[n("PEP 582"),a(s)]),n(" 提出下面这种项目的目录结构：")]),sn,e("p",null,[n("项目目录中包含一个"),tn,n("目录，用来放置所有依赖的库文件，就像"),ln,n("的"),on,n("一样。 你可以在"),e("a",pn,[n("这里"),a(s)]),n("阅读更多提案的细节。")]),rn,cn,e("ul",null,[e("li",null,[e("a",dn,[n("PEP 582"),a(s)]),n(" 本地项目库目录，支持安装与运行命令，完全不需要虚拟环境。")]),un,e("li",null,[n("兼容 "),e("a",hn,[n("PEP 517"),a(s)]),n(" 的构建后端，用于构建发布包(源码格式与 wheel 格式)")]),mn,e("li",null,[e("a",vn,[n("PEP 621"),a(s)]),n(" 元数据格式")]),e("li",null,[n("像 "),e("a",bn,[n("pnpm"),a(s)]),n(" 一样的中心化安装缓存，节省磁盘空间")])]),gn,kn,yn,e("p",null,[n("然而 "),e("a",En,[n("PEP 582"),a(s)]),n(" 提供了一个能把 Python 解释器和项目开发环境解耦的方法。这是一个相对比较新的提案， 没有很多相关的工具实现它，这其中就有 "),e("a",_n,[n("pyflow"),a(s)]),n("。但 pyflow 又是用 Rust 写的，不是所有 Python 的社区 都会用 Rust，这样就没法贡献代码，而且，基于同样的原因，pyflow 并不支持 "),e("a",fn,[n("PEP 517"),a(s)]),n(" 构建。")]),xn,An,e("blockquote",null,[e("p",null,[e("a",Bn,[n("pdm/README_zh.md at main · pdm-project/pdm (github.com)"),a(s)])])]),wn,Pn,qn,a(p,{id:"1405",data:[{id:"Linux/Mac"},{id:"Windows"}],active:0},{title0:l(({value:i,isActive:o})=>[n("Linux/Mac")]),title1:l(({value:i,isActive:o})=>[n("Windows")]),tab0:l(({value:i,isActive:o})=>[Dn]),tab1:l(({value:i,isActive:o})=>[Cn,Sn,jn,Fn,Tn,Ln,Nn]),_:1}),Mn,a(p,{id:"1485",data:[{id:"Windows"},{id:"Linux"}],active:0},{title0:l(({value:i,isActive:o})=>[n("Windows")]),title1:l(({value:i,isActive:o})=>[n("Linux")]),tab0:l(({value:i,isActive:o})=>[Rn]),tab1:l(({value:i,isActive:o})=>[Vn,Un,In,Jn]),_:1}),Hn,On,e("blockquote",null,[e("p",null,[e("a",Wn,[n("frostming/pdm-packer: A PDM plugin that packs your packages into a zipapp (github.com)"),a(s)])])]),zn,e("blockquote",null,[e("p",null,[e("a",$n,[n("Conda clean 净化Anaconda - 简书 (jianshu.com)"),a(s)]),Gn,e("a",Kn,[n("Anaconda conda常用命令：从入门到精通_chenxy_bwave的专栏-CSDN博客_conda常用命令"),a(s)]),Yn,e("a",Qn,[n("Anaconda 官网"),a(s)]),Xn,n(" 可在此处获取其他版本的安装包")])]),Zn,ea,e("p",null,[e("a",na,[n("安装包"),a(s)])]),e("blockquote",null,[e("p",null,[e("a",aa,[n("Anaconda 官网"),a(s)]),sa,n(" 可在此处获取其他版本的安装包")])]),ta,e("blockquote",null,[e("p",null,[e("a",la,[n("anaconda修改国内源 - 余者皆可 - 博客园 (cnblogs.com)"),a(s)])]),e("p",null,[e("a",ia,[n("Anaconda 换国内源_scl52tg的博客-CSDN博客_conda 换源"),a(s)])])]),oa,e("blockquote",null,[e("p",null,[e("a",pa,[n("如何在 Ubuntu 20.04 上安装 Anaconda - 云+社区 - 腾讯云 (tencent.com)"),a(s)]),ra,e("a",ca,[n("Anaconda conda常用命令：从入门到精通_chenxy_bwave的专栏-CSDN博客_conda常用命令"),a(s)])])]),da,e("blockquote",null,[e("p",null,[e("a",ua,[n("Conda clean 净化Anaconda - 简书 (jianshu.com)"),a(s)]),ha,e("a",ma,[n("Anaconda conda常用命令：从入门到精通_chenxy_bwave的专栏-CSDN博客_conda常用命令"),a(s)]),va,e("a",ba,[n("Anaconda 官网"),a(s)]),ga,n(" 可在此处获取其他版本的安装包")])]),ka,ya,Ea,_a,e("ul",null,[fa,e("li",null,[n("最终在"),e("a",xa,[n("anaconda-issues #12410"),a(s)]),n("找到的相同报错及解决方案 "),Aa])]),Ba,wa,e("blockquote",null,[e("p",null,[e("a",Pa,[n("bpo-42627: Fix wrong parsing of Windows registry proxy settings by CrazyBoyFeng · Pull Request #26307 · python/cpython · GitHubopen in new window"),a(s)])])]),qa,e("p",null,[e("a",Da,[n("VSCode 安装包"),a(s)])]),Ca,e("blockquote",null,[e("p",null,[e("a",Sa,[n("python 项目自动生成环境配置文件requirements.txt_凝眸伏笔的博客-CSDN博客"),a(s)])])]),ja,e("ul",null,[e("li",null,[e("a",Fa,[n("参考文章"),a(s)])]),Ta,La]),Na,Ma,e("ul",null,[e("li",null,[e("a",Ra,[n("Python PEP8 代码规范常见问题及解决方法"),a(s)])])]),Va,Ua,Ia,Ja,Ha,e("ul",null,[e("li",null,[e("a",Oa,[n("JupyterLab，极其强大的下一代notebook！"),a(s)]),n("[原文链接]")]),Wa]),za,$a,e("ul",null,[Ga,e("li",null,[Ka,e("ul",null,[e("li",null,[e("a",Ya,[n("JupyterLab修改启动默认路径"),a(s)]),n("["),Qa,n("]")]),Xa,Za]),es])]),ns,e("ul",null,[e("li",null,[e("a",as,[n("原文链接"),a(s)])])]),ss,e("blockquote",null,[e("p",null,[e("a",ts,[n("更多JupyterLab快捷键参考"),a(s)])])]),ls,is,e("blockquote",null,[e("p",null,[e("a",os,[n("pipx (pypa.github.io)"),a(s)])]),e("p",null,[e("a",ps,[n("pypa/pipx: Install and Run Python Applications in Isolated Environments (github.com)"),a(s)])])]),rs,e("blockquote",null,[e("p",null,[e("a",cs,[n("Ubuntu 16.04 安装 python3.8 - 老虎死了还有狼 - 博客园 (cnblogs.com)"),a(s)])])]),ds,e("blockquote",null,[e("p",null,[e("a",us,[n("Python Failed to write executable - trying to use .deleteme logic 解决方法 | 烟雨平生 (i007it.com)"),a(s)])]),hs]),ms])}const Es=c(h,[["render",vs],["__file","开发环境.html.vue"]]),_s=JSON.parse(`{"path":"/Language/Python/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html","title":"Python 开发环境配置","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装 Python","slug":"安装-python","link":"#安装-python","children":[]},{"level":2,"title":"pip 操作","slug":"pip-操作","link":"#pip-操作","children":[{"level":3,"title":"离线迁移 python 库","slug":"离线迁移-python-库","link":"#离线迁移-python-库","children":[]}]},{"level":2,"title":"换源操作","slug":"换源操作","link":"#换源操作","children":[]},{"level":2,"title":"环境/依赖版本管理工具","slug":"环境-依赖版本管理工具","link":"#环境-依赖版本管理工具","children":[{"level":3,"title":"virtual environment","slug":"virtual-environment","link":"#virtual-environment","children":[]},{"level":3,"title":"Pipenv","slug":"pipenv","link":"#pipenv","children":[]},{"level":3,"title":"Poetry","slug":"poetry","link":"#poetry","children":[]},{"level":3,"title":"PDM","slug":"pdm","link":"#pdm","children":[]}]},{"level":2,"title":"Anaconda","slug":"anaconda","link":"#anaconda","children":[{"level":3,"title":"Windows","slug":"windows","link":"#windows","children":[]},{"level":3,"title":"Ubuntu","slug":"ubuntu","link":"#ubuntu","children":[]},{"level":3,"title":"报错收集","slug":"报错收集","link":"#报错收集","children":[]}]},{"level":2,"title":"VSCode","slug":"vscode","link":"#vscode","children":[{"level":3,"title":"扩展","slug":"扩展","link":"#扩展","children":[]},{"level":3,"title":"Pylance 无法加载自定义模块","slug":"pylance-无法加载自定义模块","link":"#pylance-无法加载自定义模块","children":[]}]},{"level":2,"title":"生成环境依赖","slug":"生成环境依赖","link":"#生成环境依赖","children":[]},{"level":2,"title":"Pycharm","slug":"pycharm","link":"#pycharm","children":[{"level":3,"title":"Pycharm 换源","slug":"pycharm-换源","link":"#pycharm-换源","children":[]},{"level":3,"title":"快捷键","slug":"快捷键","link":"#快捷键","children":[]},{"level":3,"title":"创建文档注释脚本","slug":"创建文档注释脚本","link":"#创建文档注释脚本","children":[]},{"level":3,"title":"导入自己的模块报红","slug":"导入自己的模块报红","link":"#导入自己的模块报红","children":[]},{"level":3,"title":"PEP8 代码规范检查","slug":"pep8-代码规范检查","link":"#pep8-代码规范检查","children":[]}]},{"level":2,"title":"JupyterLab","slug":"jupyterlab","link":"#jupyterlab","children":[{"level":3,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"插件","slug":"插件","link":"#插件","children":[]},{"level":3,"title":"快捷键","slug":"快捷键-1","link":"#快捷键-1","children":[]}]},{"level":2,"title":"pipx","slug":"pipx","link":"#pipx","children":[{"level":3,"title":"安装","slug":"安装-2","link":"#安装-2","children":[]},{"level":3,"title":"概述","slug":"概述-1","link":"#概述-1","children":[]}]},{"level":2,"title":"ubuntu 16.04 安装 Python 3.8.12","slug":"ubuntu-16-04-安装-python-3-8-12","link":"#ubuntu-16-04-安装-python-3-8-12","children":[{"level":3,"title":"配置依赖环境","slug":"配置依赖环境","link":"#配置依赖环境","children":[]},{"level":3,"title":"下载 Python3.8.12 压缩包并解压","slug":"下载-python3-8-12-压缩包并解压","link":"#下载-python3-8-12-压缩包并解压","children":[]}]},{"level":2,"title":"Ubuntu 16.04 LTS 配置Jupyter服务","slug":"ubuntu-16-04-lts-配置jupyter服务","link":"#ubuntu-16-04-lts-配置jupyter服务","children":[]},{"level":2,"title":"报错收集","slug":"报错收集-1","link":"#报错收集-1","children":[{"level":3,"title":"ERROR: Could not install packages due to an Environment","slug":"error-could-not-install-packages-due-to-an-environment","link":"#error-could-not-install-packages-due-to-an-environment","children":[]}]}],"git":{"createdTime":1667833854000,"updatedTime":1715104519000,"contributors":[{"name":"233Official","email":"ayusummer233@qq.com","commits":8},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":6},{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":6},{"name":"233Official","email":"ayusummr233@gmail.com","commits":2},{"name":"233PC","email":"ayusummer233@gmail.com","commits":1},{"name":"Ayusummer","email":"ayusummr233@gmail.com","commits":1}]},"readingTime":{"minutes":35.96,"words":10787},"filePathRelative":"Language/Python/开发环境.md","localizedDate":"2022年11月7日","excerpt":"\\n<ul>\\n<li><a href=\\"#python-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\\">Python 开发环境配置</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85-python\\">安装 Python</a></li>\\n<li><a href=\\"#pip-%E6%93%8D%E4%BD%9C\\">pip 操作</a>\\n<ul>\\n<li><a href=\\"#%E7%A6%BB%E7%BA%BF%E8%BF%81%E7%A7%BB-python-%E5%BA%93\\">离线迁移 python 库</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%8D%A2%E6%BA%90%E6%93%8D%E4%BD%9C\\">换源操作</a>\\n<ul>\\n<li><a href=\\"#%E6%BA%90%E5%9C%B0%E5%9D%80\\">源地址</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\\">使用方法</a>\\n<ul>\\n<li><a href=\\"#%E6%96%B9%E6%B3%95%E4%B8%80%E4%B8%B4%E6%97%B6%E4%BD%BF%E7%94%A8\\">方法一：临时使用</a></li>\\n<li><a href=\\"#%E6%96%B9%E6%B3%95%E4%BA%8C%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E6%BA%90\\">方法二：更改默认源</a></li>\\n<li><a href=\\"#%E6%96%B9%E6%B3%95%E4%B8%89python%E4%BB%A3%E7%A0%81%E6%9B%B4%E6%94%B9%E5%AE%89%E8%A3%85%E6%BA%90\\">方法三：python代码更改安装源</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\\">环境/依赖版本管理工具</a>\\n<ul>\\n<li><a href=\\"#virtual-environment\\">virtual environment</a></li>\\n<li><a href=\\"#pipenv\\">Pipenv</a></li>\\n<li><a href=\\"#poetry\\">Poetry</a>\\n<ul>\\n<li><a href=\\"#%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82\\">系统需求</a></li>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85\\">安装</a></li>\\n<li><a href=\\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\\">配置文件</a>\\n<ul>\\n<li><a href=\\"#pyprojecttoml\\">pyproject.toml</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\\">基本用法</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\\">安装依赖</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\\">使用虚拟环境</a></li>\\n<li><a href=\\"#%E7%BB%93%E5%90%88-conda-%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8\\">结合 conda 环境使用</a>\\n<ul>\\n<li><a href=\\"#%E5%9C%A8%E5%BD%93%E5%89%8D-conda-%E7%8E%AF%E5%A2%83%E7%9A%84-bin-%E7%9B%AE%E5%BD%95%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0-activate-%E8%84%9A%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%8E%AF%E5%A2%83%E6%BF%80%E6%B4%BB%E5%A4%B1%E8%B4%A5ubuntu\\">在当前 conda 环境的 <code>bin</code> 目录中找不到 activate 脚本导致环境激活失败(ubuntu)</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\\">常见问题</a>\\n<ul>\\n<li><a href=\\"#failed-to-create-the-collection-prompt-dismissed\\">Failed to create the collection: Prompt dismissed..</a></li>\\n<li><a href=\\"#%E5%8D%A1-keyring\\">卡 keyring</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#pdm\\">PDM</a>\\n<ul>\\n<li><a href=\\"#%E6%A6%82%E8%BF%B0\\">概述</a></li>\\n<li><a href=\\"#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7\\">主要特性</a></li>\\n<li><a href=\\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\\">为什么不用虚拟环境</a></li>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85-1\\">安装</a></li>\\n<li><a href=\\"#quickstart\\">QuickStart</a></li>\\n<li><a href=\\"#working-with-pep-582\\">working with PEP 582</a></li>\\n<li><a href=\\"#pdm-scripts\\">PDM Scripts</a></li>\\n<li><a href=\\"#pdm-packer\\">PDM-packer</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#anaconda\\">Anaconda</a>\\n<ul>\\n<li><a href=\\"#windows\\">Windows</a>\\n<ul>\\n<li><a href=\\"#anaconda-%E6%8D%A2%E6%BA%90\\">Anaconda 换源</a></li>\\n<li><a href=\\"#%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA-conda-%E7%8E%AF%E5%A2%83\\">新建一个 conda 环境</a></li>\\n<li><a href=\\"#anaconda-navigator-%E5%8D%87%E7%BA%A7\\">Anaconda Navigator 升级</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ubuntu\\">Ubuntu</a></li>\\n<li><a href=\\"#%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86\\">报错收集</a>\\n<ul>\\n<li><a href=\\"#check_hostname-requires-server_hostname\\"><code>check_hostname requires server_hostname</code></a></li>\\n<li><a href=\\"#%E5%90%84%E7%B1%BB-httperror-%E7%9B%B8%E5%85%B3\\">各类 <code>HTTPError</code> 相关</a></li>\\n<li><a href=\\"#modulenotfounderror-no-module-named-pip_vendor\\"><code>ModuleNotFoundError: No module named 'pip._vendor....'</code></a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#vscode\\">VSCode</a>\\n<ul>\\n<li><a href=\\"#%E6%89%A9%E5%B1%95\\">扩展</a></li>\\n<li><a href=\\"#pylance-%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97\\">Pylance 无法加载自定义模块</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E7%94%9F%E6%88%90%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96\\">生成环境依赖</a></li>\\n<li><a href=\\"#pycharm\\">Pycharm</a>\\n<ul>\\n<li><a href=\\"#pycharm-%E6%8D%A2%E6%BA%90\\">Pycharm 换源</a></li>\\n<li><a href=\\"#%E5%BF%AB%E6%8D%B7%E9%94%AE\\">快捷键</a>\\n<ul>\\n<li><a href=\\"#%E6%9F%A5%E6%89%BE%E6%9B%BF%E6%8D%A2\\">查找替换</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A%E8%84%9A%E6%9C%AC\\">创建文档注释脚本</a></li>\\n<li><a href=\\"#%E5%AF%BC%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A8%A1%E5%9D%97%E6%8A%A5%E7%BA%A2\\">导入自己的模块报红</a></li>\\n<li><a href=\\"#pep8-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E6%A3%80%E6%9F%A5\\">PEP8 代码规范检查</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#jupyterlab\\">JupyterLab</a>\\n<ul>\\n<li><a href=\\"#%E7%AE%80%E4%BB%8B\\">简介</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8\\">使用</a></li>\\n<li><a href=\\"#%E6%8F%92%E4%BB%B6\\">插件</a>\\n<ul>\\n<li><a href=\\"#%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90\\">插件推荐</a>\\n<ul>\\n<li><a href=\\"#kitecojupyterlab-kite\\"><code>@kiteco/jupyterlab-kite</code></a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%BF%AB%E6%8D%B7%E9%94%AE-1\\">快捷键</a>\\n<ul>\\n<li><a href=\\"#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F-%E6%8C%89%E9%94%AE-esc-%E5%BC%80%E5%90%AF\\">命令模式 (按键 Esc 开启)</a></li>\\n<li><a href=\\"#%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F--enter-%E9%94%AE%E5%90%AF%E5%8A%A8\\">编辑模式 ( Enter 键启动)</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#pipx\\">pipx</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85-2\\">安装</a></li>\\n<li><a href=\\"#%E6%A6%82%E8%BF%B0-1\\">概述</a>\\n<ul>\\n<li><a href=\\"#pipx-%E4%B8%8E-pip-%E7%9A%84%E5%8C%BA%E5%88%AB\\">pipx 与 pip 的区别</a></li>\\n<li><a href=\\"#pipx-%E4%BB%8E%E4%BB%80%E4%B9%88%E5%9C%B0%E6%96%B9%E5%AE%89%E8%A3%85-app\\">pipx 从什么地方安装 app</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#ubuntu-1604-%E5%AE%89%E8%A3%85-python-3812\\">ubuntu 16.04 安装 Python 3.8.12</a>\\n<ul>\\n<li><a href=\\"#%E9%85%8D%E7%BD%AE%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83\\">配置依赖环境</a></li>\\n<li><a href=\\"#%E4%B8%8B%E8%BD%BD-python3812-%E5%8E%8B%E7%BC%A9%E5%8C%85%E5%B9%B6%E8%A7%A3%E5%8E%8B\\">下载 Python3.8.12 压缩包并解压</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ubuntu-1604-lts-%E9%85%8D%E7%BD%AEjupyter%E6%9C%8D%E5%8A%A1\\">Ubuntu 16.04 LTS 配置Jupyter服务</a></li>\\n<li><a href=\\"#%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86-1\\">报错收集</a>\\n<ul>\\n<li><a href=\\"#error-could-not-install-packages-due-to-an-environment\\">ERROR: Could not install packages due to an Environment</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}`);export{Es as comp,_s as data};
