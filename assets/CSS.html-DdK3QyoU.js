import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as i,c as o,a as e,d as n,b as l,e as a}from"./app-DxMJFouC.js";const c={},d=a('<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css"><span>CSS</span></a></h1><ul><li><a href="#css">CSS</a><ul><li><a href="#%E5%B1%9E%E6%80%A7">属性</a><ul><li><a href="#overflow"><code>overflow</code></a></li><li><a href="#padding"><code>padding</code></a></li><li><a href="#margin">margin</a></li></ul></li><li><a href="#%E5%B8%83%E5%B1%80">布局</a><ul><li><a href="#flex"><code>Flex</code></a><ul><li><a href="#flex-%E5%B1%9E%E6%80%A7">flex 属性</a></li></ul></li></ul></li></ul></li></ul><hr><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h2><h3 id="overflow" tabindex="-1"><a class="header-anchor" href="#overflow"><span><code>overflow</code></span></a></h3>',5),p={href:"https://www.w3school.com.cn/cssref/pr_pos_overflow.asp",target:"_blank",rel:"noopener noreferrer"},h=a('<p><img src="http://cdn.ayusummer233.top/img/202203191828656.png" alt="image-20220319182820529"></p><p><code>overflow</code> 属性规定当内容溢出元素框时发生的事情。</p><table><thead><tr><th style="text-align:center;">值</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">visible</td><td style="text-align:center;">默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td style="text-align:center;">hidden</td><td style="text-align:center;">内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td style="text-align:center;">scroll</td><td style="text-align:center;">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td style="text-align:center;">auto</td><td style="text-align:center;">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td style="text-align:center;">inherit</td><td style="text-align:center;">规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><hr><h3 id="padding" tabindex="-1"><a class="header-anchor" href="#padding"><span><code>padding</code></span></a></h3>',5),u={href:"https://www.w3school.com.cn/cssref/pr_padding.asp",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>设置 p 元素的 4 个内边距：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">p</span>
  <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span>2cm 4cm 3cm 4cm<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202203191946789.png" alt="image-20220319194651640"></p><p><code>padding</code> 简写属性在一个声明中设置所有内边距属性。</p><p>这个简写属性设置元素所有内边距的宽度，或者设置各边上内边距的宽度。行内非替换元素上设置的内边距不会影响行高计算；因此，如果一个元素既有内边距又有背景，从视觉上看可能会延伸到其他行，有可能还会与其他内容重叠。元素的背景会延伸穿过内边距。<strong>不允许指定负边距值</strong>。</p><ul><li><p>例如:</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token property">padding</span><span class="token punctuation">:</span>10px 5px 15px 20px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>上内边距是 10px</li><li>右内边距是 5px</li><li>下内边距是 15px</li><li>左内边距是 20px</li></ul></li></ul><table><thead><tr><th style="text-align:center;">值</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">auto</td><td style="text-align:center;">浏览器计算内边距。</td></tr><tr><td style="text-align:center;"><em>length</em></td><td style="text-align:center;">规定以具体单位计的内边距值，比如像素、厘米等。默认值是 0px。</td></tr><tr><td style="text-align:center;"><em>%</em></td><td style="text-align:center;">规定基于父元素的宽度的百分比的内边距。</td></tr><tr><td style="text-align:center;">inherit</td><td style="text-align:center;">规定应该从父元素继承内边距。</td></tr></tbody></table><hr><h3 id="margin" tabindex="-1"><a class="header-anchor" href="#margin"><span>margin</span></a></h3>`,9),m={href:"https://www.w3school.com.cn/cssref/pr_margin.asp",target:"_blank",rel:"noopener noreferrer"},x=a(`<p>设置 p 元素的 4 个外边距：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">p</span>
  <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span>2cm 4cm 3cm 4cm<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>margin</code> 简写属性在一个声明中设置所有外边距属性。该属性可以有 1 到 4 个值。</p><p>这个简写属性设置一个元素所有外边距的宽度，或者设置各边上外边距的宽度。</p><p>块级元素的垂直相邻外边距会合并，而行内元素实际上不占上下外边距。行内元素的的左右外边距不会合并。同样地，浮动元素的外边距也不会合并。<strong>允许指定负的外边距值，不过使用时要小心</strong>。</p><table><thead><tr><th style="text-align:center;">值</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">auto</td><td style="text-align:center;">浏览器计算外边距。</td></tr><tr><td style="text-align:center;"><em>length</em></td><td style="text-align:center;">规定以具体单位计的外边距值，比如像素、厘米等。默认值是 0px。</td></tr><tr><td style="text-align:center;"><em>%</em></td><td style="text-align:center;">以包含元素宽度的百分比指定外边距。</td></tr><tr><td style="text-align:center;">inherit</td><td style="text-align:center;">规定应该从父元素继承外边距。</td></tr></tbody></table><hr><h2 id="布局" tabindex="-1"><a class="header-anchor" href="#布局"><span>布局</span></a></h2><h3 id="flex" tabindex="-1"><a class="header-anchor" href="#flex"><span><code>Flex</code></span></a></h3>`,9),f={href:"https://www.runoob.com/w3cnote/flex-grammar.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.cnblogs.com/hellocd/p/10443237.html",target:"_blank",rel:"noopener noreferrer"},v=a('<p>2009 年，<code>W3C</code> 提出了一种新的方案 ---- <code>Flex</code> 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p><code>Flexbox</code> 是 <code>flexible box</code> 的简称, 是 <code>CSS3</code> 引入的新的布局模式。它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。</p><p><code>Flexbox</code> 能够扩展和收缩 <code>flex</code> 容器内的元素, 以最大限度地填充可用空间; 与早期布局方式相比, <code>Flexbox</code> 是一种更为强大的布局方式. 其可以:</p><ul><li>在不同方向排列元素</li><li>重新排列元素的显示顺序</li><li>更改元素的对齐方式</li><li>动态地将元素装入容器</li></ul><hr><h4 id="flex-属性" tabindex="-1"><a class="header-anchor" href="#flex-属性"><span>flex 属性</span></a></h4>',6),y={href:"https://zhuanlan.zhihu.com/p/136223806",target:"_blank",rel:"noopener noreferrer"},_=a(`<p><code>flex</code> 属性是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为0 1 auto。后两个属性可选</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">&#39;flex-grow&#39;</span>&gt; &lt;<span class="token string">&#39;flex-shrink&#39;</span>&gt;? || &lt;<span class="token string">&#39;flex-basis&#39;</span>&gt; ]
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该属性有两个快捷值：<code>auto (1 1 auto)</code> 和 <code>none (0 0 auto)</code>。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><hr>`,5);function k(w,S){const t=r("ExternalLinkIcon");return i(),o("div",null,[d,e("blockquote",null,[e("p",null,[e("a",p,[n("CSS overflow 属性 (w3school.com.cn)"),l(t)])])]),h,e("blockquote",null,[e("p",null,[e("a",u,[n("CSS padding 属性 (w3school.com.cn)"),l(t)])])]),g,e("blockquote",null,[e("p",null,[e("a",m,[n("CSS margin 属性 (w3school.com.cn)"),l(t)])])]),x,e("blockquote",null,[e("p",null,[e("a",f,[n("Flex 布局语法教程 | 菜鸟教程 (runoob.com)"),l(t)])]),e("p",null,[e("a",b,[n("弹性布局(display:flex;) 属性详解 - cdgogo - 博客园 (cnblogs.com)"),l(t)])])]),v,e("blockquote",null,[e("p",null,[e("a",y,[n("flex:1 到底代表什么? - 知乎 (zhihu.com)"),l(t)])])]),_])}const B=s(c,[["render",k],["__file","CSS.html.vue"]]),F=JSON.parse('{"path":"/%E5%89%8D%E7%AB%AF/CSS.html","title":"CSS","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[{"level":3,"title":"overflow","slug":"overflow","link":"#overflow","children":[]},{"level":3,"title":"padding","slug":"padding","link":"#padding","children":[]},{"level":3,"title":"margin","slug":"margin","link":"#margin","children":[]}]},{"level":2,"title":"布局","slug":"布局","link":"#布局","children":[{"level":3,"title":"Flex","slug":"flex","link":"#flex","children":[]}]}],"git":{"createdTime":1675222387000,"updatedTime":1709635981000,"contributors":[{"name":"233Official","email":"ayusummer233@qq.com","commits":1},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":3.44,"words":1032},"filePathRelative":"前端/CSS.md","localizedDate":"2023年2月1日","excerpt":"\\n<ul>\\n<li><a href=\\"#css\\">CSS</a>\\n<ul>\\n<li><a href=\\"#%E5%B1%9E%E6%80%A7\\">属性</a>\\n<ul>\\n<li><a href=\\"#overflow\\"><code>overflow</code></a></li>\\n<li><a href=\\"#padding\\"><code>padding</code></a></li>\\n<li><a href=\\"#margin\\">margin</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%B8%83%E5%B1%80\\">布局</a>\\n<ul>\\n<li><a href=\\"#flex\\"><code>Flex</code></a>\\n<ul>\\n<li><a href=\\"#flex-%E5%B1%9E%E6%80%A7\\">flex 属性</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{B as comp,F as data};
