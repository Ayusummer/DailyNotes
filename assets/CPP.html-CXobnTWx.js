import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as o,a as s,d as n,b as e,e as t}from"./app-DxMJFouC.js";const c={},r=t('<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h1><ul><li><a href="#c">C++</a><ul><li><a href="#visualstudio2019-%E7%9B%B8%E5%85%B3">VisualStudio2019 相关</a><ul><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88vs%E4%B8%AD%E4%BC%9A%E5%BB%BA%E8%AE%AE%E5%AE%8F%E8%BD%AC%E6%8D%A2%E4%B8%BAconstexpr">为什么VS中会建议宏转换为constexpr？</a><ul><li><a href="#constexpr">constexpr</a><ul><li><a href="#%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8-constexpr-%E7%9A%84%E5%9C%BA%E6%99%AF">应该使用 constexpr 的场景</a></li><li><a href="#%E4%B8%8D%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8-constexpr-%E7%9A%84%E5%9C%BA%E6%99%AF">不应该使用 constexpr 的场景</a></li></ul></li><li><a href="#auto">auto</a></li></ul></li><li><a href="#c4996">C4996</a><ul><li><a href="#strcpy_s">strcpy_s</a></li></ul></li><li><a href="#pragma-once">#pragma once</a></li></ul></li><li><a href="#vscode">VSCode</a><ul><li><a href="#%E5%9C%A8-vscode-%E4%B8%AD%E8%B0%83%E8%AF%95-c-%E7%A8%8B%E5%BA%8F">在 VSCode 中调试 C++ 程序</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-vs-%E7%9A%84-clexe">使用 VS 的 cl.exe</a></li><li><a href="#%E4%BD%BF%E7%94%A8-gcc">使用 gcc</a></li></ul></li></ul></li><li><a href="#%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7">实用工具</a><ul><li><a href="#%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE">快捷生成函数调用关系图</a><ul><li><a href="#callgraph">callgraph</a><ul><li><a href="#ubuntu">Ubuntu</a></li></ul></li><li><a href="#tceetree--cscope--graphviz">tceetree + cscope + Graphviz</a></li><li><a href="#visualstudio-code-graph-%E6%89%A9%E5%B1%95">VisualStudio Code Graph 扩展</a></li><li><a href="#cppdepend">CppDepend</a></li></ul></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a><ul><li><a href="#%E7%BB%93%E6%9E%84%E4%BD%93">结构体</a><ul><li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">初始化</a><ul><li><a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8--%E5%BF%AB%E6%8D%B7%E8%B5%8B%E5%80%BC">构造函数使用 <code>:</code> 快捷赋值</a></li><li><a href="#%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%97%B6%E4%BD%BF%E7%94%A8--%E8%B5%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E5%8C%96">实例化时使用 {} 赋值初始化</a></li><li><a href="#%E8%80%81%E8%80%81%E5%AE%9E%E5%AE%9E%E5%86%99%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96">老老实实写构造函数初始化</a></li><li><a href="#%E6%94%AF%E6%8C%81%E5%B0%86%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%99%E5%9C%A8%E4%B8%80%E8%B5%B7">支持将定义结构体和实例化结构体写在一起</a></li></ul></li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a><ul><li><a href="#stdstrcmp">std::strcmp</a></li><li><a href="#%E8%BF%94%E5%9B%9E%E5%80%BC">返回值</a></li><li><a href="#%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2">关于字符串与数字互相转换</a></li></ul></li></ul></li><li><a href="#%E8%A7%84%E8%8C%83%E6%80%A7">规范性</a><ul><li><a href="#%E5%A4%B4%E6%96%87%E4%BB%B6%E6%BA%90%E6%96%87%E4%BB%B6">头文件源文件</a></li><li><a href="#%E6%B3%A8%E9%87%8A%E7%9B%B8%E5%85%B3">注释相关</a></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a><ul><li><a href="#%E5%BC%95%E7%94%A8">引用</a></li></ul></li></ul></li></ul><hr><h2 id="visualstudio2019-相关" tabindex="-1"><a class="header-anchor" href="#visualstudio2019-相关"><span>VisualStudio2019 相关</span></a></h2><hr><h3 id="为什么vs中会建议宏转换为constexpr" tabindex="-1"><a class="header-anchor" href="#为什么vs中会建议宏转换为constexpr"><span>为什么VS中会建议宏转换为constexpr？</span></a></h3><p><img src="http://cdn.ayusummer233.top/img/20210628184101.png" alt="image-20210628184054251"></p>',7),u=s("p",null,"宏是由预处理器而非编译器解析的，比如不能用命名空间，所以使用后必须解除",-1),d=s("p",null,"以及宏很容易带来各式各样的错误，最简单如括号上的错误，还有宏会导致debug困难等等",-1),v={href:"https://www.zhihu.com/question/433057879",target:"_blank",rel:"noopener noreferrer"},k=s("hr",null,null,-1),m=s("h4",{id:"constexpr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#constexpr"},[s("span",null,"constexpr")])],-1),b={href:"https://www.winkp.com/7505.html",target:"_blank",rel:"noopener noreferrer"},h=t('<ul><li><p>关键字 <strong><code>constexpr</code></strong> (<em>constant expression</em>) 是在 C++11 中引入的，并且在 C++14 中进行了优化。</p></li><li><p><strong><code>constexpr</code></strong> 和 <strong><code>const</code></strong> 一样可以用来修饰变量：试图修改 <strong><code>constexpr</code></strong> 变量时，编译器将会报错。</p></li><li><p>不同于 <strong><code>const</code></strong>， <strong><code>constexpr</code></strong> 还可以修饰函数和类的构造函数。 <strong><code>constexpr</code></strong> 表示值或者返回值是常量，并且如果可能，在编译时计算它们。</p></li><li><p>一个 <strong><code>constexpr</code></strong> 整型值能够用在任何 <strong><code>const</code></strong> 整型值可以用的地方，例如模板参数和数组的申明。</p></li><li><p>当值在编译时计算而不是运行时计算时，它能够使程序运行得更快，并使用更少的内存。</p><p>为了限制编译时常量计算的复杂性，以及其对编译时间潜在的影响， C++14 标准需要 <strong><code>constexpr</code></strong> 类型必须为字面值类型。</p></li></ul><blockquote><p>1、字面值常量：一个形如42的值被称作字面值常量，这样的值一望而知。每个字面值常量都对应一种数据类型，字面值常量的形式和值决定了它的数据类型，包含：</p><p>整型和浮点型字面值 字符和字符串字面值 布尔字面值和指针字面值： bool test = false； nullptr是指针字面值；</p><p>———————————————— 版权声明：本文为CSDN博主「十一月zz」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/baidu_35679960/article/details/78934193</p></blockquote><hr><h6 id="应该使用-constexpr-的场景" tabindex="-1"><a class="header-anchor" href="#应该使用-constexpr-的场景"><span>应该使用 constexpr 的场景</span></a></h6><ul><li>只要允许，尽可能使用 <strong><code>constexpr</code></strong>，当值在编译时计算而不是运行时计算时，它能够使程序运行得更快，并使用更少的内存。</li></ul><hr><h6 id="不应该使用-constexpr-的场景" tabindex="-1"><a class="header-anchor" href="#不应该使用-constexpr-的场景"><span>不应该使用 constexpr 的场景</span></a></h6><ul><li><strong><code>constexpr</code></strong> 是对象或者函数接口的一部分，所以如果你使用了 <strong><code>constexpr</code></strong> 但反悔了，移除 <strong><code>constexpr</code></strong> 可能会导致大量的调用代码编译失败。(比如添加 I/O 操作用于调试或者性能调优可能导致这样的问题，因为 I/O 语句通常不是在 <strong><code>constexpr</code></strong> 函数中执行的。)</li></ul><hr><h4 id="auto" tabindex="-1"><a class="header-anchor" href="#auto"><span>auto</span></a></h4><ul><li>从初始化表达中推导出已声明变量的类型。</li><li>从 <code>Visual Studio 2010</code> 开始，**<code>auto</code>**关键字宣布一个变量，其类型是从声明的初始化表达中推断出的</li></ul><hr><h3 id="c4996" tabindex="-1"><a class="header-anchor" href="#c4996"><span>C4996</span></a></h3><ul><li>使用的函数是过时了已被弃用的函数</li></ul><hr><h4 id="strcpy-s" tabindex="-1"><a class="header-anchor" href="#strcpy-s"><span>strcpy_s</span></a></h4><p><code> strcpy_s(str, strlen(str1)+1, str1);</code></p><hr><h3 id="pragma-once" tabindex="-1"><a class="header-anchor" href="#pragma-once"><span>#pragma once</span></a></h3>',19),g={href:"https://docs.microsoft.com/en-us/cpp/preprocessor/once?view=msvc-160",target:"_blank",rel:"noopener noreferrer"},f=s("li",null,[s("p",null,[n("用 VS 新建 .h 头文件时会自动在首行生成一个 "),s("code",null,"#pragma once")])],-1),E=t('<blockquote><p>pragma: 编译指示, 杂注</p></blockquote><ul><li>使用 <code>#pragma once</code> 可以减少 <code>build</code> 次数, 因为编译器会在该文件第一次被 <code>#include</code> 时打开并读取该文件并且之后不再重读读取</li></ul><hr><h2 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode"><span>VSCode</span></a></h2><hr><h3 id="在-vscode-中调试-c-程序" tabindex="-1"><a class="header-anchor" href="#在-vscode-中调试-c-程序"><span>在 VSCode 中调试 C++ 程序</span></a></h3><h4 id="使用-vs-的-cl-exe" tabindex="-1"><a class="header-anchor" href="#使用-vs-的-cl-exe"><span>使用 VS 的 cl.exe</span></a></h4>',7),q={href:"https://blog.csdn.net/qq_34801642/article/details/105453161",target:"_blank",rel:"noopener noreferrer"},B={href:"https://www.jianshu.com/p/c313b1dd9cf3",target:"_blank",rel:"noopener noreferrer"},_=t(`<hr><p>从 VS 的 <code>工具 -&gt; 获取工具和功能</code> 唤醒 <code>Visual Studio Installer</code></p><p><img src="http://cdn.ayusummer233.top/img/20210701211800.png" alt="image-20210701211753367"></p><p>查看自己的 VS 的安装目录</p><p><img src="http://cdn.ayusummer233.top/img/20210701211946.png" alt="image-20210701211946680"></p><blockquote><p>我这里的路径是: <code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community</code> 下面配置环境变量要用到</p></blockquote><p>打开 <code>此电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量</code> 并按照如下所示修改 <code>系统变量</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 编辑 Path 变量, 添加如下路径, 注意这里的 VS 目录就是上一步找到的目录
C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30037\\bin\\Hostx86\\x86

// 新建 INCLUDE 变量并加入如下配置(每条配置间用;隔开)(其实输完第一条配置且加了;并回车确定后再编辑该环境变量就会有编辑弹窗可以一条条新建了); 需要留意的是如果你的 VS 是装在 C:\\Program Files 里的那么这里的 Windows Kits 文件夹可能就在 C:\\Program Files 目录中
C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30037\\include
C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\shared
C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\ucrt
C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\um
C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\winrt

// 新建 LIB 变量并加入如下配置
C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30037\\lib\\x86
C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.17763.0\\um\\x86
C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.17763.0\\ucrt\\x86
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改完这些变量后依次按确定关闭打开的窗口以保存修改</p><p><code>win + R -&gt; cmd</code> 并回车打开命令行窗口, 输入 cl 并回车, 如下所示查看是否配置成功</p><p><img src="http://cdn.ayusummer233.top/img/20210701213411.png" alt="image-20210701213410915"></p><p>重启 VSCode 以加载新的环境变量</p><p>新建一个目录并使用 VSCode 打开(因为会在 VSCode 当前打开文件夹的根目录下自动生成配置文件, 所以这里先新建一个干净的目录再用 VSCode 打开以免污染外围环境)</p><p>新建一个测试用的 cpp 文件如 test.cpp 并将编码调为 GBK (这个我没找到适配 UTF-8 的适配方案, 是一个从我用 VS 来就存在的严重问题.....)</p><div class="language-C++ line-numbers-mode" data-ext="C++" data-title="C++"><pre class="language-C++"><code>#include &lt;iostream&gt;
using namespace std;

int main(){
    cout &lt;&lt; &quot;这是一个测试&quot; &lt;&lt; endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210701214403.png" alt="image-20210701214403048"></p><p>使用 <code>Ctrl + Shift + B</code> 快捷键会唤起该窗口, 选择该项则会在侧边生成编译链接文件</p><p><img src="http://cdn.ayusummer233.top/img/20210701214625.png" alt="image-20210701214625695"></p><p><img src="http://cdn.ayusummer233.top/img/20210701214703.png" alt="image-20210701214703681"></p><p>使用 <code>F5</code> 快捷键唤起该窗口并选择 <code>C++ Windows -&gt; cl.exe</code> 会在当前 VSCode 打开的文件夹的根目录下生成一个含有 <code>launch.json</code> 文件 的 <code>.vscode</code> 文件夹</p><p><img src="http://cdn.ayusummer233.top/img/20210701214754.png" alt="image-20210701214754797"></p><p><img src="http://cdn.ayusummer233.top/img/20210701214828.png" alt="image-20210701214828640"></p><p><img src="http://cdn.ayusummer233.top/img/20210701215021.png" alt="image-20210701215021311"></p><p>json 文件内容如下:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>
    <span class="token comment">// 悬停以查看现有属性的描述。</span>
    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cl.exe - 生成和调试活动文件&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cppvsdbg&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${fileDirname}\\\\\${fileBasenameNoExtension}.exe&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;stopAtEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${fileDirname}&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;environment&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;console&quot;</span><span class="token operator">:</span> <span class="token string">&quot;externalTerminal&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;preLaunchTask&quot;</span><span class="token operator">:</span> <span class="token string">&quot;C/C++: cl.exe 生成活动文件&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将标签页切换回 <code>test.cpp</code> 并再次按 <code>F5</code> 以执行生成的可执行文件</p><p><img src="http://cdn.ayusummer233.top/img/20210701215245.png" alt="image-20210701215244986"></p><p><img src="http://cdn.ayusummer233.top/img/20210701215303.png" alt="image-20210701215303198"></p><hr><h4 id="使用-gcc" tabindex="-1"><a class="header-anchor" href="#使用-gcc"><span>使用 gcc</span></a></h4>`,30),C={href:"https://leojhonsong.github.io/zh-CN/2018/12/30/%E9%85%8D%E7%BD%AEVSCode%E4%B8%AD%E8%B0%83%E8%AF%95C-C-%E7%8E%AF%E5%A2%83/",target:"_blank",rel:"noopener noreferrer"},x=s("br",null,null,-1),A={href:"https://code.visualstudio.com/docs/cpp/config-mingw",target:"_blank",rel:"noopener noreferrer"},$=s("br",null,null,-1),y={href:"https://code.visualstudio.com/docs/languages/cpp",target:"_blank",rel:"noopener noreferrer"},w=s("p",null,"PS: 一般按照上面第三个链接可以较为快捷地完成配置并运行 C++ 程序, 但是有时候配置项可能会出些问题, 所以下面简单描述下",-1),S=t(`<p>检查 <code>gcc</code>, <code>gdb</code></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gcc <span class="token parameter variable">--version</span>
gdb <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),D={href:"https://code.visualstudio.com/docs/languages/cpp",target:"_blank",rel:"noopener noreferrer"},F={href:"https://code.visualstudio.com/docs/languages/cpp#_example-install-mingwx64",target:"_blank",rel:"noopener noreferrer"},P=t('<p>简单来说就是下载 [msys](https://objects.githubusercontent.com/github-production-release-asset-2e65be/80988227/4fdf0417-d097-4519-854b-133188c60e38?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20230613%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230613T095929Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=e434be09c0fc8a6700ce1027ae10bea8e2078b50c4f75167a9ed1f0895b82fcc&amp;X-Amz-SignedHeaders=host&amp;actor_id=59549826&amp;key_id=0&amp;repo_id=80988227&amp;response-content-disposition=attachment%3B filename%3Dmsys2-x86_64-20220603.exe&amp;response-content-type=application%2Foctet-stream), 在弹出的窗口中使用 <code>pacman -S --needed base-devel mingw-w64-x86_64-toolchain</code> 安装工具链</p><blockquote><p>MSYS (Minimal SYStem) 是一个轻量级的类 Unix 环境，是为 Windows 平台提供的一个集成开发环境。它是一种方便 Windows 用户模拟 Linux 环境和使用一些 Linux 工具的解决方案。</p><p>MSYS 最初是为了支持 MinGW (Minimalist GNU for Windows) 而创建的。MinGW 是一个用于生成 Windows 应用程序的 GCC 编译器的轻量级分发版，它不依赖于任何 Unix 系统，而 MSYS 提供了一些帮助 MinGW 工作的 Unix 工具，如 bash shell，以及许多常见 Unix 工具如 grep，sed，awk 等。</p><p>总的来说，MSYS 是一个简化的 POSIX/SUS 兼容的 Bourne shell 命令行解释器环境。使用它，开发者可以在 Windows 上运行自动化构建脚本，例如 Bash 脚本和 Makefile 等，从而使在 Windows 上编译 Unix 和 Linux 软件变得更加容易。</p></blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306131828445.png" alt="image-20230613182822283"></p><p>将 <code>msys64\\mingw64\\bin</code> 加到 <code>Path</code> 环境变量中重启 VSCode 加载环境变量即可</p>',4),V=s("li",null,[s("p",null,"安装 C++ 扩展"),s("p",null,[s("img",{src:"http://cdn.ayusummer233.top/img/202111250933328.png",alt:"Search for c++ in the Extensions view"})])],-1),T=s("p",null,[n("使用 VSCode 打开一个文件夹作为 C++ 工作区, 新建并编辑一个 cpp 文件, 程序编写完成后使用 "),s("code",null,"Ctrl + Shift + B"),n(" 快捷键调出 "),s("code",null,"build task"),n(" 窗口")],-1),O=s("li",null,[s("p",null,"如果看到的是这样的窗口那么直接选择 g++ 那项即可"),s("p",null,[s("img",{src:"http://cdn.ayusummer233.top/img/202111250936260.png",alt:"Select g++.exe task"})])],-1),R={href:"https://leojhonsong.github.io/zh-CN/2018/12/30/%E9%85%8D%E7%BD%AEVSCode%E4%B8%AD%E8%B0%83%E8%AF%95C-C-%E7%8E%AF%E5%A2%83/",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>配置备份:</p><ul><li><code>tasks.json</code><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span>
  <span class="token comment">// for the documentation about the tasks.json format</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;tasks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
          <span class="token property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Compile&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shell&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gcc&quot;</span><span class="token punctuation">,</span>
          <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token string">&quot;\${file}&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;-o&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;\${fileDirname}/\${fileBasenameNoExtension}.exe&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;-g&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;-Wall&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;-std=c++17&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;-lstdc++&quot;</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token property">&quot;kind&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
              <span class="token property">&quot;isDefault&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><code>launch.json</code><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>
    <span class="token comment">// Hover to view descriptions of existing attributes.</span>
    <span class="token comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(gdb) Launch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cppdbg&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}/\${fileBasenameNoExtension}.exe&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;stopAtEntry&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;environment&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;externalConsole&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token property">&quot;MIMode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gdb&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;miDebuggerPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gdb.exe&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;miDebuggerArgs&quot;</span><span class="token operator">:</span> <span class="token string">&quot;-q&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;setupCommands&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Enable pretty-printing for gdb&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;text&quot;</span><span class="token operator">:</span> <span class="token string">&quot;-enable-pretty-printing&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;ignoreFailures&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;preLaunchTask&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Compile&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,2),I={href:"https://stackoverflow.com/questions/28236870/undefined-reference-to-stdcout",target:"_blank",rel:"noopener noreferrer"},G=s("hr",null,null,-1),N=s("h2",{id:"实用工具",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#实用工具"},[s("span",null,"实用工具")])],-1),W=s("hr",null,null,-1),U=s("h3",{id:"快捷生成函数调用关系图",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#快捷生成函数调用关系图"},[s("span",null,"快捷生成函数调用关系图")])],-1),M={href:"https://github.com/scottrogowski/code2flow",target:"_blank",rel:"noopener noreferrer"},j=s("hr",null,null,-1),L=s("h4",{id:"callgraph",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#callgraph"},[s("span",null,"callgraph")])],-1),Y=s("hr",null,null,-1),Z=s("h6",{id:"ubuntu",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ubuntu"},[s("span",null,"Ubuntu")])],-1),K=s("li",null,[s("p",null,"目前在网上只找到了 Ubuntu 的使用方案")],-1),H=s("p",null,"流程",-1),X=s("li",null,[s("p",null,[n("安装 "),s("code",null,"cflow"),n(" 和 "),s("code",null,"graphviz")]),s("p",null,[s("code",null,"sudo apt-get install cflow graphviz")])],-1),J={href:"https://raw.githubusercontent.com/tinyclub/linux-0.11-lab/master/tools/tree2dotx",target:"_blank",rel:"noopener noreferrer"},Q=s("code",null,"callgraph",-1),ss=t(`<p>文件中的内容分别如下:</p><p><code>tree2dotx</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#</span>
<span class="token comment"># callgraph -- Generate a callgraph of a specified function in specified file/directory</span>
<span class="token comment">#</span>
<span class="token comment"># -- Based on cflow and tree2dotx</span>
<span class="token comment">#</span>
<span class="token comment"># Usage:</span>
<span class="token comment">#</span>
<span class="token comment">#       $ callgraph</span>
<span class="token comment">#</span>
<span class="token comment">#               -f func_name</span>
<span class="token comment">#               -d directory|file</span>
<span class="token comment">#               -F filterstr</span>
<span class="token comment">#               -D depth</span>
<span class="token comment">#               -o directory</span>
<span class="token comment">#</span>
<span class="token comment">#</span>
<span class="token comment"># Output: ../callgraph/func.dir_file_name.svg</span>
<span class="token comment">#</span>

<span class="token comment"># OS</span>
<span class="token assign-left variable">OS</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span><span class="token variable">)</span></span>

<span class="token comment"># Tree2Dot</span>
<span class="token assign-left variable">TOP_DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token punctuation">$(</span>dirname $0<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/
<span class="token assign-left variable">tree2dotx</span><span class="token operator">=</span><span class="token variable">\${TOP_DIR}</span>/tree2dotx

<span class="token comment"># Output directory</span>
<span class="token assign-left variable">OUT_DIR</span><span class="token operator">=</span><span class="token variable">\${TOP_DIR}</span>/<span class="token punctuation">..</span>/callgraph
<span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$OUT_DIR</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">OUT_DIR</span><span class="token operator">=</span>./
<span class="token assign-left variable">PIC_TYPE</span><span class="token operator">=</span>svg

<span class="token comment"># Get browser</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;x<span class="token variable">$OS</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;xDarwin&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token assign-left variable">BROWSER</span><span class="token operator">=</span>/Applications/Safari.app/Contents/MacOS/Safari
<span class="token keyword">else</span>
    <span class="token assign-left variable">BROWSER</span><span class="token operator">=</span>chromium-browser
<span class="token keyword">fi</span>

<span class="token comment"># Default setting</span>

<span class="token comment"># Input: Function Name [Directory Name]</span>
<span class="token assign-left variable">func</span><span class="token operator">=</span>main
<span class="token assign-left variable">dir</span><span class="token operator">=</span>./

<span class="token comment"># Default depth of the tree</span>
<span class="token assign-left variable">depth</span><span class="token operator">=</span>

<span class="token comment"># filterstr for tree2dotx</span>
<span class="token assign-left variable">filterstr</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span>

<span class="token comment"># Usage</span>

<span class="token keyword">function</span> <span class="token function-name function">usage</span>
<span class="token punctuation">{</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;  <span class="token variable">$0</span> &quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -f func_name&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -d directory|file&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -F filterstr&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -D depth&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -o directory&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&quot;F:f:d:D:o:b:h&quot;</span> opt<span class="token punctuation">;</span>
<span class="token keyword">do</span>
        <span class="token keyword">case</span> <span class="token variable">$opt</span> <span class="token keyword">in</span>
                F<span class="token punctuation">)</span>
                        <span class="token assign-left variable">filterstr</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                f<span class="token punctuation">)</span>
                        <span class="token assign-left variable">func</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                d<span class="token punctuation">)</span>
                        <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                D<span class="token punctuation">)</span>
                        <span class="token assign-left variable">depth</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                o<span class="token punctuation">)</span>
                        <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                        <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token variable">$output</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$output</span>
                        <span class="token assign-left variable">OUT_DIR</span><span class="token operator">=</span><span class="token variable">$output</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                b<span class="token punctuation">)</span>
                        <span class="token assign-left variable">BROWSER</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                h<span class="token operator">|</span>?<span class="token punctuation">)</span>
                        usage <span class="token variable">$0</span><span class="token punctuation">;</span>
                        <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">esac</span>
<span class="token keyword">done</span>

<span class="token comment"># Check the function and find out its file</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token variable">$dir</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">match</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">grep</span> <span class="token string">&quot; [a-zA-Z0-9_]*<span class="token variable">\${func}</span>[a-zA-Z0-9_]*(.*)&quot;</span> <span class="token parameter variable">-iur</span> $dir <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;\\.[ch]:&quot;</span><span class="token variable">\`</span></span>
	<span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$match</span>&quot;</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;:&#39;</span> <span class="token parameter variable">-f1</span><span class="token variable">\`</span></span>
<span class="token keyword">else</span>
	<span class="token assign-left variable">match</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$dir</span>&quot;</span><span class="token variable"><span class="token variable">\`</span><span class="token function">grep</span> <span class="token string">&quot; [a-zA-Z0-9_]*<span class="token variable">\${func}</span>[a-zA-Z0-9_]*(.*)&quot;</span> <span class="token parameter variable">-iur</span> $dir<span class="token variable">\`</span></span>
	<span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$dir</span>&quot;</span>
<span class="token keyword">fi</span>
<span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Note: No such function found: <span class="token variable">$func</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Func: <span class="token variable">$func</span>&quot;</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$file</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Note: No file found for <span class="token variable">$func</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>

<span class="token comment"># Let users choose the target files</span>
<span class="token assign-left variable">fileno</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $file <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-d</span> <span class="token string">&#39; &#39;</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-c</span><span class="token variable">\`</span></span>
<span class="token variable"><span class="token punctuation">((</span>fileno<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">))</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$fileno</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;Match: <span class="token variable">$fileno</span>&quot;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;File:&quot;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;     0  All files under <span class="token variable">$dir</span>&quot;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$match</span>&quot;</span> <span class="token operator">|</span> <span class="token function">cat</span> <span class="token parameter variable">-n</span>
	<span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>
	<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;Select: 0 ~ <span class="token variable">$fileno</span> ? &quot;</span> file_in
	<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
          <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-lt</span> <span class="token number">1</span> <span class="token parameter variable">-o</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-gt</span> <span class="token variable">$fileno</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
		<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;Select: 1 ~ <span class="token variable">$fileno</span> ? &quot;</span> file_in
	  <span class="token keyword">done</span>
	  <span class="token variable"><span class="token punctuation">((</span>file_in<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">))</span></span>
	  <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token variable">\${files<span class="token punctuation">[</span>$file_in<span class="token punctuation">]</span>}</span>
	  <span class="token variable"><span class="token punctuation">((</span>file_in<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">))</span></span>
        <span class="token keyword">fi</span>
<span class="token keyword">else</span>
	<span class="token assign-left variable">file_in</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$file</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Note: No file found for <span class="token variable">$func</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;File: <span class="token variable">$file</span>&quot;</span>
  <span class="token assign-left variable">func</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$match</span>&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token variable">\${file_in}</span>,<span class="token variable">\${file_in}</span>p&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;s/.* \\([a-zA-Z0-9_]*<span class="token variable">\${func}</span>[a-zA-Z0-9_]*\\)(.*).*/<span class="token entity" title="\\1">\\1</span>/p&quot;</span><span class="token variable">\`</span></span>
  <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$func</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Note: No such function found: <span class="token variable">$func</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">else</span>
  <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">\`</span><span class="token function">find</span> <span class="token parameter variable">-L</span> $dir <span class="token parameter variable">-name</span> <span class="token string">&#39;*.c&#39;</span> <span class="token parameter variable">-or</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;*.h&#39;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;\\n&#39;</span> <span class="token string">&#39; &#39;</span><span class="token variable">\`</span></span>&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Genrate the calling tree of this function</span>
<span class="token comment"># Convert it to .dot format with tree2dotx</span>
<span class="token comment"># Convert it to jpg format with dot of Graphviz</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $file <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;/&#39;</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;.&#39;</span> <span class="token string">&#39;_&#39;</span><span class="token variable">\`</span></span>
<span class="token keyword">else</span>
  <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token string">&quot;all&quot;</span>
<span class="token keyword">fi</span>
<span class="token assign-left variable">pic</span><span class="token operator">=</span><span class="token variable">\${func}</span><span class="token builtin class-name">.</span><span class="token variable">\${tmp}</span><span class="token builtin class-name">.</span><span class="token variable">\${PIC_TYPE}</span>
<span class="token assign-left variable">long_pic</span><span class="token operator">=</span><span class="token variable">\${OUT_DIR}</span>/<span class="token variable">\${pic}</span>

<span class="token function">which</span> cflow <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;Error: cflow doesn&#39;t exist, please install it...&quot;</span>
        <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">else</span>
        <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$depth</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">depth</span><span class="token operator">=</span><span class="token string">&quot; -d <span class="token variable">$depth</span> &quot;</span>
        <span class="token assign-left variable">calltree</span><span class="token operator">=</span><span class="token string">&quot;cflow -b <span class="token variable">$depth</span> -m &quot;</span>
<span class="token keyword">fi</span>

<span class="token function">which</span> dot <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;Error: dot doesn&#39;t exist, please install graphviz...&quot;</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;Command: <span class="token variable">\${calltree}</span><span class="token variable">\${func}</span> <span class="token variable">\${file}</span> | <span class="token variable">\${tree2dotx}</span> &quot;</span><span class="token variable">\${filterstr}</span><span class="token string">&quot; 2&gt;/dev/null | dot -T<span class="token variable">\${PIC_TYPE}</span> -o <span class="token variable">$long_pic</span>&quot;</span>
<span class="token variable">\${calltree}</span><span class="token variable">\${func}</span> <span class="token variable">\${file}</span> <span class="token operator">|</span> <span class="token variable">\${tree2dotx}</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;<span class="token variable">\${filterstr}</span>&quot;</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> dot -T<span class="token variable">\${PIC_TYPE}</span> <span class="token parameter variable">-o</span> <span class="token variable">$long_pic</span>

<span class="token comment"># Tell users</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Target: <span class="token variable">\${file}</span>: <span class="token variable">\${func}</span> -&gt; <span class="token variable">\${long_pic}</span>&quot;</span>

<span class="token comment"># Display it</span>
<span class="token function">which</span> <span class="token variable">$BROWSER</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span class="token variable">$BROWSER</span> <span class="token variable">\${long_pic}</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>callgraph</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#</span>
<span class="token comment"># callgraph -- Generate a callgraph of a specified function in specified file/directory</span>
<span class="token comment">#</span>
<span class="token comment"># -- Based on cflow and tree2dotx</span>
<span class="token comment">#</span>
<span class="token comment"># Usage:</span>
<span class="token comment">#</span>
<span class="token comment">#       $ callgraph</span>
<span class="token comment">#</span>
<span class="token comment">#               -f func_name</span>
<span class="token comment">#               -d directory|file</span>
<span class="token comment">#               -F filterstr</span>
<span class="token comment">#               -D depth</span>
<span class="token comment">#               -o directory</span>
<span class="token comment">#</span>
<span class="token comment">#</span>
<span class="token comment"># Output: ../callgraph/func.dir_file_name.svg</span>
<span class="token comment">#</span>

<span class="token comment"># OS</span>
<span class="token assign-left variable">OS</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span><span class="token variable">)</span></span>

<span class="token comment"># Tree2Dot</span>
<span class="token assign-left variable">TOP_DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> <span class="token punctuation">$(</span>dirname $0<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/
<span class="token assign-left variable">tree2dotx</span><span class="token operator">=</span><span class="token variable">\${TOP_DIR}</span>/tree2dotx

<span class="token comment"># Output directory</span>
<span class="token assign-left variable">OUT_DIR</span><span class="token operator">=</span><span class="token variable">\${TOP_DIR}</span>/<span class="token punctuation">..</span>/callgraph
<span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$OUT_DIR</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">OUT_DIR</span><span class="token operator">=</span>./
<span class="token assign-left variable">PIC_TYPE</span><span class="token operator">=</span>svg

<span class="token comment"># Get browser</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;x<span class="token variable">$OS</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;xDarwin&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token assign-left variable">BROWSER</span><span class="token operator">=</span>/Applications/Safari.app/Contents/MacOS/Safari
<span class="token keyword">else</span>
    <span class="token assign-left variable">BROWSER</span><span class="token operator">=</span>chromium-browser
<span class="token keyword">fi</span>

<span class="token comment"># Default setting</span>

<span class="token comment"># Input: Function Name [Directory Name]</span>
<span class="token assign-left variable">func</span><span class="token operator">=</span>main
<span class="token assign-left variable">dir</span><span class="token operator">=</span>./

<span class="token comment"># Default depth of the tree</span>
<span class="token assign-left variable">depth</span><span class="token operator">=</span>

<span class="token comment"># filterstr for tree2dotx</span>
<span class="token assign-left variable">filterstr</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span>

<span class="token comment"># Usage</span>

<span class="token keyword">function</span> <span class="token function-name function">usage</span>
<span class="token punctuation">{</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;  <span class="token variable">$0</span> &quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -f func_name&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -d directory|file&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -F filterstr&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -D depth&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;   -o directory&quot;</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&quot;F:f:d:D:o:b:h&quot;</span> opt<span class="token punctuation">;</span>
<span class="token keyword">do</span>
        <span class="token keyword">case</span> <span class="token variable">$opt</span> <span class="token keyword">in</span>
                F<span class="token punctuation">)</span>
                        <span class="token assign-left variable">filterstr</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                f<span class="token punctuation">)</span>
                        <span class="token assign-left variable">func</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                d<span class="token punctuation">)</span>
                        <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                D<span class="token punctuation">)</span>
                        <span class="token assign-left variable">depth</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                o<span class="token punctuation">)</span>
                        <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                        <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token variable">$output</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$output</span>
                        <span class="token assign-left variable">OUT_DIR</span><span class="token operator">=</span><span class="token variable">$output</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                b<span class="token punctuation">)</span>
                        <span class="token assign-left variable">BROWSER</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
                h<span class="token operator">|</span>?<span class="token punctuation">)</span>
                        usage <span class="token variable">$0</span><span class="token punctuation">;</span>
                        <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">esac</span>
<span class="token keyword">done</span>

<span class="token comment"># Check the function and find out its file</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">&quot;<span class="token variable">$dir</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">match</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">grep</span> <span class="token string">&quot; [a-zA-Z0-9_]*<span class="token variable">\${func}</span>[a-zA-Z0-9_]*(.*)&quot;</span> <span class="token parameter variable">-iur</span> $dir <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;\\.[ch]:&quot;</span><span class="token variable">\`</span></span>
	<span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$match</span>&quot;</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;:&#39;</span> <span class="token parameter variable">-f1</span><span class="token variable">\`</span></span>
<span class="token keyword">else</span>
	<span class="token assign-left variable">match</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$dir</span>&quot;</span><span class="token variable"><span class="token variable">\`</span><span class="token function">grep</span> <span class="token string">&quot; [a-zA-Z0-9_]*<span class="token variable">\${func}</span>[a-zA-Z0-9_]*(.*)&quot;</span> <span class="token parameter variable">-iur</span> $dir<span class="token variable">\`</span></span>
	<span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$dir</span>&quot;</span>
<span class="token keyword">fi</span>
<span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Note: No such function found: <span class="token variable">$func</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Func: <span class="token variable">$func</span>&quot;</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$file</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Note: No file found for <span class="token variable">$func</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>

<span class="token comment"># Let users choose the target files</span>
<span class="token assign-left variable">fileno</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $file <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-d</span> <span class="token string">&#39; &#39;</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-c</span><span class="token variable">\`</span></span>
<span class="token variable"><span class="token punctuation">((</span>fileno<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">))</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$fileno</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;Match: <span class="token variable">$fileno</span>&quot;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;File:&quot;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;     0  All files under <span class="token variable">$dir</span>&quot;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$match</span>&quot;</span> <span class="token operator">|</span> <span class="token function">cat</span> <span class="token parameter variable">-n</span>
	<span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>
	<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;Select: 0 ~ <span class="token variable">$fileno</span> ? &quot;</span> file_in
	<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
          <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-lt</span> <span class="token number">1</span> <span class="token parameter variable">-o</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-gt</span> <span class="token variable">$fileno</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
		<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">&quot;Select: 1 ~ <span class="token variable">$fileno</span> ? &quot;</span> file_in
	  <span class="token keyword">done</span>
	  <span class="token variable"><span class="token punctuation">((</span>file_in<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">))</span></span>
	  <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token variable">\${files<span class="token punctuation">[</span>$file_in<span class="token punctuation">]</span>}</span>
	  <span class="token variable"><span class="token punctuation">((</span>file_in<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">))</span></span>
        <span class="token keyword">fi</span>
<span class="token keyword">else</span>
	<span class="token assign-left variable">file_in</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$file</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Note: No file found for <span class="token variable">$func</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>
  <span class="token builtin class-name">echo</span> <span class="token string">&quot;File: <span class="token variable">$file</span>&quot;</span>
  <span class="token assign-left variable">func</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$match</span>&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;<span class="token variable">\${file_in}</span>,<span class="token variable">\${file_in}</span>p&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;s/.* \\([a-zA-Z0-9_]*<span class="token variable">\${func}</span>[a-zA-Z0-9_]*\\)(.*).*/<span class="token entity" title="\\1">\\1</span>/p&quot;</span><span class="token variable">\`</span></span>
  <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">&quot;<span class="token variable">$func</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Note: No such function found: <span class="token variable">$func</span>&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">else</span>
  <span class="token assign-left variable">file</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">\`</span><span class="token function">find</span> <span class="token parameter variable">-L</span> $dir <span class="token parameter variable">-name</span> <span class="token string">&#39;*.c&#39;</span> <span class="token parameter variable">-or</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;*.h&#39;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;\\n&#39;</span> <span class="token string">&#39; &#39;</span><span class="token variable">\`</span></span>&quot;</span>
<span class="token keyword">fi</span>

<span class="token comment"># Genrate the calling tree of this function</span>
<span class="token comment"># Convert it to .dot format with tree2dotx</span>
<span class="token comment"># Convert it to jpg format with dot of Graphviz</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$file_in</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $file <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;/&#39;</span> <span class="token string">&#39;_&#39;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;.&#39;</span> <span class="token string">&#39;_&#39;</span><span class="token variable">\`</span></span>
<span class="token keyword">else</span>
  <span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token string">&quot;all&quot;</span>
<span class="token keyword">fi</span>
<span class="token assign-left variable">pic</span><span class="token operator">=</span><span class="token variable">\${func}</span><span class="token builtin class-name">.</span><span class="token variable">\${tmp}</span><span class="token builtin class-name">.</span><span class="token variable">\${PIC_TYPE}</span>
<span class="token assign-left variable">long_pic</span><span class="token operator">=</span><span class="token variable">\${OUT_DIR}</span>/<span class="token variable">\${pic}</span>

<span class="token function">which</span> cflow <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">&quot;Error: cflow doesn&#39;t exist, please install it...&quot;</span>
        <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">else</span>
        <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;<span class="token variable">$depth</span>&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">depth</span><span class="token operator">=</span><span class="token string">&quot; -d <span class="token variable">$depth</span> &quot;</span>
        <span class="token assign-left variable">calltree</span><span class="token operator">=</span><span class="token string">&quot;cflow -b <span class="token variable">$depth</span> -m &quot;</span>
<span class="token keyword">fi</span>

<span class="token function">which</span> dot <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;Error: dot doesn&#39;t exist, please install graphviz...&quot;</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;Command: <span class="token variable">\${calltree}</span><span class="token variable">\${func}</span> <span class="token variable">\${file}</span> | <span class="token variable">\${tree2dotx}</span> &quot;</span><span class="token variable">\${filterstr}</span><span class="token string">&quot; 2&gt;/dev/null | dot -T<span class="token variable">\${PIC_TYPE}</span> -o <span class="token variable">$long_pic</span>&quot;</span>
<span class="token variable">\${calltree}</span><span class="token variable">\${func}</span> <span class="token variable">\${file}</span> <span class="token operator">|</span> <span class="token variable">\${tree2dotx}</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;<span class="token variable">\${filterstr}</span>&quot;</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">|</span> dot -T<span class="token variable">\${PIC_TYPE}</span> <span class="token parameter variable">-o</span> <span class="token variable">$long_pic</span>

<span class="token comment"># Tell users</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Target: <span class="token variable">\${file}</span>: <span class="token variable">\${func}</span> -&gt; <span class="token variable">\${long_pic}</span>&quot;</span>

<span class="token comment"># Display it</span>
<span class="token function">which</span> <span class="token variable">$BROWSER</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exit</span> <span class="token number">0</span>
<span class="token variable">$BROWSER</span> <span class="token variable">\${long_pic}</span> <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>给所有用户这两个文件的可执行权限</p><p><code>chmod u+x tree2dotx</code></p><p><code>chmod u+x callgraph</code></p></li><li><p>安装 <code>gawk</code></p><p>sudo apt-get install gawk</p></li><li><p>将需要分析的 cpp 文件放到上面那两个文件所在的目录下(以 main.cpp 含 main() 函数为例)</p><p>分析 main.cpp 文件中的 main 函数:</p><p><code>./callgraph -f main -d ./main.cpp</code></p><p><img src="http://cdn.ayusummer233.top/img/20210629200950.png" alt="image-20210629200950829"></p></li></ul>`,6),ns=s("hr",null,null,-1),as=s("h4",{id:"tceetree-cscope-graphviz",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#tceetree-cscope-graphviz"},[s("span",null,"tceetree + cscope + Graphviz")])],-1),es=s("li",null,"远古命令行操作, 貌似很旧了, 个人复现完成了但是没有完全完成, 所以只附个索引在这里(主要还是操作繁琐而且基本都是命令行操作, 我认为应该存在更有效的替代方式)",-1),ts={href:"https://sourceforge.net/p/tceetree/wiki/Home/",target:"_blank",rel:"noopener noreferrer"},ls=s("blockquote",null,[s("p",null,"cscope 的 win 版本需要访问 Google Code")],-1),ps=s("hr",null,null,-1),is=s("h4",{id:"visualstudio-code-graph-扩展",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#visualstudio-code-graph-扩展"},[s("span",null,"VisualStudio Code Graph 扩展")])],-1),os=s("p",null,"直接在 VS 扩展管理中搜索安装即可",-1),cs=s("p",null,[s("img",{src:"http://cdn.ayusummer233.top/img/20210630163511.png",alt:"image-20210630163504231"})],-1),rs=s("p",null,"貌似不错的样子, 但是结点要自行拉取, 所以我也只是浅尝辄止",-1),us=s("p",null,[s("img",{src:"http://cdn.ayusummer233.top/img/20210630163553.png",alt:"image-20210630163553198"})],-1),ds={href:"https://marketplace.visualstudio.com/items?itemName=YaobinOuyang.CodeAtlas",target:"_blank",rel:"noopener noreferrer"},vs=s("hr",null,null,-1),ks=s("h4",{id:"cppdepend",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#cppdepend"},[s("span",null,"CppDepend")])],-1),ms={href:"https://www.cppdepend.com/thank-you-for-downloading-cppdepend?os=win_exe&email=1369661643@qq.com",target:"_blank",rel:"noopener noreferrer"},bs=t('<blockquote><p>安装过程需要从国际互联网拉取更新</p></blockquote><p><img src="http://cdn.ayusummer233.top/img/20210630164031.png" alt="image-20210630164031212"></p><p><img src="http://cdn.ayusummer233.top/img/20210630164108.png" alt="image-20210630164107941"></p><p><img src="http://cdn.ayusummer233.top/img/20210630164122.png" alt="image-20210630164122764"></p><ul><li>个人使用体验确实不错, 只可惜 FreeTrial 只有 14 天试用, 个人付费又不是很合算, 中文互联网上相关信息又比较少, 不过这基本上算是给了我一个思路-&gt;代码分析工具, 那么就可以找寻相应国产或者中文互联网主流的代码分析工具试着看看有没有类似的功能可以为我所用</li></ul><blockquote><p>检索能力有限, 最终还是决定先用着 CppDepend, 它确实很对我胃口🤣</p></blockquote><hr><h2 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构"><span>数据结构</span></a></h2><hr><h3 id="结构体" tabindex="-1"><a class="header-anchor" href="#结构体"><span>结构体</span></a></h3><hr><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4>',12),hs={href:"https://blog.csdn.net/weixin_43914889/article/details/107869575",target:"_blank",rel:"noopener noreferrer"},gs=t(`<hr><h6 id="构造函数使用-快捷赋值" tabindex="-1"><a class="header-anchor" href="#构造函数使用-快捷赋值"><span>构造函数使用 <code>:</code> 快捷赋值</span></a></h6><p><code>结构体名(形参) ： 成员变量1(形参1) ，成员变量2(形参2) {}；</code></p><div class="language-C++ line-numbers-mode" data-ext="C++" data-title="C++"><pre class="language-C++"><code>#include &lt;iostream&gt;
using namespace std;

struct test_struct{
    int a;
    char b;
    test_struct(int a=0, char b=&#39;b&#39;): a(a), b(b){}
};

int main(){
    test_struct tmp1;
    test_struct tmp2(3,&#39;a&#39;);
    cout&lt;&lt;tmp1.a&lt;&lt;&quot; &quot;&lt;&lt;tmp1.b&lt;&lt;endl;
    cout&lt;&lt;tmp2.a&lt;&lt;&quot; &quot;&lt;&lt;tmp2.b&lt;&lt;endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210701221440.png" alt="image-20210701221440259"></p><hr><h6 id="实例化时使用-赋值初始化" tabindex="-1"><a class="header-anchor" href="#实例化时使用-赋值初始化"><span>实例化时使用 {} 赋值初始化</span></a></h6><div class="language-C++ line-numbers-mode" data-ext="C++" data-title="C++"><pre class="language-C++"><code>#include &lt;iostream&gt;
using namespace std;

struct test_struct{
    int a;
    char b;
};

int main(){
    test_struct tmp3 = {4, &#39;d&#39;};
    cout&lt;&lt;tmp3.a&lt;&lt;&quot; &quot;&lt;&lt;tmp3.b&lt;&lt;endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210701221836.png" alt="image-20210701221836704"></p><hr><h6 id="老老实实写构造函数初始化" tabindex="-1"><a class="header-anchor" href="#老老实实写构造函数初始化"><span>老老实实写构造函数初始化</span></a></h6><div class="language-C++ line-numbers-mode" data-ext="C++" data-title="C++"><pre class="language-C++"><code>#include &lt;iostream&gt;
using namespace std;

struct test_struct{
    int a;
    char b;
    test_struct(int a, char b){
        this-&gt;a = a;
        this-&gt;b = b;
    }
};

int main(){
    test_struct tmp4(5,&#39;a&#39;);
    test_struct tmp5 = {6, &#39;e&#39;};
    cout&lt;&lt;tmp4.a&lt;&lt;&quot; &quot;&lt;&lt;tmp4.b&lt;&lt;endl;
    cout&lt;&lt;tmp5.a&lt;&lt;&quot; &quot;&lt;&lt;tmp5.b&lt;&lt;endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210701222356.png" alt="image-20210701222356252"></p><hr><h6 id="支持将定义结构体和实例化结构体写在一起" tabindex="-1"><a class="header-anchor" href="#支持将定义结构体和实例化结构体写在一起"><span>支持将定义结构体和实例化结构体写在一起</span></a></h6><div class="language-C++ line-numbers-mode" data-ext="C++" data-title="C++"><pre class="language-C++"><code>#include &lt;iostream&gt;
using namespace std;

struct test_struct{
    int a;
    char b;
    test_struct(int a, char b){
        this-&gt;a = a;
        this-&gt;b = b;
    }
}tmp6 = {7, &#39;k&#39;};

int main(){
    cout&lt;&lt;tmp6.a&lt;&lt;&quot; &quot;&lt;&lt;tmp6.b&lt;&lt;endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210701224738.png" alt="image-20210701224738657"></p><hr><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><hr><h4 id="std-strcmp" tabindex="-1"><a class="header-anchor" href="#std-strcmp"><span>std::strcmp</span></a></h4><ul><li><p>定义于头文件 <code>&lt;cstring&gt;</code></p></li><li><p><code>int strcmp( const char *lhs, const char *rhs );</code></p></li><li><p>以字典序比较二个空终止字节字符串。</p><p>结果的符号是被比较的字符串中首对不同字符(都转译成 unsigned char ) 的值间的差值符号。</p><p>若 <code>lhs</code> 或 <code>rhs</code> 不是指向空终止字节字符串的指针，则行为未定义。</p></li><li><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h4><table><thead><tr><th>lhs, rhs</th><th>-</th><th>指向待比较的空终止字节字符串的指针</th></tr></thead></table><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h4><p>若字典序中 <code>lhs</code> 先出现于 <code>rhs</code> 则为负值。</p><p>若 <code>lhs</code> 与 <code>rhs</code> 比较相等则为零。</p><p>若字典序中 <code>lhs</code> 后出现于 <code>rhs</code> 则为正值。</p></li></ul><hr><h4 id="关于字符串与数字互相转换" tabindex="-1"><a class="header-anchor" href="#关于字符串与数字互相转换"><span>关于字符串与数字互相转换</span></a></h4><ul><li><p>若当前字符串内容确实为整数, 那么可以通过 <code>当前字符 - &#39;0&#39;</code> 返回一个整数</p><div class="language-C++ line-numbers-mode" data-ext="C++" data-title="C++"><pre class="language-C++"><code>#include &lt;iostream&gt;
using namespace std;

int main(){
    cout&lt;&lt;&#39;9&#39;-&#39;0&#39;&lt;&lt;endl;
    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/20210704192234.png" alt="image-20210704192227096"></p></li></ul><hr><h2 id="规范性" tabindex="-1"><a class="header-anchor" href="#规范性"><span>规范性</span></a></h2><hr><h3 id="头文件源文件" tabindex="-1"><a class="header-anchor" href="#头文件源文件"><span>头文件源文件</span></a></h3><ul><li>函数和变量可以在头文件中声明然后在源文件中定义, 但是常量最好直接在头文件中声明并定义, 分离开的话容易报错 <ul><li><p>在头文件中使用外部定义变量时, 在相应源文件中务必在函数外先进行一次初始化, 如果依赖函数进行初始化的话那也要先初始化为空, 否则会引起连接器错误;</p><blockquote><p>个人理解类似空的构造函数, 如果要先实例化对象后调用初始化函数进行初始化的话, 那么在实例化变量时会调用默认的(或者自定义的)空构造函数先进行一次&quot;空初始化&quot;</p><p>类似的在头文件外部定义的变量在源文件里要初始化, 如果要用函数初始化的话那么需要先进行一次&quot;空初始化&quot;</p></blockquote></li><li><p>static 变量在头文件使用外部定义的时候 extern 与 static 冲突, 去掉 static 即可, 毕竟都头文件外部定义了, 该变量仅此一份不与对象绑定, 已经是个静态变量了</p></li></ul></li></ul><hr><h3 id="注释相关" tabindex="-1"><a class="header-anchor" href="#注释相关"><span>注释相关</span></a></h3><hr><ul><li><p>行尾使用 // 进行注释, 或者在当前行的上面一行使用 // 注释, 或者在当前行的上面一行或多行使用 /* */进行块注释</p></li><li><p>需要注意的是光标移到变量上会显示的注释是变量定义时的注释</p><blockquote><p>也就是说如果在头文件中声明在源文件中定义的话, 那么光标移到变量上看到的注释是源文件中定义变量时给出的注释</p></blockquote></li></ul><hr><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h3 id="引用" tabindex="-1"><a class="header-anchor" href="#引用"><span>引用</span></a></h3><blockquote><p>C++ Primer Plus Chapter8.2</p></blockquote><p>C++ 新增了一种复合类型 -- 引用变量; 引用是已定义的变量的别名;</p><p>C++ 为 <code>&amp;</code> 符号赋予了除指示变量地址的另一个含义 <code>-&gt;</code> 用于声明引用</p><div class="language-C++ line-numbers-mode" data-ext="C++" data-title="C++"><pre class="language-C++"><code>// 例:
int rats;
int &amp; rodents = rats;  // makes rodents an alias for rats
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在声明引用的同时也必须将其初始化</li><li>引用一经与某个变量关联起来就将一致效忠于此变量</li></ul>`,42);function fs(Es,qs){const a=p("ExternalLinkIcon");return i(),o("div",null,[r,s("blockquote",null,[u,d,s("p",null,[s("a",v,[n("引自:为什么VS中会建议宏转换为constexpr？ - 知乎 (zhihu.com)"),e(a)])])]),k,m,s("p",null,[s("a",b,[n("节选自:constexpr 的来龙去脉-云科普blog (winkp.com)"),e(a)])]),h,s("ul",null,[s("li",null,[s("p",null,[s("a",g,[n("once pragma | Microsoft Docs"),e(a)])])]),f]),E,s("p",null,[s("a",q,[n("VS Code：使用VS的cl.exe编译运行C/C++程序_北冥有鱼wyh的博客-CSDN博客"),e(a)])]),s("p",null,[s("a",B,[n("VS：在windows上调用cl.exe编译运行C/C++程序 - 简书 (jianshu.com)"),e(a)])]),_,s("blockquote",null,[s("p",null,[s("a",C,[n("配置VSCode中调试C/C++环境 | LeoJhon.Song's Blog (leojhonsong.github.io)"),e(a)]),x,s("a",A,[n("Get Started with C++ and Mingw-w64 in Visual Studio Code"),e(a)]),$,s("a",y,[n("C++ programming with Visual Studio Code"),e(a)])]),w]),s("ul",null,[s("li",null,[S,s("p",null,[n("如果没有返回版本信息则说明未安装或配置其环境变量, 参阅 "),s("a",D,[n("C++ programming with Visual Studio Code --- 使用 Visual Studio Code 进行 C++ 编程"),e(a)]),n(),s("a",F,[n("C++ programming with Visual Studio Code-example-install-mingwx64"),e(a)]),n(" 完成其安装及环境变量的配置")]),P]),V,s("li",null,[T,s("ul",null,[O,s("li",null,[s("p",null,[n("如果没有看到检测到的项目而是让自定义配置文件的话那么可以参考 "),s("a",R,[n("配置VSCode中调试C/C++环境 | LeoJhon.Song's Blog (leojhonsong.github.io)"),e(a)]),n(" 中的配置项")])])])])]),z,s("blockquote",null,[s("p",null,[n("gcc std 报错: "),s("a",I,[n("c++ - undefined reference to 'std::cout' - Stack Overflow"),e(a)])])]),G,N,W,U,s("ul",null,[s("li",null,[n("之前也接触过快速生成 python 文件的函数关系调用图, 记得是 [code2flow]("),s("a",M,[n("scottrogowski/code2flow: Pretty good call graphs for dynamic languages (github.com)"),e(a)]),n(")")])]),j,L,Y,Z,s("ul",null,[K,s("li",null,[H,s("ul",null,[X,s("li",null,[s("p",null,[n("然后在合适的位置创建两个文件 "),s("a",J,[n("tree2dotx"),e(a)]),n(" 和 "),Q]),ss])])])]),ns,as,s("ul",null,[es,s("li",null,[s("a",ts,[n("官网Wiki: tceetree / Wiki / Home (sourceforge.net)"),e(a)])])]),ls,ps,is,os,cs,rs,us,s("p",null,[s("a",ds,[n("官方教程: Code Graph - Visual Studio Marketplace"),e(a)])]),vs,ks,s("ul",null,[s("li",null,[n("安装按成后才发现是一款代码分析软件, 还挺新的, 有 "),s("a",ms,[n("2021 的 FreeTrial 版本"),e(a)])])]),bs,s("p",null,[s("a",hs,[n("c++结构体几种初始化方法_skywf的博客-CSDN博客_c++ 结构体初始化"),e(a)])]),gs])}const Cs=l(c,[["render",fs],["__file","CPP.html.vue"]]),xs=JSON.parse('{"path":"/Language/CPlusPlus/CPP.html","title":"C++","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"VisualStudio2019 相关","slug":"visualstudio2019-相关","link":"#visualstudio2019-相关","children":[{"level":3,"title":"为什么VS中会建议宏转换为constexpr？","slug":"为什么vs中会建议宏转换为constexpr","link":"#为什么vs中会建议宏转换为constexpr","children":[]},{"level":3,"title":"C4996","slug":"c4996","link":"#c4996","children":[]},{"level":3,"title":"#pragma once","slug":"pragma-once","link":"#pragma-once","children":[]}]},{"level":2,"title":"VSCode","slug":"vscode","link":"#vscode","children":[{"level":3,"title":"在 VSCode 中调试 C++ 程序","slug":"在-vscode-中调试-c-程序","link":"#在-vscode-中调试-c-程序","children":[]}]},{"level":2,"title":"实用工具","slug":"实用工具","link":"#实用工具","children":[{"level":3,"title":"快捷生成函数调用关系图","slug":"快捷生成函数调用关系图","link":"#快捷生成函数调用关系图","children":[]}]},{"level":2,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[{"level":3,"title":"结构体","slug":"结构体","link":"#结构体","children":[]},{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]}]},{"level":2,"title":"规范性","slug":"规范性","link":"#规范性","children":[{"level":3,"title":"头文件源文件","slug":"头文件源文件","link":"#头文件源文件","children":[]},{"level":3,"title":"注释相关","slug":"注释相关","link":"#注释相关","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"引用","slug":"引用","link":"#引用","children":[]}]}],"git":{"createdTime":1679368870000,"updatedTime":1709635981000,"contributors":[{"name":"233Official","email":"ayusummer233@qq.com","commits":2},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":18.3,"words":5491},"filePathRelative":"Language/CPlusPlus/CPP.md","localizedDate":"2023年3月21日","excerpt":"\\n<ul>\\n<li><a href=\\"#c\\">C++</a>\\n<ul>\\n<li><a href=\\"#visualstudio2019-%E7%9B%B8%E5%85%B3\\">VisualStudio2019 相关</a>\\n<ul>\\n<li><a href=\\"#%E4%B8%BA%E4%BB%80%E4%B9%88vs%E4%B8%AD%E4%BC%9A%E5%BB%BA%E8%AE%AE%E5%AE%8F%E8%BD%AC%E6%8D%A2%E4%B8%BAconstexpr\\">为什么VS中会建议宏转换为constexpr？</a>\\n<ul>\\n<li><a href=\\"#constexpr\\">constexpr</a>\\n<ul>\\n<li><a href=\\"#%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8-constexpr-%E7%9A%84%E5%9C%BA%E6%99%AF\\">应该使用 constexpr 的场景</a></li>\\n<li><a href=\\"#%E4%B8%8D%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8-constexpr-%E7%9A%84%E5%9C%BA%E6%99%AF\\">不应该使用 constexpr 的场景</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#auto\\">auto</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#c4996\\">C4996</a>\\n<ul>\\n<li><a href=\\"#strcpy_s\\">strcpy_s</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#pragma-once\\">#pragma once</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#vscode\\">VSCode</a>\\n<ul>\\n<li><a href=\\"#%E5%9C%A8-vscode-%E4%B8%AD%E8%B0%83%E8%AF%95-c-%E7%A8%8B%E5%BA%8F\\">在 VSCode 中调试 C++ 程序</a>\\n<ul>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8-vs-%E7%9A%84-clexe\\">使用 VS 的 cl.exe</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8-gcc\\">使用 gcc</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7\\">实用工具</a>\\n<ul>\\n<li><a href=\\"#%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE\\">快捷生成函数调用关系图</a>\\n<ul>\\n<li><a href=\\"#callgraph\\">callgraph</a>\\n<ul>\\n<li><a href=\\"#ubuntu\\">Ubuntu</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#tceetree--cscope--graphviz\\">tceetree + cscope + Graphviz</a></li>\\n<li><a href=\\"#visualstudio-code-graph-%E6%89%A9%E5%B1%95\\">VisualStudio Code Graph 扩展</a></li>\\n<li><a href=\\"#cppdepend\\">CppDepend</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\\">数据结构</a>\\n<ul>\\n<li><a href=\\"#%E7%BB%93%E6%9E%84%E4%BD%93\\">结构体</a>\\n<ul>\\n<li><a href=\\"#%E5%88%9D%E5%A7%8B%E5%8C%96\\">初始化</a>\\n<ul>\\n<li><a href=\\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8--%E5%BF%AB%E6%8D%B7%E8%B5%8B%E5%80%BC\\">构造函数使用 <code>:</code> 快捷赋值</a></li>\\n<li><a href=\\"#%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%97%B6%E4%BD%BF%E7%94%A8--%E8%B5%8B%E5%80%BC%E5%88%9D%E5%A7%8B%E5%8C%96\\">实例化时使用 {} 赋值初始化</a></li>\\n<li><a href=\\"#%E8%80%81%E8%80%81%E5%AE%9E%E5%AE%9E%E5%86%99%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96\\">老老实实写构造函数初始化</a></li>\\n<li><a href=\\"#%E6%94%AF%E6%8C%81%E5%B0%86%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%99%E5%9C%A8%E4%B8%80%E8%B5%B7\\">支持将定义结构体和实例化结构体写在一起</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\\">字符串</a>\\n<ul>\\n<li><a href=\\"#stdstrcmp\\">std::strcmp</a></li>\\n<li><a href=\\"#%E8%BF%94%E5%9B%9E%E5%80%BC\\">返回值</a></li>\\n<li><a href=\\"#%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2\\">关于字符串与数字互相转换</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E8%A7%84%E8%8C%83%E6%80%A7\\">规范性</a>\\n<ul>\\n<li><a href=\\"#%E5%A4%B4%E6%96%87%E4%BB%B6%E6%BA%90%E6%96%87%E4%BB%B6\\">头文件源文件</a></li>\\n<li><a href=\\"#%E6%B3%A8%E9%87%8A%E7%9B%B8%E5%85%B3\\">注释相关</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%87%BD%E6%95%B0\\">函数</a>\\n<ul>\\n<li><a href=\\"#%E5%BC%95%E7%94%A8\\">引用</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{Cs as comp,xs as data};
