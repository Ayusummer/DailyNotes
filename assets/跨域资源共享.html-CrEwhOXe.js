import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as t,c as i,a as e,d as a,b as o,e as s}from"./app-DxMJFouC.js";const d={},p=s('<h1 id="跨域资源共享" tabindex="-1"><a class="header-anchor" href="#跨域资源共享"><span>跨域资源共享</span></a></h1><ul><li><a href="#%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB">跨域资源共享</a><ul><li><a href="#%E6%BA%90">源</a></li><li><a href="#%E6%AD%A5%E9%AA%A4">步骤</a></li><li><a href="#%E9%80%9A%E9%85%8D%E7%AC%A6">通配符</a></li><li><a href="#%E4%BD%BF%E7%94%A8-corsmiddleware">使用 CORSMiddleWare</a></li><li><a href="#cors-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82">CORS 预检请求</a></li><li><a href="#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82">简单请求</a></li></ul></li></ul><hr>',3),r={href:"https://fastapi.tiangolo.com/zh/tutorial/cors/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},u=s(`<hr><h2 id="源" tabindex="-1"><a class="header-anchor" href="#源"><span>源</span></a></h2><p>源是协议(<code>http</code>，<code>https</code>) 、域(<code>myapp.com</code>，<code>localhost</code>，<code>localhost.tiangolo.com</code>) 以及端口(<code>80</code>、<code>443</code>、<code>8080</code>) 的组合。</p><p>因此，这些都是不同的源：</p><ul><li><code>http://localhost</code></li><li><code>https://localhost</code></li><li><code>http://localhost:8080</code></li></ul><p>即使它们都在 <code>localhost</code> 中，但是它们使用不同的协议或者端口，所以它们都是不同的「源」。</p><hr><h2 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h2><p>假设你的浏览器中有一个前端运行在 <code>https://localhost:3100</code>，并且它的 JavaScript 正在尝试与运行在 <code>http://localhost:8000</code> 的后端通信</p><p>然后，浏览器会向后端发送一个 HTTP <code>OPTIONS</code> 请求，如果后端发送适当的 headers 来授权来自这个不同源(<code>https://localhost:3100</code>) 的通信，浏览器将允许前端的 JavaScript 向后端发送请求。</p><p>为此，后端必须有一个「允许的源」列表。</p><p>在这种情况下，它必须包含 <code>https://localhost:3100</code>，前端才能正常工作。</p><hr><h2 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符"><span>通配符</span></a></h2><p>也可以使用 <code>&quot;*&quot;</code>(一个「通配符」) 声明这个列表，表示全部都是允许的。</p><p>但这仅允许某些类型的通信，不包括所有涉及凭据的内容：像 Cookies 以及那些使用 Bearer 令牌的授权 headers 等。</p><p>因此，为了一切都能正常工作，最好显式地指定允许的源。</p><hr><h2 id="使用-corsmiddleware" tabindex="-1"><a class="header-anchor" href="#使用-corsmiddleware"><span>使用 CORSMiddleWare</span></a></h2><p>你可以在 <strong>FastAPI</strong> 应用中使用 <code>CORSMiddleware</code> 来配置它。</p><ul><li>导入 <code>CORSMiddleware</code>。</li><li>创建一个允许的源列表(由字符串组成) 。</li><li>将其作为「中间件」添加到你的 <strong>FastAPI</strong> 应用中。</li></ul><p>你也可以指定后端是否允许：</p><ul><li>凭证(授权 headers，Cookies 等) 。</li><li>特定的 HTTP 方法(<code>POST</code>，<code>PUT</code>) 或者使用通配符 <code>&quot;*&quot;</code> 允许所有方法。</li><li>特定的 HTTP headers 或者使用通配符 <code>&quot;*&quot;</code> 允许所有 headers。</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>cors <span class="token keyword">import</span> CORSMiddleware

origins <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;http://localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://localhost&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;http://localhost:3100&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;https://localhost:3100&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 跨域资源共享配置</span>
app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>
    CORSMiddleware<span class="token punctuation">,</span>
    allow_origins<span class="token operator">=</span>origins<span class="token punctuation">,</span>  <span class="token comment"># 跨域信任列表</span>
    allow_credentials<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># 允许使用整数</span>
    allow_methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 允许跨域的方法, *(通配符) 表示全部允许</span>
    allow_headers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment"># 允许的请求头, * 表示全部允许</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，这个 <code>CORSMiddleware</code> 实现所使用的默认参数较为保守，所以你需要显式地启用特定的源、方法或者 headers，以便浏览器能够在跨域上下文中使用它们。</p><p>支持以下参数：</p><ul><li><code>allow_origins</code> - 一个允许跨域请求的源列表。例如 <code>[&#39;https://example.org&#39;, &#39;https://www.example.org&#39;]</code>。你可以使用 <code>[&#39;*&#39;]</code> 允许任何源。</li><li><code>allow_origin_regex</code> - 一个正则表达式字符串，匹配的源允许跨域请求。例如 <code>&#39;https://.*\\.example\\.org&#39;</code>。</li><li><code>allow_methods</code> - 一个允许跨域请求的 HTTP 方法列表。默认为 <code>[&#39;GET&#39;]</code>。你可以使用 <code>[&#39;*&#39;]</code> 来允许所有标准方法。</li><li><code>allow_headers</code> - 一个允许跨域请求的 HTTP 请求头列表。默认为 <code>[]</code>。你可以使用 <code>[&#39;*&#39;]</code> 允许所有的请求头。<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code> 以及 <code>Content-Type</code> 请求头总是允许 CORS 请求。</li><li><code>allow_credentials</code> - 指示跨域请求支持 cookies。默认是 <code>False</code>。另外，允许凭证时 <code>allow_origins</code> 不能设定为 <code>[&#39;*&#39;]</code>，必须指定源。</li><li><code>expose_headers</code> - 指示可以被浏览器访问的响应头。默认为 <code>[]</code>。</li><li><code>max_age</code> - 设定浏览器缓存 CORS 响应的最长时间，单位是秒。默认为 <code>600</code>。</li></ul><p>中间件响应两种特定类型的 HTTP 请求……</p><hr><h2 id="cors-预检请求" tabindex="-1"><a class="header-anchor" href="#cors-预检请求"><span>CORS 预检请求</span></a></h2><p>这是些带有 <code>Origin</code> 和 <code>Access-Control-Request-Method</code> 请求头的 <code>OPTIONS</code> 请求。</p><p>在这种情况下，中间件将拦截传入的请求并进行响应，出于提供信息的目的返回一个使用了适当的 CORS headers 的 <code>200</code> 或 <code>400</code> 响应。</p><hr><h2 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求"><span>简单请求</span></a></h2><p>任何带有 <code>Origin</code> 请求头的请求。在这种情况下，中间件将像平常一样传递请求，但是在响应中包含适当的 CORS headers。</p><hr>`,36);function m(k,E){const n=c("ExternalLinkIcon");return t(),i("div",null,[p,e("blockquote",null,[e("p",null,[e("a",r,[a("CORS(跨域资源共享) - FastAPI (tiangolo.com)"),o(n)])])]),e("p",null,[e("a",h,[a("CORS 或者「跨域资源共享」"),o(n)]),a(" 指浏览器中运行的前端拥有与后端通信的 JavaScript 代码，而后端处于与前端不同的「源」的情况。")]),u])}const g=l(d,[["render",m],["__file","跨域资源共享.html.vue"]]),_=JSON.parse('{"path":"/%E5%90%8E%E7%AB%AF/FastAPI/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB.html","title":"跨域资源共享","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"源","slug":"源","link":"#源","children":[]},{"level":2,"title":"步骤","slug":"步骤","link":"#步骤","children":[]},{"level":2,"title":"通配符","slug":"通配符","link":"#通配符","children":[]},{"level":2,"title":"使用 CORSMiddleWare","slug":"使用-corsmiddleware","link":"#使用-corsmiddleware","children":[]},{"level":2,"title":"CORS 预检请求","slug":"cors-预检请求","link":"#cors-预检请求","children":[]},{"level":2,"title":"简单请求","slug":"简单请求","link":"#简单请求","children":[]}],"git":{"createdTime":1714457095000,"updatedTime":1714457095000,"contributors":[{"name":"233JG","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":3.37,"words":1011},"filePathRelative":"后端/FastAPI/跨域资源共享.md","localizedDate":"2024年4月30日","excerpt":"\\n<ul>\\n<li><a href=\\"#%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB\\">跨域资源共享</a>\\n<ul>\\n<li><a href=\\"#%E6%BA%90\\">源</a></li>\\n<li><a href=\\"#%E6%AD%A5%E9%AA%A4\\">步骤</a></li>\\n<li><a href=\\"#%E9%80%9A%E9%85%8D%E7%AC%A6\\">通配符</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8-corsmiddleware\\">使用 CORSMiddleWare</a></li>\\n<li><a href=\\"#cors-%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82\\">CORS 预检请求</a></li>\\n<li><a href=\\"#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82\\">简单请求</a></li>\\n</ul>\\n</li>\\n</ul>"}');export{g as comp,_ as data};
