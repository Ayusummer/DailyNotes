import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DxMJFouC.js";const p={},e=t(`<h1 id="ch4-复合数据类型" tabindex="-1"><a class="header-anchor" href="#ch4-复合数据类型"><span>CH4-复合数据类型</span></a></h1><hr><ul><li><a href="#ch4-%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">CH4-复合数据类型</a><ul><li><a href="#ch41%E6%95%B0%E7%BB%84">CH4.1.数组</a><ul><li><a href="#%E7%BB%83%E4%B9%A041%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AAsha256%E4%B8%AD%E4%B8%8D%E5%90%8Cbit%E7%9A%84%E6%95%B0%E7%9B%AE">练习4.1.计算两个sha256中不同bit的数目</a></li><li><a href="#%E7%BB%83%E4%B9%A042%E8%AE%A1%E7%AE%97%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%93%88%E5%B8%8C">练习4.2.计算输入字符串的哈希</a></li></ul></li><li><a href="#ch42slice">CH4.2.Slice</a><ul><li><a href="#%E7%BB%83%E4%B9%A043%E9%87%8D%E5%86%99reverse%E5%87%BD%E6%95%B0">练习4.3.重写reverse函数</a></li><li><a href="#%E7%BB%83%E4%B9%A044%E7%BC%96%E5%86%99%E6%97%8B%E8%BD%AC%E5%87%BD%E6%95%B0">练习4.4.编写旋转函数</a></li><li><a href="#%E7%BB%83%E4%B9%A045%E6%B6%88%E9%99%A4%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2">练习4.5.消除相邻重复字符串</a></li><li><a href="#%E7%BB%83%E4%B9%A046%E5%8E%BB%E9%99%A4%E7%9B%B8%E9%82%BB%E7%A9%BA%E6%A0%BC">练习4.6.去除相邻空格</a></li><li><a href="#%E7%BB%83%E4%B9%A047%E7%BF%BB%E8%BD%ACslice">练习4.7.翻转Slice</a></li></ul></li><li><a href="#ch43map">CH4.3.Map</a><ul><li><a href="#%E7%BB%83%E4%B9%A048%E9%87%8D%E5%86%99charcount">练习4.8.重写charcount</a></li><li><a href="#%E7%BB%83%E4%B9%A049%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1">练习4.9.词频统计</a></li></ul></li><li><a href="#ch44%E7%BB%93%E6%9E%84%E4%BD%93">CH4.4.结构体</a></li><li><a href="#ch45json">CH4.5.Json</a><ul><li><a href="#%E7%BB%83%E4%B9%A0410%E4%BF%AE%E6%94%B9issues%E7%A8%8B%E5%BA%8F%E6%8C%89%E7%85%A7%E6%97%B6%E9%97%B4%E5%88%86%E7%B1%BB">练习4.10.修改issues程序按照时间分类</a></li><li><a href="#%E7%BB%83%E4%B9%A0411">练习4.11</a></li><li><a href="#%E7%BB%83%E4%B9%A0412">练习4.12</a></li></ul></li></ul></li></ul><hr><h2 id="ch4-1-数组" tabindex="-1"><a class="header-anchor" href="#ch4-1-数组"><span>CH4.1.数组</span></a></h2><h3 id="练习4-1-计算两个sha256中不同bit的数目" tabindex="-1"><a class="header-anchor" href="#练习4-1-计算两个sha256中不同bit的数目"><span>练习4.1.计算两个sha256中不同bit的数目</span></a></h3><p><strong>练习 4.1：</strong> 编写一个函数，计算两个SHA256哈希码中不同bit的数目。（参考2.6.2节的PopCount函数。)</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 编写一个函数，计算两个SHA256哈希码中不同bit的数目</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;crypto/sha256&quot;</span>

<span class="token comment">// 比较两个 SHA256 哈希码中不同 bit 的数量</span>
<span class="token keyword">func</span> <span class="token function">diffBitCount</span><span class="token punctuation">(</span>hash1<span class="token punctuation">,</span> hash2 <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	count <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token comment">// 异或操作，相同为 0，不同为 1</span>
		diff <span class="token operator">:=</span> hash1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> hash2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		diff_int <span class="token operator">:=</span> <span class="token function">popCountUint8</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span>
		<span class="token comment">// 计算不同 bit 的数量</span>
		count <span class="token operator">+=</span> diff_int
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count
<span class="token punctuation">}</span>

<span class="token comment">// 计算一个 unit8 中 1 的数量</span>
<span class="token keyword">func</span> <span class="token function">popCountUint8</span><span class="token punctuation">(</span>x <span class="token builtin">uint8</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	count <span class="token operator">:=</span> <span class="token number">0</span>
	<span class="token keyword">for</span> x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
		count<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> count
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	c1 <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	c2 <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;X&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">diffBitCount</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423112001917.png" alt="image-20240423112001917"></p><hr><h3 id="练习4-2-计算输入字符串的哈希" tabindex="-1"><a class="header-anchor" href="#练习4-2-计算输入字符串的哈希"><span>练习4.2.计算输入字符串的哈希</span></a></h3><p><strong>练习 4.2：</strong> 编写一个程序，默认情况下打印标准输入的SHA256编码，并支持通过命令行flag定制，输出SHA384或SHA512哈希算法。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 编写一个程序，默认情况下打印标准输入的SHA256编码，并支持通过命令行flag定制，输出SHA384或SHA512哈希算法。</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bufio&quot;</span>
	<span class="token string">&quot;crypto/sha256&quot;</span>
	<span class="token string">&quot;crypto/sha512&quot;</span>
	<span class="token string">&quot;flag&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// 计算数据的 SHA256 哈希码</span>
<span class="token keyword">func</span> <span class="token function">sha256Hash</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	sha256 <span class="token operator">:=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> sha256<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 计算数据的 SHA384 哈希码</span>
<span class="token keyword">func</span> <span class="token function">sha384Hash</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	sha384 <span class="token operator">:=</span> sha512<span class="token punctuation">.</span><span class="token function">Sum384</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> sha384<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 计算数据的 SHA512 哈希码</span>
<span class="token keyword">func</span> <span class="token function">sha512Hash</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	sha512 <span class="token operator">:=</span> sha512<span class="token punctuation">.</span><span class="token function">Sum512</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%x&quot;</span><span class="token punctuation">,</span> sha512<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> hashType <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;ht&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sha256&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hashType-支持 sha256, sha384, sha512&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	hashType <span class="token operator">:=</span> <span class="token operator">*</span>hashType

	<span class="token comment">// 如果输入的哈希类型不支持，则退出</span>
	<span class="token keyword">if</span> hashType <span class="token operator">!=</span> <span class="token string">&quot;sha256&quot;</span> <span class="token operator">&amp;&amp;</span> hashType <span class="token operator">!=</span> <span class="token string">&quot;sha384&quot;</span> <span class="token operator">&amp;&amp;</span> hashType <span class="token operator">!=</span> <span class="token string">&quot;sha512&quot;</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;不支持的哈希类型 %s\\n&quot;</span><span class="token punctuation">,</span> hashType<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入需要计算 %s 哈希码的数据，输入 exit 退出\\n&quot;</span><span class="token punctuation">,</span> hashType<span class="token punctuation">)</span>

	<span class="token comment">// 读取一行输入</span>
	input <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
	<span class="token keyword">for</span> input<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 遇到  exit 时退出</span>
		<span class="token keyword">if</span> input<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;exit&quot;</span> <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>

		data <span class="token operator">:=</span> input<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">switch</span> hashType <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token string">&quot;sha256&quot;</span><span class="token punctuation">:</span>
			hash <span class="token operator">:=</span> <span class="token function">sha256Hash</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;sha384&quot;</span><span class="token punctuation">:</span>
			hash <span class="token operator">:=</span> <span class="token function">sha384Hash</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token string">&quot;sha512&quot;</span><span class="token punctuation">:</span>
			hash <span class="token operator">:=</span> <span class="token function">sha512Hash</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;不支持的哈希类型 %s\\n&quot;</span><span class="token punctuation">,</span> hashType<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423112226914.png" alt="image-20240423112226914"></p><hr><h2 id="ch4-2-slice" tabindex="-1"><a class="header-anchor" href="#ch4-2-slice"><span>CH4.2.Slice</span></a></h2><p>Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。一个slice类型一般写作[]T，其中T代表slice中元素的类型；slice的语法和数组很像，只是没有固定长度而已。</p><hr><h3 id="练习4-3-重写reverse函数" tabindex="-1"><a class="header-anchor" href="#练习4-3-重写reverse函数"><span>练习4.3.重写reverse函数</span></a></h3><p><strong>练习 4.3：</strong> 重写reverse函数，使用数组指针代替slice。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 重写reverse函数，使用数组指针代替slice。</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token comment">// 重写reverse函数，使用数组指针代替slice。</span>
<span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
		<span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
	<span class="token function">reverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423113945354.png" alt="image-20240423113945354"></p><hr><h3 id="练习4-4-编写旋转函数" tabindex="-1"><a class="header-anchor" href="#练习4-4-编写旋转函数"><span>练习4.4.编写旋转函数</span></a></h3><p><strong>练习 4.4：</strong> 编写一个rotate函数，通过一次循环完成旋转。</p><p>利用 apppend 把开头的 n 个元素追加到 slice 的尾部然后从 n 位置截取到末尾返回即可</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token comment">// 编写一个rotate函数，通过一次循环完成旋转 slice 中的所有元素。</span>
<span class="token keyword">func</span> <span class="token function">rotate</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s<span class="token punctuation">[</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;旋转前：%v\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
	a <span class="token operator">=</span> <span class="token function">rotate</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;旋转 2 位后：%v\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423133818261.png" alt="image-20240423133818261"></p><hr><h3 id="练习4-5-消除相邻重复字符串" tabindex="-1"><a class="header-anchor" href="#练习4-5-消除相邻重复字符串"><span>练习4.5.消除相邻重复字符串</span></a></h3><p><strong>练习 4.5：</strong> 写一个函数在原地完成消除[]string中相邻重复的字符串的操作。</p><p>相邻比较, copy 移位然后重新切片即可</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token comment">// 写一个函数在原地完成消除[]string中相邻重复的字符串的操作。 写一个函数在原地完成消除[]string中相邻重复的字符串的操作。</span>
<span class="token keyword">func</span> <span class="token function">removeDuplicate</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 直接在原 slice 上操作, 无需返回值</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
			<span class="token comment">// 删除重复的元素</span>
			<span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			<span class="token comment">// 重新切片</span>
			s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
			i<span class="token operator">--</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;去重后：%v\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;原始 slice：%v\\n&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	<span class="token function">removeDuplicate</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="练习4-6-去除相邻空格" tabindex="-1"><a class="header-anchor" href="#练习4-6-去除相邻空格"><span>练习4.6.去除相邻空格</span></a></h3><p><strong>练习 4.6：</strong> 编写一个函数，原地将一个UTF-8编码的[]byte类型的slice中相邻的空格（参考unicode.IsSpace）替换成一个空格返回</p><p>和上一题差不多的思路, 把重复字符改成空格了而已</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token comment">// 编写一个函数，原地将一个UTF-8编码的[]byte类型的slice中相邻的空格（参考unicode.IsSpace）替换成一个空格返回</span>
<span class="token keyword">func</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span> <span class="token punctuation">{</span>
			<span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
			i<span class="token operator">--</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;a b  c   d    e&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;原始 slice：%v\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
	s <span class="token operator">=</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;去除重复空格后：%v\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423142903164.png" alt="image-20240423142903164"></p><hr><h3 id="练习4-7-翻转slice" tabindex="-1"><a class="header-anchor" href="#练习4-7-翻转slice"><span>练习4.7.翻转Slice</span></a></h3><p><strong>练习 4.7：</strong> 修改reverse函数用于原地反转UTF-8编码的[]byte。是否可以不用分配额外的内存？</p><p>感觉描述的不是很清楚, reverse 函数本身就是在原地操作的</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// reverse reverses a slice of ints in place.</span>
<span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>
		s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="ch4-3-map" tabindex="-1"><a class="header-anchor" href="#ch4-3-map"><span>CH4.3.Map</span></a></h2><h3 id="练习4-8-重写charcount" tabindex="-1"><a class="header-anchor" href="#练习4-8-重写charcount"><span>练习4.8.重写charcount</span></a></h3><p><strong>练习 4.8：</strong> 修改charcount程序，使用unicode.IsLetter等相关的函数，统计字母、数字等Unicode中不同的字符类别。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 修改charcount程序，使用unicode.IsLetter等相关的函数，统计字母、数字等Unicode中不同的字符类别。</span>

<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bufio&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;io&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;unicode&quot;</span>
	<span class="token string">&quot;unicode/utf8&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	counts <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
		<span class="token string">&quot;letter&quot;</span><span class="token punctuation">:</span>  <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token string">&quot;digit&quot;</span><span class="token punctuation">:</span>   <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token string">&quot;space&quot;</span><span class="token punctuation">:</span>   <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token string">&quot;punct&quot;</span><span class="token punctuation">:</span>   <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token string">&quot;control&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token string">&quot;other&quot;</span><span class="token punctuation">:</span>   <span class="token number">0</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">var</span> utflen <span class="token punctuation">[</span>utf8<span class="token punctuation">.</span>UTFMax <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// count of lengths of UTF-8 encodings</span>
	invalid <span class="token operator">:=</span> <span class="token number">0</span>                    <span class="token comment">// count of invalid UTF-8 characters</span>

	in <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		r<span class="token punctuation">,</span> n<span class="token punctuation">,</span> err <span class="token operator">:=</span> in<span class="token punctuation">.</span><span class="token function">ReadRune</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns rune, nbytes, error</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
			<span class="token keyword">break</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;charcount: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>

		<span class="token keyword">if</span> r <span class="token operator">==</span> utf8<span class="token punctuation">.</span>RuneError <span class="token operator">&amp;&amp;</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>
			invalid<span class="token operator">++</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">switch</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> unicode<span class="token punctuation">.</span><span class="token function">IsLetter</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
			counts<span class="token punctuation">[</span><span class="token string">&quot;letter&quot;</span><span class="token punctuation">]</span><span class="token operator">++</span>
		<span class="token keyword">case</span> unicode<span class="token punctuation">.</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
			counts<span class="token punctuation">[</span><span class="token string">&quot;digit&quot;</span><span class="token punctuation">]</span><span class="token operator">++</span>
		<span class="token keyword">case</span> unicode<span class="token punctuation">.</span><span class="token function">IsSpace</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
			counts<span class="token punctuation">[</span><span class="token string">&quot;space&quot;</span><span class="token punctuation">]</span><span class="token operator">++</span>
		<span class="token keyword">case</span> unicode<span class="token punctuation">.</span><span class="token function">IsPunct</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
			counts<span class="token punctuation">[</span><span class="token string">&quot;punct&quot;</span><span class="token punctuation">]</span><span class="token operator">++</span>
		<span class="token keyword">case</span> unicode<span class="token punctuation">.</span><span class="token function">IsControl</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>
			counts<span class="token punctuation">[</span><span class="token string">&quot;control&quot;</span><span class="token punctuation">]</span><span class="token operator">++</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
			counts<span class="token punctuation">[</span><span class="token string">&quot;other&quot;</span><span class="token punctuation">]</span><span class="token operator">++</span>
		<span class="token punctuation">}</span>
		utflen<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">++</span>

	<span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;category\\tcount\\n&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> c<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> counts <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%q\\t%d\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nlen\\tcount\\n&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> utflen <span class="token punctuation">{</span>
		<span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\t%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> invalid <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n%d invalid UTF-8 characters\\n&quot;</span><span class="token punctuation">,</span> invalid<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423151539764.png" alt="image-20240423151539764"></p><hr><h3 id="练习4-9-词频统计" tabindex="-1"><a class="header-anchor" href="#练习4-9-词频统计"><span>练习4.9.词频统计</span></a></h3><p><strong>练习 4.9：</strong> 编写一个程序wordfreq程序，报告输入文本中每个单词出现的频率。在第一次调用Scan前先调用input.Split(bufio.ScanWords)函数，这样可以按单词而不是按行输入。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bufio&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> count <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>

	scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
	scanner<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>bufio<span class="token punctuation">.</span>ScanWords<span class="token punctuation">)</span>
	<span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		count<span class="token punctuation">[</span>scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> count <span class="token punctuation">{</span>
		<span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Sed ac tellus eu odio commodo ornare. 
Praesent bibendum ex vel massa consectetur, et vulputate lacus sodales. 
Donec eu ante mauris. Cras vitae risus sed magna elementum congue.
Curabitur condimentum augue non leo bibendum, at ultrices tortor dictum.
Vivamus et aliquet eros. Fusce fringilla, justo id varius posuere, eros nisl faucibus lacus, 
sit amet pellentesque magna eros quis urna.
ibendum ex vel massa consectetur, et vulputate lacus sodales. 
Donec eu ante mauris. Cras vitae risus sed magna elementum congue.
Curabitur condimentum augue non leo bibendum, at ultrices tortor dictum.
Vivamus et aliquet eros. Fusce fringilla, justo id var
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423152039118.png" alt="image-20240423152039118"></p><hr><h2 id="ch4-4-结构体" tabindex="-1"><a class="header-anchor" href="#ch4-4-结构体"><span>CH4.4.结构体</span></a></h2><hr><h2 id="ch4-5-json" tabindex="-1"><a class="header-anchor" href="#ch4-5-json"><span>CH4.5.Json</span></a></h2><hr><h3 id="练习4-10-修改issues程序按照时间分类" tabindex="-1"><a class="header-anchor" href="#练习4-10-修改issues程序按照时间分类"><span>练习4.10.修改issues程序按照时间分类</span></a></h3><p><strong>练习 4.10：</strong> 修改issues程序，根据问题的时间进行分类，比如不到一个月的、不到一年的、超过一年。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 修改issues程序，根据问题的时间进行分类，比如不到一个月的、不到一年的、超过一年。</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;time&quot;</span>

	github <span class="token string">&quot;GoLearning/Chapter/ch4/ch4_5_json/github&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 获取当前时间(年月日)</span>
	currentDate <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 一个月前的时间</span>
	oneMonthAgo <span class="token operator">:=</span> currentDate<span class="token punctuation">.</span><span class="token function">AddDate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token comment">// 一年前的时间</span>
	oneYearAgo <span class="token operator">:=</span> currentDate<span class="token punctuation">.</span><span class="token function">AddDate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

	classifyIssues <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>github<span class="token punctuation">.</span>Issue<span class="token punctuation">{</span>
		<span class="token string">&quot;一个月内&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>github<span class="token punctuation">.</span>Issue<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string">&quot;一年内&quot;</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>github<span class="token punctuation">.</span>Issue<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string">&quot;一年前&quot;</span><span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>github<span class="token punctuation">.</span>Issue<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// result, err := github.SearchIssues(os.Args[1:])</span>
	<span class="token keyword">var</span> repo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;PKUFlyingPig/cs-self-learning&quot;</span><span class="token punctuation">}</span>
	result<span class="token punctuation">,</span> err <span class="token operator">:=</span> github<span class="token punctuation">.</span><span class="token function">SearchIssues</span><span class="token punctuation">(</span>repo<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d issues:\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>TotalCount<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> result<span class="token punctuation">.</span>Items <span class="token punctuation">{</span>
		<span class="token keyword">if</span> item<span class="token punctuation">.</span>CreatedAt<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>oneMonthAgo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			classifyIssues<span class="token punctuation">[</span><span class="token string">&quot;一个月内&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>classifyIssues<span class="token punctuation">[</span><span class="token string">&quot;一个月内&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> item<span class="token punctuation">.</span>CreatedAt<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>oneYearAgo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			classifyIssues<span class="token punctuation">[</span><span class="token string">&quot;一年内&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>classifyIssues<span class="token punctuation">[</span><span class="token string">&quot;一年内&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			classifyIssues<span class="token punctuation">[</span><span class="token string">&quot;一年前&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>classifyIssues<span class="token punctuation">[</span><span class="token string">&quot;一年前&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> classifyIssues <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Issues %s:\\n&quot;</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> v <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;#%-5d %9.9s %.55s %v\\n&quot;</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>Number<span class="token punctuation">,</span> item<span class="token punctuation">.</span>User<span class="token punctuation">.</span>Login<span class="token punctuation">,</span> item<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> item<span class="token punctuation">.</span>CreatedAt<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423160903579.png" alt="image-20240423160903579"></p><hr><h3 id="练习4-11" tabindex="-1"><a class="header-anchor" href="#练习4-11"><span>练习4.11</span></a></h3><p><strong>练习 4.11：</strong> 编写一个工具，允许用户在命令行创建、读取、更新和关闭GitHub上的issue，当必要的时候自动打开用户默认的编辑器用于输入文本信息。</p><blockquote><p>调接口,暂时没需求,暂时不写了(</p></blockquote><hr><h3 id="练习4-12" tabindex="-1"><a class="header-anchor" href="#练习4-12"><span>练习4.12</span></a></h3><p><strong>练习 4.12：</strong> 流行的web漫画服务xkcd也提供了JSON接口。例如，一个 https://xkcd.com/571/info.0.json 请求将返回一个很多人喜爱的571编号的详细描述。下载每个链接（只下载一次）然后创建一个离线索引。编写一个xkcd工具，使用这些离线索引，打印和命令行输入的检索词相匹配的漫画的URL。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240423161440046.png" alt="image-20240423161440046"></p><p>单页漫画, 离线索引好做, 搞个 json 列表就行了, 简单做 571-580 十个索引</p><p><strong>练习 4.13：</strong> 使用开放电影数据库的JSON服务接口，允许你检索和下载 https://omdbapi.com/ 上电影的名字和对应的海报图像。编写一个poster工具，通过命令行输入的电影名字，下载对应的海报。</p>`,75),o=[e];function c(i,l){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","CH4-复合数据类型.html.vue"]]),d=JSON.parse('{"path":"/Language/Go/Go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F/CH4-%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"CH4-复合数据类型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"CH4.1.数组","slug":"ch4-1-数组","link":"#ch4-1-数组","children":[{"level":3,"title":"练习4.1.计算两个sha256中不同bit的数目","slug":"练习4-1-计算两个sha256中不同bit的数目","link":"#练习4-1-计算两个sha256中不同bit的数目","children":[]},{"level":3,"title":"练习4.2.计算输入字符串的哈希","slug":"练习4-2-计算输入字符串的哈希","link":"#练习4-2-计算输入字符串的哈希","children":[]}]},{"level":2,"title":"CH4.2.Slice","slug":"ch4-2-slice","link":"#ch4-2-slice","children":[{"level":3,"title":"练习4.3.重写reverse函数","slug":"练习4-3-重写reverse函数","link":"#练习4-3-重写reverse函数","children":[]},{"level":3,"title":"练习4.4.编写旋转函数","slug":"练习4-4-编写旋转函数","link":"#练习4-4-编写旋转函数","children":[]},{"level":3,"title":"练习4.5.消除相邻重复字符串","slug":"练习4-5-消除相邻重复字符串","link":"#练习4-5-消除相邻重复字符串","children":[]},{"level":3,"title":"练习4.6.去除相邻空格","slug":"练习4-6-去除相邻空格","link":"#练习4-6-去除相邻空格","children":[]},{"level":3,"title":"练习4.7.翻转Slice","slug":"练习4-7-翻转slice","link":"#练习4-7-翻转slice","children":[]}]},{"level":2,"title":"CH4.3.Map","slug":"ch4-3-map","link":"#ch4-3-map","children":[{"level":3,"title":"练习4.8.重写charcount","slug":"练习4-8-重写charcount","link":"#练习4-8-重写charcount","children":[]},{"level":3,"title":"练习4.9.词频统计","slug":"练习4-9-词频统计","link":"#练习4-9-词频统计","children":[]}]},{"level":2,"title":"CH4.4.结构体","slug":"ch4-4-结构体","link":"#ch4-4-结构体","children":[]},{"level":2,"title":"CH4.5.Json","slug":"ch4-5-json","link":"#ch4-5-json","children":[{"level":3,"title":"练习4.10.修改issues程序按照时间分类","slug":"练习4-10-修改issues程序按照时间分类","link":"#练习4-10-修改issues程序按照时间分类","children":[]},{"level":3,"title":"练习4.11","slug":"练习4-11","link":"#练习4-11","children":[]},{"level":3,"title":"练习4.12","slug":"练习4-12","link":"#练习4-12","children":[]}]}],"git":{"createdTime":1713869216000,"updatedTime":1713869216000,"contributors":[{"name":"233JG","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":8.48,"words":2544},"filePathRelative":"Language/Go/Go语言圣经/CH4-复合数据类型.md","localizedDate":"2024年4月23日","excerpt":"\\n<hr>\\n<ul>\\n<li><a href=\\"#ch4-%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\\">CH4-复合数据类型</a>\\n<ul>\\n<li><a href=\\"#ch41%E6%95%B0%E7%BB%84\\">CH4.1.数组</a>\\n<ul>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A041%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AAsha256%E4%B8%AD%E4%B8%8D%E5%90%8Cbit%E7%9A%84%E6%95%B0%E7%9B%AE\\">练习4.1.计算两个sha256中不同bit的数目</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A042%E8%AE%A1%E7%AE%97%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%93%88%E5%B8%8C\\">练习4.2.计算输入字符串的哈希</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch42slice\\">CH4.2.Slice</a>\\n<ul>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A043%E9%87%8D%E5%86%99reverse%E5%87%BD%E6%95%B0\\">练习4.3.重写reverse函数</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A044%E7%BC%96%E5%86%99%E6%97%8B%E8%BD%AC%E5%87%BD%E6%95%B0\\">练习4.4.编写旋转函数</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A045%E6%B6%88%E9%99%A4%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2\\">练习4.5.消除相邻重复字符串</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A046%E5%8E%BB%E9%99%A4%E7%9B%B8%E9%82%BB%E7%A9%BA%E6%A0%BC\\">练习4.6.去除相邻空格</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A047%E7%BF%BB%E8%BD%ACslice\\">练习4.7.翻转Slice</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch43map\\">CH4.3.Map</a>\\n<ul>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A048%E9%87%8D%E5%86%99charcount\\">练习4.8.重写charcount</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A049%E8%AF%8D%E9%A2%91%E7%BB%9F%E8%AE%A1\\">练习4.9.词频统计</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch44%E7%BB%93%E6%9E%84%E4%BD%93\\">CH4.4.结构体</a></li>\\n<li><a href=\\"#ch45json\\">CH4.5.Json</a>\\n<ul>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A0410%E4%BF%AE%E6%94%B9issues%E7%A8%8B%E5%BA%8F%E6%8C%89%E7%85%A7%E6%97%B6%E9%97%B4%E5%88%86%E7%B1%BB\\">练习4.10.修改issues程序按照时间分类</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A0411\\">练习4.11</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A0412\\">练习4.12</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{k as comp,d as data};
