import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as d,c as k,b as s,w as e,a as n,d as a,e as p}from"./app-DxMJFouC.js";const r={},v=p('<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java"><span>Java</span></a></h1><h2 id="java-环境配置" tabindex="-1"><a class="header-anchor" href="#java-环境配置"><span>Java 环境配置</span></a></h2><h3 id="安装-jdk" tabindex="-1"><a class="header-anchor" href="#安装-jdk"><span>安装 jdk</span></a></h3>',3),m=n("p",null,"安装完后需要配置环境变量",-1),b=n("div",{class:"language-text line-numbers-mode","data-ext":"text","data-title":"text"},[n("pre",{class:"language-text"},[n("code",null,`JAVA_HOME
jdk安装目录
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-text line-numbers-mode","data-ext":"text","data-title":"text"},[n("pre",{class:"language-text"},[n("code",null,`CLASSPATH
.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-text line-numbers-mode","data-ext":"text","data-title":"text"},[n("pre",{class:"language-text"},[n("code",null,`Path
%JAVA_HOME%\\bin
%JAVA_HOME%\\jre\\bin
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("p",null,"配完后",-1),f=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"java"),a(`
javac
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("p",null,"看下有正常回显即可",-1),_=n("hr",null,null,-1),y={href:"https://openjdk.org/install/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://zhuanlan.zhihu.com/p/399295670",target:"_blank",rel:"noopener noreferrer"},x=n("hr",null,null,-1),C=n("ul",null,[n("li",null,[n("p",null,"安装 openjdk8"),n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"sudo"),a(),n("span",{class:"token function"},"apt-get"),a(),n("span",{class:"token function"},"install"),a(` openjdk-8-jre
`),n("span",{class:"token function"},"sudo"),a(),n("span",{class:"token function"},"apt-get"),a(),n("span",{class:"token function"},"install"),a(` openjdk-8-jdk
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])]),n("p",null,[a("安装完后可以 "),n("code",null,"java -version"),a(" 看下")]),n("blockquote",null,[n("p",null,[n("img",{src:"http://cdn.ayusummer233.top/img/202209231124375.png",alt:"image-20220923112443274"})])])])],-1),N=n("hr",null,null,-1),A=n("p",null,[a("或者下载 "),n("code",null,"tar.gz"),a(" 包然后解压, 解压后在 "),n("code",null,"bin"),a(" 目录下有 "),n("code",null,"java"),a(" 和 "),n("code",null,"javac")],-1),R=n("p",null,"多版本 jdk 注册:",-1),S=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token comment"},"# 注册 java"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/java "),n("span",{class:"token function"},"java"),a(),n("span",{class:"token punctuation"},"["),a("解压后bin目录下的java文件绝对路径"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token punctuation"},"["),a("优先级数字"),n("span",{class:"token punctuation"},"]"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(),n("span",{class:"token function"},"java"),a(),n("span",{class:"token punctuation"},"["),a("解压后bin目录下的java文件绝对路径"),n("span",{class:"token punctuation"},"]"),a(`

`),n("span",{class:"token comment"},"# 注册 javac"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/javac javac "),n("span",{class:"token punctuation"},"["),a("解压后bin目录下的javac文件绝对路径"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token punctuation"},"["),a("优先级数字"),n("span",{class:"token punctuation"},"]"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(" javac "),n("span",{class:"token punctuation"},"["),a("解压后bin目录下的javac文件绝对路径"),n("span",{class:"token punctuation"},"]"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("blockquote",null,[n("p",null,"例如:"),n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[a("update-alternatives "),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/java "),n("span",{class:"token function"},"java"),a(" /home/ajest/tools/java/jdk1.8.0_351/bin/java "),n("span",{class:"token number"},"18351"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(),n("span",{class:"token function"},"java"),a(` /home/ajest/tools/java/jdk1.8.0_351/bin/java
update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/javac javac /home/ajest/tools/java/jdk1.8.0_351/bin/javac "),n("span",{class:"token number"},"18351"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(` javac /home/ajest/tools/java/jdk1.8.0_351/bin/javac

update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/java "),n("span",{class:"token function"},"java"),a(" /home/ajest/tools/java/jdk-11.0.17/bin/java "),n("span",{class:"token number"},"11017"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(),n("span",{class:"token function"},"java"),a(` /home/ajest/tools/java/jdk-11.0.17/bin/java
update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/javac javac /home/ajest/tools/java/jdk-11.0.17/bin/javac "),n("span",{class:"token number"},"11017"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(` javac /home/ajest/tools/java/jdk-11.0.17/bin/javac

update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/java "),n("span",{class:"token function"},"java"),a(" /home/ajest/tools/java/jdk-17.0.5/bin/java "),n("span",{class:"token number"},"1705"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(),n("span",{class:"token function"},"java"),a(` /home/ajest/tools/java/jdk-17.0.5/bin/java
update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/javac javac /home/ajest/tools/java/jdk-17.0.5/bin/javac "),n("span",{class:"token number"},"1705"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(` javac /home/ajest/tools/java/jdk-17.0.5/bin/javac


update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/java "),n("span",{class:"token function"},"java"),a(" /home/ajest/tools/java/jdk-19.0.1/bin/java "),n("span",{class:"token number"},"1901"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(),n("span",{class:"token function"},"java"),a(` /home/ajest/tools/java/jdk-19.0.1/bin/java
update-alternatives `),n("span",{class:"token parameter variable"},"--install"),a(" /usr/bin/javac javac /home/ajest/tools/java/jdk-19.0.1/bin/javac "),n("span",{class:"token number"},"1901"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--set"),a(` javac /home/ajest/tools/java/jdk-19.0.1/bin/javac
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])])],-1),M=n("p",null,"多版本 JDK 管理",-1),T=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[a("update-alternatives "),n("span",{class:"token parameter variable"},"--config"),a(),n("span",{class:"token function"},"java"),a(`
update-alternatives `),n("span",{class:"token parameter variable"},"--config"),a(` javac
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=p('<hr><h3 id="idea" tabindex="-1"><a class="header-anchor" href="#idea"><span>IDEA</span></a></h3><h4 id="ubuntu-安装-idea" tabindex="-1"><a class="header-anchor" href="#ubuntu-安装-idea"><span>ubuntu 安装 IDEA</span></a></h4><p>直接远程连接安装即可</p><p><img src="http://cdn.ayusummer233.top/img/202209231852362.png" alt="image-20220923185210262"></p><hr><h3 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat"><span>Tomcat</span></a></h3>',7),E={href:"https://tomcat.apache.org/download-80.cgi",target:"_blank",rel:"noopener noreferrer"},P=p('<p><img src="http://cdn.ayusummer233.top/DailyNotes/202306131112390.png" alt="image-20230613111231319"></p><p>Windows 下直接下 Installer 版本即可</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202306131113262.png" alt="image-20230613111315190"></p><p>安装时会默认 <code>Server Shutdown Port </code> 为 <code>-1</code>, 意味着关闭了监听 shutdown 命令的端口, 后续启停可以在 Windows 服务(<code>services.msc</code>)中进行操作</p><hr><h2 id="java-反射" tabindex="-1"><a class="header-anchor" href="#java-反射"><span>Java 反射</span></a></h2>',6),O={href:"https://www.cnblogs.com/ysocean/p/6516248.html",target:"_blank",rel:"noopener noreferrer"},I=n("hr",null,null,-1),V=p(`<p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。而这也是Java被视为(准)动态语言的一个关键性质</p><blockquote><p>为啥要说是准动态，因为一般而言的动态语言定义是程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言。从这个观点看，Perl，Python，Ruby是动态语言，C++，Java，C#不是动态语言。</p></blockquote><p>反射机制允许程序在运行时取得任何一个已知名称的class的内部信息，包括包括其modifiers(修饰符)，fields(属性)，methods(方法)等，并可于运行时改变fields内容或调用methods。那么我们便可以更灵活的编写代码，代码可以在运行时装配，无需在组件之间进行源代码链接，降低代码的耦合度；还有动态代理的实现等等；</p><blockquote><p>但是需要注意的是反射使用不当会造成很高的资源消耗！</p></blockquote><hr><h3 id="得到-class-的三种方式" tabindex="-1"><a class="header-anchor" href="#得到-class-的三种方式"><span>得到 Class 的三种方式</span></a></h3><p>比如新建一个 Person 类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">reflect</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Jacob&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Person()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m working!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202212071556647.png" alt="image-20221207152138868"></p><p>现在要在其他类中获取一个 Person 对象的 class 可以使用如下三种方式:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">reflect</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> reflect <span class="token punctuation">{</span>
    <span class="token comment">// 1. 通过对象调用 getClass() 方法获取 Person 的 Class;</span>
    <span class="token comment">// 通常用于传入一个 Object 对象, 但是不知道具体是什么类, 通过 getClass() 方法获取 Class 对象;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">by_getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;1. 通过对象调用 getClass() 方法获取 Person 的 Class;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c1 <span class="token operator">=</span> person1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2.直接通过 类名.class 的方式得到,该方法最为安全可靠，程序性能更高</span>
    <span class="token comment">// 这说明每个类都有一个隐含的静态成员变量 class</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">by_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;2.直接通过 类名.class 的方式得到,该方法最为安全可靠，程序性能更高&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 3.通过 Class 类的静态方法 forName(String className) 得到</span>
    <span class="token comment">// 该方法将类的全名(包括包名) 作为参数，返回对应的 Class 对象</span>
    <span class="token comment">// 用的最多, 但可能抛出 ClassNotFoundException 异常</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">by_forName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;3.通过 Class 类的静态方法 forName(String className) 得到&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;reflect.Person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">reflect<span class="token punctuation">.</span>reflect</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        reflect r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">reflect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token punctuation">.</span><span class="token function">by_getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        r<span class="token punctuation">.</span><span class="token function">by_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            r<span class="token punctuation">.</span><span class="token function">by_forName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202212071556151.png" alt="image-20221207155641124"></p><hr><h2 id="命令执行" tabindex="-1"><a class="header-anchor" href="#命令执行"><span>命令执行</span></a></h2><p>正常写法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;calc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>反射写法:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getRuntime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;calc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>line3</code> 的 <code>Method</code> 指的是 <code>java.lang.reflect.Method</code> 类, 在 Java 中，<code>java.lang.reflect.Method</code> 类提供了关于类或接口上单个方法的信息和访问权限。可以使用 <code>java.lang.reflect.Method</code> 类的实例来获取方法的信息(如返回类型、参数类型、访问修饰符等) 或者对它进行调用。</li><li><code>line3</code> 的 <code>getMethod</code> 方法被用来获取名为 <code>getRuntime</code> 的方法(这是 <code>java.lang.Runtime</code> 类的一个静态方法)。然后，<code>invoke</code> 方法被用来调用这个获取到的方法。</li><li>因为 <code>getRuntime</code> 是一个无参数的方法，所以 <code>invoke</code> 方法被调用时只传入了一个 <code>null</code> 参数，这个 <code>null</code> 参数表示当前正在调用的是一个不需要实例对象的方法(即静态方法)。</li></ul><hr><p>将反射写法写为一行:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getRuntime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;calc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要注意的是 <code>Class.getMethod</code> 的返回类型是 <code>java.lang.reflect.Method</code>，而 <code>Method.invoke()</code> 的返回类型是 <code>java.lang.Object</code>。</p><p>因此，当你试图在返回的 Object 类型上调用 <code>exec</code> 方法时，编译器无法找到 <code>exec</code> 方法，因为 <code>java.lang.Object</code> 类没有定义 <code>exec</code> 方法。</p><p>所以这里用的 <code>(Runtime)</code> 来将 <code>invoke</code> 的返回值强制类型转换为 <code>Runtime</code> 类型，因为 <code>exec</code> 是 <code>Runtime</code> 类的方法</p><hr><p>不加强制类型转换的话可以这样写:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;exec&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>
        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getRuntime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;calc&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先获取 <code>exec</code> 方法的 <code>Method</code> 对象，然后再调用 <code>invoke</code> 方法，其第一个参数传递了 <code>exec</code> 方法的调用者(<code>Runtime</code> 对象) ，第二个参数传递了 <code>exec</code> 方法的参数(<code>calc</code>) 。</p><p>或者通过 <code>String对象.getClass()</code> 来获取 <code>Class</code> 也可以:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token string">&quot;va&quot;</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;exec&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>
        <span class="token string">&quot;va&quot;</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getRuntime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;calc&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及这里的字符串是可以拆分再拼接的, 下面这种写法也是可以正确执行的:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token operator">+</span><span class="token string">&quot;.lang.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;exec&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>
        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.la&quot;</span><span class="token operator">+</span><span class="token string">&quot;ng.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getRuntime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;calc&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token string">&quot;va&quot;</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lan&quot;</span><span class="token operator">+</span><span class="token string">&quot;g.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;exec&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>
        <span class="token string">&quot;va&quot;</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.l&quot;</span><span class="token operator">+</span><span class="token string">&quot;ang.Runtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getRuntime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;calc&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,37);function H(z,W){const t=l("ExternalLinkIcon"),i=l("Tabs");return d(),k("div",null,[v,s(i,{id:"9",data:[{id:"Windows"},{id:"Ubuntu/Debian"}],active:0},{title0:e(({value:o,isActive:c})=>[a("Windows")]),title1:e(({value:o,isActive:c})=>[a("Ubuntu/Debian")]),tab0:e(({value:o,isActive:c})=>[m,b,g,h,j,f,q,_]),tab1:e(({value:o,isActive:c})=>[n("blockquote",null,[n("p",null,[n("a",y,[a("OpenJDK: Download and install"),s(t)])]),n("p",null,[a("["),n("a",w,[a("环境搭建] Kali 下多版本JDK 共存 - 2022 年11 月1 日更新 - 知乎 (zhihu.com)"),s(t)])]),x]),C,N,A,R,S,J,M,T]),_:1}),D,n("blockquote",null,[n("p",null,[n("a",E,[a("Apache Tomcat® - Apache Tomcat 8 Software Downloads --- Apache Tomcat® - Apache Tomcat 8 软件下载"),s(t)])])]),P,n("blockquote",null,[n("p",null,[n("a",O,[a("Java 反射详解 - YSOcean - 博客园 (cnblogs.com)"),s(t)])]),I]),V])}const B=u(r,[["render",H],["__file","Java.html.vue"]]),F=JSON.parse('{"path":"/Language/Java/Java.html","title":"Java","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Java 环境配置","slug":"java-环境配置","link":"#java-环境配置","children":[{"level":3,"title":"安装 jdk","slug":"安装-jdk","link":"#安装-jdk","children":[]},{"level":3,"title":"IDEA","slug":"idea","link":"#idea","children":[]},{"level":3,"title":"Tomcat","slug":"tomcat","link":"#tomcat","children":[]}]},{"level":2,"title":"Java 反射","slug":"java-反射","link":"#java-反射","children":[{"level":3,"title":"得到 Class 的三种方式","slug":"得到-class-的三种方式","link":"#得到-class-的三种方式","children":[]}]},{"level":2,"title":"命令执行","slug":"命令执行","link":"#命令执行","children":[]}],"git":{"createdTime":1667831333000,"updatedTime":1709635981000,"contributors":[{"name":"233Official","email":"ayusummer233@qq.com","commits":6},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1},{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":1}]},"readingTime":{"minutes":5.55,"words":1664},"filePathRelative":"Language/Java/Java.md","localizedDate":"2022年11月7日","excerpt":"\\n<h2>Java 环境配置</h2>\\n<h3>安装 jdk</h3>\\n\\n<hr>\\n<h3>IDEA</h3>\\n<h4>ubuntu 安装 IDEA</h4>\\n<p>直接远程连接安装即可</p>\\n<p><img src=\\"http://cdn.ayusummer233.top/img/202209231852362.png\\" alt=\\"image-20220923185210262\\"></p>\\n<hr>\\n<h3>Tomcat</h3>\\n<blockquote>\\n<p><a href=\\"https://tomcat.apache.org/download-80.cgi\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Apache Tomcat® - Apache Tomcat 8 Software Downloads --- Apache Tomcat® - Apache Tomcat 8 软件下载</a></p>\\n</blockquote>"}');export{B as comp,F as data};
