import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as n,d as s,b as t,e}from"./app-DxMJFouC.js";const i={},u=e('<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>TypeScript</span></a></h1><ul><li><a href="#typescript">TypeScript</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E6%95%99%E7%A8%8B">教程</a></li><li><a href="#%E7%B1%BB%E5%9E%8B">类型</a><ul><li><a href="#%E5%85%B3%E9%94%AE%E5%AD%97">关键字</a><ul><li><a href="#var-let-%E4%B8%8E-const">var, let 与 const</a></li></ul></li><li><a href="#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2">模板字符串</a></li><li><a href="#%E6%9E%9A%E4%B8%BE">枚举</a></li><li><a href="#unknown-%E7%B1%BB%E5%9E%8B">unknown 类型</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80">类型断言</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4">类型保护</a></li><li><a href="#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B">联合类型</a></li><li><a href="#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B">交叉类型</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B">对象类型</a><ul><li><a href="#%E6%95%B0%E7%BB%84">数组</a></li><li><a href="#%E5%85%83%E7%BB%84">元组</a></li></ul></li></ul></li><li><a href="#%E6%8E%A5%E5%8F%A3">接口</a><ul><li><a href="#typescript-%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%A6%82%E8%BF%B0">TypeScript 中的接口概述</a><ul><li><a href="#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E7%9A%84%E5%8C%BA%E5%88%AB">接口与类型别名的区别</a></li></ul></li><li><a href="#%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3">扩展接口</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0-javascript-api">使用接口描述 JavaScript API</a></li></ul></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a><ul><li><a href="#%E5%91%BD%E5%90%8D%E5%87%BD%E6%95%B0">命名函数</a></li><li><a href="#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">匿名函数</a></li><li><a href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数</a></li><li><a href="#%E5%8F%82%E6%95%B0">参数</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B">定义函数类型</a></li></ul></li><li><a href="#tips">Tips</a><ul><li><a href="#vscode">VSCode</a><ul><li><a href="#%E6%89%A9%E5%B1%95">扩展</a></li></ul></li><li><a href="#%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C">在线编译运行</a></li></ul></li><li><a href="#promise">Promise</a><ul><li><a href="#%E5%88%9B%E5%BB%BA-promise">创建 Promise</a></li></ul></li></ul></li></ul><hr><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2>',4),r={href:"https://nodejs.org/en/download/",target:"_blank",rel:"noopener noreferrer"},d=e(`<li><p>在命令行执行如下命令以全局安装 TypeScript</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装 typescript</span>
<span class="token function">npm</span> <span class="token function">install</span> –g typescript
<span class="token comment"># 查看当前 typescript 版本</span>
tsc <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),k=n("hr",null,null,-1),m=n("h2",{id:"教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#教程"},[n("span",null,"教程")])],-1),b=n("hr",null,null,-1),v={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-get-started/1-introduction",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.bilibili.com/video/BV1o64y1k7Fp",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.tslang.cn/samples/index.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://typescript.bootcss.com/tutorials/typescript-in-5-minutes.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.runoob.com/typescript/ts-tutorial.html",target:"_blank",rel:"noopener noreferrer"},E=n("hr",null,null,-1),B=n("h2",{id:"类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类型"},[n("span",null,"类型")])],-1),A={href:"https://typescript.bootcss.com/basic-types.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-declare-variable-types/",target:"_blank",rel:"noopener noreferrer"},w=e('<p><img src="http://cdn.ayusummer233.top/img/20210717150202.png" alt="image-20210717150202370"></p><img src="http://cdn.ayusummer233.top/img/202202161538943.png" alt="image-20220216153825753" style="zoom:67%;"><ul><li><code>void</code> 类型的存在纯粹是为了指示不存在值，例如存在于没有返回值的函数中</li><li><code>null</code> 和 <code>undefined</code> 类型是所有其他类型的子类型。 无法显式引用 null 和 undefined 类型。 使用 <code>null</code> 和 <code>undefined</code> 字面量只能引用这些类型的值。</li></ul><hr><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字"><span>关键字</span></a></h3><h4 id="var-let-与-const" tabindex="-1"><a class="header-anchor" href="#var-let-与-const"><span>var, let 与 const</span></a></h4>',6),x={href:"https://zhuanlan.zhihu.com/p/396435904",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>使用 <code>var</code> 声明变量的时候，可以同时声明某个变量多次，但是只有最后一个生效。</p><p>而 <code>let</code> 不支持这样做，使用 <code>let</code> 声明变量，一个变量同时只能声明一次，否则会报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// var 重复声明</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// let 尝试重复声明</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202203010841228.png" alt="image-20220301084125051"></p><p>let 的作用域在其所在块内, const 也是如此</p><p>const 与 let 的不同之处在于其声明的变量只能在声明时被赋值, 也即使用 const 生命的变量被赋值后无法再改变变量所指向的内存地址(指针)</p><blockquote><p>const 声明常量后无法改变值, 但是使用 const 声明一个对象后, 虽然对象变量锁指向的内存地址不改变, 但是对象的属性是可变的</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// const 声明常量后尝试改变常量值</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// const 声明对象后改变对象属性</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;咸鱼型233&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
d<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;233&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202203010848443.png" alt="image-20220301084824328"></p></blockquote><hr><h3 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串"><span>模板字符串</span></a></h3><p>在 TypeScript 中，还可以使用模板字符串，该模板字符串可以跨越多行并具有嵌入式表达式。 这些字符串由反撇号/反引号 (\`) 字符括起，并且嵌入式表达式的形式为 <code>\${ expr }</code>。</p><p><img src="http://cdn.ayusummer233.top/img/202202161548682.png" alt="image-20220216154826496"></p><hr><h3 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h3>`,13),q={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-declare-variable-types/4-enums",target:"_blank",rel:"noopener noreferrer"},N={href:"https://juejin.cn/post/6998318291420708900",target:"_blank",rel:"noopener noreferrer"},T=e(`<p>枚举提供了一种处理相关常量集的简单方法。 <code>enum</code> 是一组值的符号名。 枚举被视为数据类型，你可以使用它们来创建用于变量和属性的常量集。</p><p>每当过程接受一组有限的变量时，请考虑使用枚举。 枚举使代码更清晰、可读性更好，尤其是在使用有意义的名称时。</p><p>使用枚举：</p><ul><li>帮助减少由于转置或错误输入数字而导致的错误。</li><li>使将来更改值变得容易。</li><li>使代码更易于阅读，这意味着不太可能出现错误。</li><li>确保向前兼容性。 通过使用枚举，将来有人更改与成员名称对应的值时，代码失败的可能性更小。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 枚举</span>
<span class="token keyword">enum</span> Grade <span class="token punctuation">{</span>
    freshman<span class="token punctuation">,</span>   <span class="token comment">// 0-大一</span>
    sophomore<span class="token punctuation">,</span>  <span class="token comment">// 1-大二</span>
    junior<span class="token punctuation">,</span>     <span class="token comment">// 2-大三</span>
    senior<span class="token punctuation">,</span>     <span class="token comment">// 3-大四</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> ayusummer<span class="token operator">:</span> Grade <span class="token operator">=</span> Grade<span class="token punctuation">.</span>senior<span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;233:&quot;</span> <span class="token operator">+</span> ayusummer<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 更改序列起始值为 2</span>
<span class="token keyword">enum</span> Grade2 <span class="token punctuation">{</span>
    freshman <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>   <span class="token comment">// 2-大一</span>
    sophomore<span class="token punctuation">,</span>  <span class="token comment">// 3-大二</span>
    junior<span class="token punctuation">,</span>     <span class="token comment">// 4-大三</span>
    senior<span class="token punctuation">,</span>     <span class="token comment">// 5-大四</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> ayusummer2<span class="token operator">:</span> Grade2 <span class="token operator">=</span> Grade2<span class="token punctuation">.</span>senior<span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;233:&quot;</span> <span class="token operator">+</span> ayusummer2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;233:&quot;</span> <span class="token operator">+</span> Grade2<span class="token punctuation">[</span>ayusummer2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 根据枚举值获取枚举名称</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202202161610085.png" alt="image-20220216161042912"></p><hr><h3 id="unknown-类型" tabindex="-1"><a class="header-anchor" href="#unknown-类型"><span>unknown 类型</span></a></h3>`,8),C={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-declare-variable-types/5-any-unknown",target:"_blank",rel:"noopener noreferrer"},D=e(`<p><code>any</code> 类型虽然很灵活，但可能会导致意外错误。 为了解决这个问题，TypeScript 引入了 <code>unknown</code> 类型。</p><p><code>unknown</code> 类型与 <code>any</code> 类型的相似之处在于，可以将任何值赋予类型 <code>unknown</code>。 但无法访问 <code>unknown</code> 类型的任何属性，也不能调用或构造它们。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// unknown 类型</span>
<span class="token keyword">let</span> randomValue<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
randomValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
randomValue <span class="token operator">=</span> <span class="token string">&#39;Mateo&#39;</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>randomValue<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Error: Object is of type unknown</span>
<span class="token function">randomValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// Error: Object is of type unknown</span>
randomValue<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Error: Object is of type unknown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202202161621455.png" alt="image-20220216162129265"></p><blockquote><p><code>any</code> 和 <code>unknown</code> 之间的核心区别在于你无法与 <code>unknown</code> 类型的变量进行交互；这样做会产生“编译器”错误。 <code>any</code> 将绕过所有编译时检查，并且在运行时评估对象；如果该方法或属性存在，它将表现出预期的效果。</p></blockquote><hr><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h3><p>如果需要将变量视为其他数据类型，则可以使用类型断言。</p><p>类型断言有两种形式。 一种是 <code>as</code> 语法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span>randomValue <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一个版本是“尖括号”语法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>randomValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>as</code> 是首选语法。 使用 <code>&lt; &gt;</code> 进行类型转换时，某些 TypeScript 应用程序(例如 JSX) 可能会发生混淆。</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> randomValue<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

randomValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
randomValue <span class="token operator">=</span> <span class="token string">&#39;Mateo&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> randomValue <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>randomValue <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//* Returns MATEO to the console.</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Error - A string was expected here.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//* Returns an error message.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202202161715802.png" alt="image-20220216171526602"></p><hr><h3 id="类型保护" tabindex="-1"><a class="header-anchor" href="#类型保护"><span>类型保护</span></a></h3><p>前面的示例演示了在 <code>if</code> 块中使用 <code>typeof</code> 在运行时检查表达式的类型。 这称为“类型保护”。</p><p>你可能熟悉在 JavaScript 中使用 <code>typeof</code> 和 <code>instanceof</code> 来测试这些条件。 TypeScript 了解这些条件，并在 <code>if</code> 块中使用时会相应地更改类型推理。</p><p>可以使用以下条件来了解变量的类型：</p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">Predicate</th></tr></thead><tbody><tr><td style="text-align:center;"><code>string</code></td><td style="text-align:center;"><code>typeof s === &quot;string&quot;</code></td></tr><tr><td style="text-align:center;"><code>number</code></td><td style="text-align:center;"><code>typeof n === &quot;number&quot;</code></td></tr><tr><td style="text-align:center;"><code>boolean</code></td><td style="text-align:center;"><code>typeof b === &quot;boolean&quot;</code></td></tr><tr><td style="text-align:center;"><code>undefined</code></td><td style="text-align:center;"><code>typeof undefined === &quot;undefined&quot;</code></td></tr><tr><td style="text-align:center;"><code>function</code></td><td style="text-align:center;"><code>typeof f === &quot;function&quot;</code></td></tr><tr><td style="text-align:center;"><code>array</code></td><td style="text-align:center;"><code>Array.isArray(a)</code></td></tr></tbody></table><hr><h3 id="联合类型" tabindex="-1"><a class="header-anchor" href="#联合类型"><span>联合类型</span></a></h3>`,23),M={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-declare-variable-types/6-unions-intersections",target:"_blank",rel:"noopener noreferrer"},F=e(`<p>联合类型描述的值可以是几种类型之一。 当值不受控制时(例如，来自库、API 或用户输入的值) ，这将很有帮助。</p><p>联合类型使用竖线 (<code>|</code>) 分隔每种类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 联合类型</span>
<span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> age1<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
age1 <span class="token operator">=</span> <span class="token string">&quot;二十&quot;</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202202161723882.png" alt="image-20220216172315488"></p><hr><h3 id="交叉类型" tabindex="-1"><a class="header-anchor" href="#交叉类型"><span>交叉类型</span></a></h3>`,6),P={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-declare-variable-types/6-unions-intersections",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>交叉类型与联合类型密切相关，但它们的使用方式完全不同。 交叉类型组合两个或多个类型以创建具有现有类型的所有属性的新类型。 这使你可以将现有类型加在一起，以获得具有所需所有功能的单个类型。</p><p>交叉类型使用与号 (<code>&amp;</code>) 分隔每种类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ManagementEmployee</span> <span class="token operator">=</span> Employee <span class="token operator">&amp;</span> Manager<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>交叉类型最常与接口一起使用。 以下示例定义了两个接口 <code>Employee</code> 和 <code>Manager</code>，然后创建了一个称为 <code>ManagementEmployee</code> 的新交叉类型，该交叉类型将两个接口中的属性组合在一起。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    employeeID<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>
    stockPlan<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">ManagementEmployee</span> <span class="token operator">=</span> Employee <span class="token operator">&amp;</span> Manager<span class="token punctuation">;</span>
<span class="token keyword">let</span> newManager<span class="token operator">:</span> ManagementEmployee <span class="token operator">=</span> <span class="token punctuation">{</span>
    employeeID<span class="token operator">:</span> <span class="token number">12345</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>
    stockPlan<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newManager<span class="token punctuation">.</span>stockPlan<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newManager<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newManager<span class="token punctuation">.</span>employeeID<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202202161754268.png" alt="image-20220216175452073"></p><hr><h3 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型"><span>对象类型</span></a></h3>`,8),V={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-declare-variable-types/7-collection-types",target:"_blank",rel:"noopener noreferrer"},L=e(`<p>对象类型是所有类、接口、数组和字面量类型(不是基元类型的任何类型)</p><hr><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h4><ul><li><p>使用元素类型后跟方括号 (<code>[ ]</code>) 来表示该元素类型的数组：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> list<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第二种方式，通过语法 <code>Array&lt;type&gt;</code> 使用泛型 <code>Array</code> 类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> list2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202202212049743.png" alt="image-20220221204920271"></p></li></ul><p>两种方法混合使用并没有好处，所以要决定使用哪种语法。</p><p>个人更倾向于泛型写法, 因为字面上含义比较明确</p><hr><h4 id="元组" tabindex="-1"><a class="header-anchor" href="#元组"><span>元组</span></a></h4><p>拥有相同值类型的数组很有用，但有时一个数组可能包含混合类型的值。 为此，TypeScript 提供了元组类型。 若要声明元组，请使用语法 <code>variableName: [type, type, ...]</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 创建一个包含字符串和数字的元组</span>
<span class="token keyword">let</span> person1<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Marcia&#39;</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202202212050285.png" alt="image-20220221205029006"></p><p><img src="http://cdn.ayusummer233.top/img/202202212052339.png" alt="image-20220221205240167"></p><hr><h2 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h2><hr><h3 id="typescript-中的接口概述" tabindex="-1"><a class="header-anchor" href="#typescript-中的接口概述"><span>TypeScript 中的接口概述</span></a></h3>`,16),j={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-implement-interfaces/2-interfaces-typescript",target:"_blank",rel:"noopener noreferrer"},z=e(`<li><p>可以使用接口来描述对象、命名和参数化对象的类型，以及将现有的命名对象类型组成新的对象类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>
    firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口的唯一任务是描述类型。 它定义了代码协定所需的内容，而实现接口的变量、函数或类则通过提供所需的实现详细信息来满足协定。</p><blockquote><p>TypeScript 编码准则建议接口不应以字母 <code>I</code> 开头。</p></blockquote></li><li><p>定义该接口的属性(或成员) 及其类型。 属性可以为必需、可选或只读属性。</p><table><thead><tr><th style="text-align:left;">属性类型</th><th style="text-align:left;">说明</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;">必须</td><td style="text-align:left;">除非另行指定，否则所有属性都是必需的。</td><td style="text-align:left;"><code>firstName: string;</code></td></tr><tr><td style="text-align:left;">可选</td><td style="text-align:left;">在属性名称的末尾添加问号 (<code>?</code>)。 对于不是必需的属性，请使用此属性。 这可以防止类型系统在省略该属性时引发错误。</td><td style="text-align:left;"><code>firstName?: string;</code></td></tr><tr><td style="text-align:left;">只读</td><td style="text-align:left;">在属性名称的前面添加 readonly 关键字。 对于只应在首次创建对象时修改的属性，请使用此属性。</td><td style="text-align:left;"><code>readonly firstName: string;</code></td></tr></tbody></table><p>定义接口后，可以将其用作类型，并可享受到类型检查和 Intellisense 的所有好处。</p></li><li><p>此示例通过声明类型 <code>Employee</code> 的变量来实现接口。 它通过传入 <code>firstName</code> 和 <code>lastName</code> 属性的值并指定 <code>fullName</code> 方法需结合使用 <code>firstName</code> 和 <code>lastName</code> 属性并返回结果，来实现协定。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> employee<span class="token operator">:</span> Employee <span class="token operator">=</span> <span class="token punctuation">{</span>
    firstName <span class="token operator">:</span> <span class="token string">&quot;Emil&quot;</span><span class="token punctuation">,</span>
    lastName<span class="token operator">:</span> <span class="token string">&quot;Andersson&quot;</span><span class="token punctuation">,</span>
    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

employee<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//* Error - Type &#39;number&#39; is not assignable to type &#39;string&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接口没有运行时表示形式；它们只是一种编译时构造。 接口对于记录和验证属性的所需形状、作为参数传递的对象以及从函数返回的对象特别有用。 这使你可以捕获错误，并确保在编译时传递正确的参数，而不用等待在运行时发现它们。</p></li>`,4),J=e(`<hr><h4 id="接口与类型别名的区别" tabindex="-1"><a class="header-anchor" href="#接口与类型别名的区别"><span>接口与类型别名的区别</span></a></h4><ul><li><p>上述 <code>Employee</code> 接口还可以使用 <code>type</code> 键字表示为类型别名：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Employee</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型别名是数据类型(例如联合、基元、交集、元组或其他任何类型) 的定义。 另一方面，接口是描述数据形状(例如对象) 的一种方法。 类型别名可以像接口一样使用；但有一些细微的差异。 主要区别在于**，不能重新打开类型别名以添加新属性，而接口始终是可扩展的**。 此外，<strong>只能使用类型别名描述并集或元组</strong>。</p></li></ul><hr><h3 id="扩展接口" tabindex="-1"><a class="header-anchor" href="#扩展接口"><span>扩展接口</span></a></h3>`,5),U={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-implement-interfaces/4-extend-interface",target:"_blank",rel:"noopener noreferrer"},Q=e(`<li><p>接口可以相互扩展。 这使你能够将一个接口的成员复制到另一个接口，从而在将接口分离为可重用组件方面提供了更大的灵活性。</p></li><li><p>当使用一个或多个接口扩展接口时，将适用以下规则：</p><ul><li>必须从所有接口实现所有必需的属性。</li><li>如果属性具有完全相同的名称和类型，则两个接口可以具有相同的属性。</li><li>如果两个接口具有名称相同但类型不同的属性，则必须声明一个新属性，以使生成的属性是这两个接口的子类型。</li></ul></li><li><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
   flavor<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
   scoops<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
   instructions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Sundae</span> <span class="token keyword">extends</span> <span class="token class-name">IceCream</span> <span class="token punctuation">{</span>
    sauce<span class="token operator">:</span> <span class="token string">&#39;chocolate&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;caramel&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;strawberry&#39;</span><span class="token punctuation">;</span>
    nuts<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    whippedCream<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    instructions<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>		<span class="token comment">// 这里会报错, 因为 IceCream 接口中也有 instructions 属性且类型为 string</span>
    <span class="token comment">// 正确的做法应当是将这里的 boolean 改为 string 使其与 IceCream 中的 instructions 一致</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,3),O=n("hr",null,null,-1),G=n("h3",{id:"使用接口的其他方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用接口的其他方法"},[n("span",null,"使用接口的其他方法")])],-1),Y={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-implement-interfaces/5-use-interfaces",target:"_blank",rel:"noopener noreferrer"},H=e(`<hr><h4 id="创建可索引类型" tabindex="-1"><a class="header-anchor" href="#创建可索引类型"><span>创建可索引类型</span></a></h4><ul><li><p>你可以使用描述可编制索引的数组类型的接口。</p><p>可编制索引的类型具有“索引签名”，该签名描述可用于在对象中编制索引的类型，以及编制索引时相应的返回类型 。</p><p>例如，<code>IceCreamArray</code> 接口将索引签名声明为 <code>number</code> 并返回 <code>string</code> 类型。 此索引签名声明 <code>IceCreamArray</code> 是使用数字编制索引的，它将返回一个字符串。</p></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IceCreamArray</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myIceCream<span class="token operator">:</span> IceCreamArray<span class="token punctuation">;</span>
myIceCream <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;chocolate&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vanilla&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;strawberry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myStr<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> myIceCream<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你还可以使用内置的数组类型或为自定义数组创建类型别名，但通过使用接口，你可以定义自己的数组类型，以便要使用该接口的任何人都可以一致地应用它</p><hr><h4 id="使用接口描述-javascript-api" tabindex="-1"><a class="header-anchor" href="#使用接口描述-javascript-api"><span>使用接口描述 JavaScript API</span></a></h4><ul><li>JavaScript 和 TypeScript 开发人员面临一个共同的难点，即使用外部 JavaScript 库。 可以使用接口描述现有的 JavaScript API 并阐明函数参数和返回类型。 接口使你能够清楚地了解 API 的期望值和返回值。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> fetchURL <span class="token operator">=</span> <span class="token string">&#39;https://jsonplaceholder.typicode.com/posts&#39;</span>
<span class="token comment">// Interface describing the shape of our json data</span>
<span class="token keyword">interface</span> <span class="token class-name">Post</span> <span class="token punctuation">{</span>
    userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    body<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchPosts</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> body <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> body <span class="token keyword">as</span> Post<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">showPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchPosts</span><span class="token punctuation">(</span>fetchURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Display the contents of the first item in the response</span>
    <span class="token keyword">let</span> post <span class="token operator">=</span> posts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Post #&#39;</span> <span class="token operator">+</span> post<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    <span class="token comment">// If the userId is 1, then display a note that it&#39;s an administrator</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Author: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>post<span class="token punctuation">.</span>userId <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token string">&quot;Administrator&quot;</span> <span class="token operator">:</span> post<span class="token punctuation">.</span>userId<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Title: &#39;</span> <span class="token operator">+</span> post<span class="token punctuation">.</span>title<span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Body: &#39;</span> <span class="token operator">+</span> post<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">showPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>虽然早期版本的 ECMAScript(如 ES3) 不支持 <code>async</code> 和 <code>await</code>，但 TypeScript 编译器能够生成兼容代码来实现此功能。 这样，你就能够在仍使用旧版浏览器的同时利用较新的功能！</p></blockquote><hr><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2>`,12),Z={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-develop-typed-functions/2-create-functions-typescript",target:"_blank",rel:"noopener noreferrer"},R=e(`<p><code>TypeScript</code> 简化了函数开发，通过允许键入参数和返回值，使它们更易于进行故障排除。 <code>TypeScript</code> 还为参数添加了新选项。 例如，虽然在 <code>JavaScript</code> 函数中，所有参数都是可选的，但你可以在 <code>TypeScript</code> 中将参数设置为必需的或可选的。</p><hr><h3 id="命名函数" tabindex="-1"><a class="header-anchor" href="#命名函数"><span>命名函数</span></a></h3><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="匿名函数" tabindex="-1"><a class="header-anchor" href="#匿名函数"><span>匿名函数</span></a></h3><p>函数表达式(或匿名函数) 是未预先加载到执行上下文中的函数，并且仅当代码遇到该函数时才会运行。 函数表达式是在运行时创建的，并且必须先声明才能调用。 (这意味着不会对它们进行提升，而命名函数声明在程序开始执行时就会进行提升，并且可以在其声明之前调用。)</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">addNumbers_anonymous</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addNumbers_anonymous</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> <span class="token function-variable function">total</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> sum<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        sum <span class="token operator">+=</span> input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">total</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用匿名函数时，你将获得类型检查和 Intellisense。 你还会注意到，在此示例中，变量 <code>total</code> 不是类型化的变量，但 TypeScript 可以通过称为“上下文类型化”的内容(一种类型推理形式) 来确定其类型。 这可以减少保持程序类型所需的工作量。</p><hr><h3 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数"><span>箭头函数</span></a></h3><p>箭头函数(也称为 Lambda 或胖箭头函数，因为定义它们的是 <code>=&gt;</code> 运算符) 提供用于定义匿名函数的简写语法。 由于其简洁性，箭头函数通常用于简单的函数和某些事件处理场景。</p><p>箭头函数通过省略函数关键字并在参数和函数体之间添加 <code>=&gt;</code> 运算符来简化语法。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> addNumbers_arrow <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addNumbers_arrow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>箭头函数是在 ES2015 中引入的，因此并非所有浏览器都支持它们。 通过使用 TypeScript，你可以利用这些函数类型，然后转译到更低的 JavaScript 版本(如有必要) ，这样你的代码就可以在旧版浏览器上使用。</p></blockquote><p><img src="http://cdn.ayusummer233.top/img/202203012241501.png" alt="image-20220301224130936"></p><hr><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h3>`,18),K={href:"https://docs.microsoft.com/zh-cn/learn/modules/typescript-develop-typed-functions/4-parameters",target:"_blank",rel:"noopener noreferrer"},W=e(`<ul><li><p>可选参数</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;可选参数:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> addNumbers_optional <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addNumbers_optional</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addNumbers_optional</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202203012249148.png" alt="image-20220301224948862"></p><p>需要注意的是设置了参数可选后, 函数体内需要对没有参数的情况进行相应处理</p></li><li><p>默认参数</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> addNumbers_default <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addNumbers_default</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addNumbers_default</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202203020815408.png" alt="image-20220302081528148"></p></li><li><p><code>rest 参数</code></p><p>如果要使用多个参数作为一个组(在数组中) 或不知道函数最终将采用的参数数量，则可以使用 rest 参数。 rest 参数被视为无限数量的可选参数。 可以将它们保留不动，或根据需要调整数量。</p><p>此示例包含一个必需参数和一个可选参数 <code>restOfNumbers</code>，该参数可接受任意数量的其他数字。 <code>restOfNumbers</code> 之前的省略号 (<code>...</code>) 指示编译器构建一个传递给函数的参数数组，并给它后面的名称赋值，这样你就可以在函数中使用它。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> addAllNumbers_rest <span class="token operator">=</span> <span class="token punctuation">(</span>firstNumber<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfNumbers<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> total<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> firstNumber<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> counter <span class="token operator">&lt;</span> restOfNumbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> counter<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>restOfNumbers<span class="token punctuation">[</span>counter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        total <span class="token operator">+=</span> <span class="token function">Number</span><span class="token punctuation">(</span>restOfNumbers<span class="token punctuation">[</span>counter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addAllNumbers_rest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addAllNumbers_rest</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addAllNumbers_rest</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202203020829351.png" alt="image-20220302082942124"></p></li><li><p>析构对象参数</p><p>函数参数是有位置的，并且必须按照它们在函数中定义的顺序传递。 在调用具有多个可选参数或相同数据类型的函数时，这可能会降低代码的可读性。</p><p>若要启用命名参数，可以使用称为析构对象参数的技术。 这使你能够在函数中使用接口来定义命名参数，而不是定位参数。</p><p>以下示例定义了一个接口 <code>Message</code>，该接口又定义了两个属性。 在 <code>displayMessage</code> 函数中，<code>Message</code> 对象作为参数传递，提供对属性的访问，就像它们是普通参数一样。</p><blockquote><p>主要是当参数多的时候能够更加明显看出参数的含义</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>
    text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    sender<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">displayMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> sender <span class="token punctuation">}</span><span class="token operator">:</span> Message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Message from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sender<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">displayMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sender<span class="token operator">:</span> <span class="token string">&#39;Christopher&#39;</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">&#39;hello, world&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202203020907460.png" alt="image-20220302090757288"></p></li></ul><hr><h3 id="定义函数类型" tabindex="-1"><a class="header-anchor" href="#定义函数类型"><span>定义函数类型</span></a></h3><p>可以使用类型别名来定义函数类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 定义一个用于对两个 number 进行运算并返回一个 number 的函数类型别名 calculator</span>
<span class="token keyword">type</span> <span class="token class-name">calculator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token comment">// 定义一个加法运算 calculator 函数 addNumbers_calculator</span>
<span class="token keyword">let</span> addNumbers_calculator<span class="token operator">:</span> <span class="token function-variable function">calculator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token comment">// 定义一个减法运算 calculator 函数 subtractNumbers_calculator</span>
<span class="token keyword">let</span> subtractNumbers_calculator<span class="token operator">:</span> <span class="token function-variable function">calculator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
<span class="token comment">// 定义一个参数为 operation 字符串(add | subtract) 返回 calculator 类型的函数 doCalculation</span>
<span class="token keyword">let</span> doCalculation <span class="token operator">=</span> <span class="token punctuation">(</span>operation<span class="token operator">:</span> <span class="token string">&quot;add&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;substract&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span> calculator <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>operation <span class="token operator">===</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> addNumbers_calculator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> subtractNumbers_calculator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doCalculation</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doCalculation</span><span class="token punctuation">(</span><span class="token string">&quot;substract&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202203020930891.png" alt="image-20220302093052728"></p><p>将别名换成 interface 定义接口, 主体逻辑也不用改变</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 定义一个用于对两个 number 进行运算并返回一个 number 的函数类型别名 calculator</span>
<span class="token comment">// type calculator = (x: number, y: number) =&gt; number;</span>
<span class="token comment">// 使用接口定义 calculator</span>
<span class="token keyword">interface</span> <span class="token class-name">calculator</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义一个加法运算 calculator 函数 addNumbers_calculator</span>
<span class="token keyword">let</span> addNumbers_calculator<span class="token operator">:</span> <span class="token function-variable function">calculator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token comment">// 定义一个减法运算 calculator 函数 subtractNumbers_calculator</span>
<span class="token keyword">let</span> subtractNumbers_calculator<span class="token operator">:</span> <span class="token function-variable function">calculator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
<span class="token comment">// 定义一个参数为 operation 字符串(add | subtract) 返回 calculator 类型的函数 doCalculation</span>
<span class="token keyword">let</span> doCalculation <span class="token operator">=</span> <span class="token punctuation">(</span>operation<span class="token operator">:</span> <span class="token string">&quot;add&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;substract&quot;</span><span class="token punctuation">)</span><span class="token operator">:</span> calculator <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>operation <span class="token operator">===</span> <span class="token string">&quot;add&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> addNumbers_calculator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> subtractNumbers_calculator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doCalculation</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doCalculation</span><span class="token punctuation">(</span><span class="token string">&quot;substract&quot;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips"><span>Tips</span></a></h2><hr><h3 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode"><span>VSCode</span></a></h3><hr><h4 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展"><span>扩展</span></a></h4><ul><li><p>Live Server</p><p><img src="http://cdn.ayusummer233.top/img/20210717150010.png" alt="image-20210717150010179"></p><p>Launch a development local Server with live reload feature for static &amp; dynamic pages</p><p>实时编译运行 JS, 再打开开发者工具, 可以边改动边观察效果</p></li><li><p>HTML Boilerplate</p><p><img src="http://cdn.ayusummer233.top/img/20210717150127.png" alt="image-20210717150127783"></p><p>自动生成 HTML5 模板</p></li></ul><hr><h3 id="在线编译运行" tabindex="-1"><a class="header-anchor" href="#在线编译运行"><span>在线编译运行</span></a></h3>`,18),X={href:"https://www.typescriptlang.org/zh/play#code/GYVwdgxgLglg9mABAQwCaoHIgLYCMCmATgM4AUAHgFxg4GEA0iAntbUQJQDeAUIn4oXxQQhJOUQBqZgG5uAX24QExOABt8AOlVwA5qTSY2JUgCIoAC0H4T9AGzt2QA",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.typescriptlang.org/play?#code/PTAEHUFMBsGMHsC2lQBd5oBYoCoE8AHSAZVgCcBLA1UABWgEM8BzM+AVwDsATAGiwoBnUENANQAd0gAjQRVSQAUCEmYKsTKGYUAbpGF4OY0BoadYKdJMoL+gzAzIoz3UNEiPOofEVKVqAHSKymAAmkYI7NCuqGqcANag8ABmIjQUXrFOKBJMggBcISGgoAC0oACCoASMFmgY7p7ehCTkVOle4jUMdRLYTqCc8LEZzCZmoNJODPHFZZXVtZYYkAAeRJTInDQS8po+rf40gnjbDKv8LqD2jpbYoACqAEoAMsK7sUmxkGSCc+VVQQuaTwVb1UBrDYULY7PagbgUZLJH6QbYmJAECjuMigZEMVDsJzCFLNXxtajBBCcQQ0MwAUVWDEQNUgADVHBQGNJ3KAALygABEAAkYNAMOB4GRogLFFTBPB3AExcwABT0xnM9zsyhc9wASmCKhwDQ8ZC8iElzhB7Bo3zcZmY7AYzEg-Fg0HUiS58D0Ii8AoZTJZggFSRxAvADlQAHJhAA5SASAVBFQAeW+ZF2gldWkgx1QjgUrmkeFATgtOlGWH0KAQiBhwiudokkuiIgMHBx3RYbC43CCJSAA",target:"_blank",rel:"noopener noreferrer"},nn=n("hr",null,null,-1),sn=n("h2",{id:"promise",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#promise"},[n("span",null,"Promise")])],-1),an={href:"https://rexdainiel.gitbooks.io/typescript/content/docs/promise.html",target:"_blank",rel:"noopener noreferrer"},tn=n("strong",null,"感觉文档比较生硬, 夹杂着很多奇怪的词汇, 看起来像是蹩脚的翻译",-1),en={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"Promise",-1),ln={href:"https://github.com/stefanpenner/es6-promise",target:"_blank",rel:"noopener noreferrer"},cn=e('<p><code>Promise</code> 对象用于表示一个异步操作的最终完成 (或失败)及其结果值。</p><p>一个 <code>Promise</code> 对象代表一个在这个 <code>promise</code> 被创建出来时不一定已知的值。它让您能够把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。 这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 <code>promise</code>，以便在未来某个时候把值交给使用者。</p><p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p><ul><li>*待定(pending) *: 初始状态，既没有被兑现，也没有被拒绝。</li><li>*已兑现(fulfilled) *: 意味着操作成功完成。</li><li>*已拒绝(rejected) *: 意味着操作失败。</li></ul><p>待定状态的 Promise 对象要么会通过一个值*被兑现(fulfilled) *，要么会通过一个原因(错误) *被拒绝(rejected) *。当这些情况之一发生时，我们用 promise 的 then 方法排列起来的相关处理程序就会被调用。如果 promise 在一个相应的处理程序被绑定时就已经被兑现或被拒绝了，那么这个处理程序就会被调用，因此在完成异步操作和绑定处理方法之间不会存在竞争状态。</p><p><img src="http://cdn.ayusummer233.top/img/202203281209302.png" alt="img"></p>',6),un=n("code",null,"Domenic Denicola",-1),rn={href:"https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md",target:"_blank",rel:"noopener noreferrer"},dn=e(`<hr><h3 id="创建-promise" tabindex="-1"><a class="header-anchor" href="#创建-promise"><span>创建 Promise</span></a></h3><p>创建 <code>promise</code> 只需要简单地在 <code>Promise 构造器</code> 上调用 <code>new</code> 即可; <code>promise 构造器</code> 传入 <code>resolve</code> 和 <code>reject</code> 以控制 <code>promise 状态</code></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// resolve / reject 函数操控着 promise 的命运</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function kn(mn,bn){const a=o("ExternalLinkIcon");return l(),c("div",null,[u,n("ul",null,[n("li",null,[n("p",null,[s("首先要安装 "),n("a",r,[s("nodejs"),t(a)])])]),d]),k,m,b,n("ul",null,[n("li",null,[n("p",null,[n("a",v,[s("介绍 - Learn | Microsoft Docs"),t(a)])])]),n("li",null,[n("p",null,[n("a",h,[s("B站微软Reactor_SH"),t(a)])])]),n("li",null,[n("p",null,[n("a",g,[s("<官网>起步 · TypeScript——JavaScript的超集 (tslang.cn)"),t(a)])])]),n("li",null,[n("p",null,[n("a",y,[s("5分钟了解 TypeScript - TypeScript 中文手册 (bootcss.com)"),t(a)])])]),n("li",null,[n("p",null,[n("a",f,[s("TypeScript 教程 | 菜鸟教程 (runoob.com)"),t(a)])])])]),E,B,n("blockquote",null,[n("p",null,[n("a",A,[s("基础类型 - TypeScript 中文手册 (bootcss.com)"),t(a)])]),n("p",null,[n("a",_,[s("在 TypeScript 中声明变量类型 - Learn | Microsoft Docs"),t(a)])])]),w,n("blockquote",null,[n("p",null,[n("a",x,[s("TypeScript 使用let和const声明变量 - 知乎 (zhihu.com)"),t(a)])])]),S,n("blockquote",null,[n("p",null,[n("a",q,[s("练习 - 枚举 - Learn | Microsoft Docs"),t(a)])]),n("p",null,[n("a",N,[s("TS入门篇 | 详解 TypeScript 枚举类型 - 掘金 (juejin.cn)"),t(a)])])]),T,n("blockquote",null,[n("p",null,[n("a",C,[s("TypeScript 中的任何 any 和 unknown 类型 - Learn | Microsoft Docs"),t(a)])])]),D,n("blockquote",null,[n("p",null,[n("a",M,[s("TypeScript 中的联合类型和交叉类型 - Learn | Microsoft Docs"),t(a)])])]),F,n("blockquote",null,[n("p",null,[n("a",P,[s("TypeScript 中的联合类型和交叉类型 - Learn | Microsoft Docs"),t(a)])])]),I,n("blockquote",null,[n("p",null,[n("a",V,[s("TypeScript 中的集合类型 - Learn | Microsoft Docs"),t(a)])])]),L,n("ul",null,[n("li",null,[n("p",null,[n("a",j,[s("TypeScript 中的接口概述 - Learn | Microsoft Docs"),t(a)])])]),z]),J,n("ul",null,[n("li",null,[n("p",null,[n("a",U,[s("练习 - 在 TypeScript 中扩展接口 - Learn | Microsoft Docs"),t(a)])])]),Q]),O,G,n("ul",null,[n("li",null,[n("a",Y,[s("在 Typescript 中使用接口的其他方法 - Learn | Microsoft Docs"),t(a)])])]),H,n("blockquote",null,[n("p",null,[n("a",Z,[s("在 TypeScript 中创建函数 - Learn | Microsoft Docs"),t(a)])])]),R,n("blockquote",null,[n("p",null,[n("a",K,[s("运用参数的乐趣 - Learn | Microsoft Docs"),t(a)])])]),W,n("ul",null,[n("li",null,[n("p",null,[n("a",X,[s("TypeScript: 游乐场 - 一个用于 TypeScript 和 JavaScript 的在线编辑器 (typescriptlang.org)"),t(a)])])]),n("li",null,[n("p",null,[n("a",$,[s("TypeScript: TS Playground - An online editor for exploring TypeScript and JavaScript (typescriptlang.org)"),t(a)])])])]),nn,sn,n("blockquote",null,[n("p",null,[n("a",an,[s("Promise · 深入挖掘 TypeScript (gitbooks.io)"),t(a)]),s("["),tn,s("]")]),n("p",null,[n("a",en,[s("Promise - JavaScript | MDN (mozilla.org)"),t(a)])]),n("p",null,[n("a",pn,[s("Promise - 廖雪峰的官方网站 (liaoxuefeng.com)"),t(a)])])]),n("p",null,[on,s(" 类存在于很多现代 JavaScript 引擎中，而且可以很容易地被 "),n("a",ln,[s("polyfill"),t(a)]),s("。Promise 的主要目的是为异步／回调风格的代码带来同步风格的错误处理。")]),cn,n("blockquote",null,[n("p",null,[s('如果一个 promise 已经被兑现(fulfilled) 或被拒绝(rejected) ，那么我们也可以说它处于*已敲定(settled) *状态。您还会听到一个经常跟 promise 一起使用的术语：*已决议(resolved) *，它表示 promise 已经处于已敲定(settled)状态，或者为了匹配另一个 promise 的状态被"锁定"了。'),un,s(" 的 "),n("a",rn,[s("States and fates"),t(a)]),s(" 中有更多关于 promise 术语的细节可以供您参考。")])]),dn])}const gn=p(i,[["render",kn],["__file","TypeScript.html.vue"]]),yn=JSON.parse('{"path":"/Language/TypeScript/TypeScript.html","title":"TypeScript","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"教程","slug":"教程","link":"#教程","children":[]},{"level":2,"title":"类型","slug":"类型","link":"#类型","children":[{"level":3,"title":"关键字","slug":"关键字","link":"#关键字","children":[]},{"level":3,"title":"模板字符串","slug":"模板字符串","link":"#模板字符串","children":[]},{"level":3,"title":"枚举","slug":"枚举","link":"#枚举","children":[]},{"level":3,"title":"unknown 类型","slug":"unknown-类型","link":"#unknown-类型","children":[]},{"level":3,"title":"类型断言","slug":"类型断言","link":"#类型断言","children":[]},{"level":3,"title":"类型保护","slug":"类型保护","link":"#类型保护","children":[]},{"level":3,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]},{"level":3,"title":"交叉类型","slug":"交叉类型","link":"#交叉类型","children":[]},{"level":3,"title":"对象类型","slug":"对象类型","link":"#对象类型","children":[]}]},{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[{"level":3,"title":"TypeScript 中的接口概述","slug":"typescript-中的接口概述","link":"#typescript-中的接口概述","children":[]},{"level":3,"title":"扩展接口","slug":"扩展接口","link":"#扩展接口","children":[]},{"level":3,"title":"使用接口的其他方法","slug":"使用接口的其他方法","link":"#使用接口的其他方法","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"命名函数","slug":"命名函数","link":"#命名函数","children":[]},{"level":3,"title":"匿名函数","slug":"匿名函数","link":"#匿名函数","children":[]},{"level":3,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]},{"level":3,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":3,"title":"定义函数类型","slug":"定义函数类型","link":"#定义函数类型","children":[]}]},{"level":2,"title":"Tips","slug":"tips","link":"#tips","children":[{"level":3,"title":"VSCode","slug":"vscode","link":"#vscode","children":[]},{"level":3,"title":"在线编译运行","slug":"在线编译运行","link":"#在线编译运行","children":[]}]},{"level":2,"title":"Promise","slug":"promise","link":"#promise","children":[{"level":3,"title":"创建 Promise","slug":"创建-promise","link":"#创建-promise","children":[]}]}],"git":{"createdTime":1667831333000,"updatedTime":1709635981000,"contributors":[{"name":"233Official","email":"ayusummer233@qq.com","commits":2},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1},{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":1}]},"readingTime":{"minutes":19.37,"words":5811},"filePathRelative":"Language/TypeScript/TypeScript.md","localizedDate":"2022年11月7日","excerpt":"\\n<ul>\\n<li><a href=\\"#typescript\\">TypeScript</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85\\">安装</a></li>\\n<li><a href=\\"#%E6%95%99%E7%A8%8B\\">教程</a></li>\\n<li><a href=\\"#%E7%B1%BB%E5%9E%8B\\">类型</a>\\n<ul>\\n<li><a href=\\"#%E5%85%B3%E9%94%AE%E5%AD%97\\">关键字</a>\\n<ul>\\n<li><a href=\\"#var-let-%E4%B8%8E-const\\">var, let 与 const</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2\\">模板字符串</a></li>\\n<li><a href=\\"#%E6%9E%9A%E4%B8%BE\\">枚举</a></li>\\n<li><a href=\\"#unknown-%E7%B1%BB%E5%9E%8B\\">unknown 类型</a></li>\\n<li><a href=\\"#%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80\\">类型断言</a></li>\\n<li><a href=\\"#%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4\\">类型保护</a></li>\\n<li><a href=\\"#%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B\\">联合类型</a></li>\\n<li><a href=\\"#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B\\">交叉类型</a></li>\\n<li><a href=\\"#%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B\\">对象类型</a>\\n<ul>\\n<li><a href=\\"#%E6%95%B0%E7%BB%84\\">数组</a></li>\\n<li><a href=\\"#%E5%85%83%E7%BB%84\\">元组</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%8E%A5%E5%8F%A3\\">接口</a>\\n<ul>\\n<li><a href=\\"#typescript-%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%A6%82%E8%BF%B0\\">TypeScript 中的接口概述</a>\\n<ul>\\n<li><a href=\\"#%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E7%9A%84%E5%8C%BA%E5%88%AB\\">接口与类型别名的区别</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3\\">扩展接口</a>\\n<ul>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0-javascript-api\\">使用接口描述 JavaScript API</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%87%BD%E6%95%B0\\">函数</a>\\n<ul>\\n<li><a href=\\"#%E5%91%BD%E5%90%8D%E5%87%BD%E6%95%B0\\">命名函数</a></li>\\n<li><a href=\\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\\">匿名函数</a></li>\\n<li><a href=\\"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0\\">箭头函数</a></li>\\n<li><a href=\\"#%E5%8F%82%E6%95%B0\\">参数</a></li>\\n<li><a href=\\"#%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B\\">定义函数类型</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#tips\\">Tips</a>\\n<ul>\\n<li><a href=\\"#vscode\\">VSCode</a>\\n<ul>\\n<li><a href=\\"#%E6%89%A9%E5%B1%95\\">扩展</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C\\">在线编译运行</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#promise\\">Promise</a>\\n<ul>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA-promise\\">创建 Promise</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{gn as comp,yn as data};
