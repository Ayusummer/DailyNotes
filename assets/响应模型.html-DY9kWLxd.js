import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DxMJFouC.js";const e={},p=t(`<h1 id="响应模型" tabindex="-1"><a class="header-anchor" href="#响应模型"><span>响应模型</span></a></h1><ul><li><a href="#%E5%93%8D%E5%BA%94%E6%A8%A1%E5%9E%8B">响应模型</a><ul><li><a href="#response_model">response_model</a></li><li><a href="#%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B%E5%93%8D%E5%BA%94">复杂类型响应</a><ul><li><a href="#%E7%9B%B4%E6%8E%A5%E6%90%93-json">直接搓 JSON</a></li><li><a href="#%E5%B0%81%E8%A3%85-schema">封装 schema</a></li></ul></li><li><a href="#%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81">响应状态码</a></li><li><a href="#%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86">表单数据处理</a></li><li><a href="#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%8A%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3">文件上传及参数详解</a></li><li><a href="#%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE">静态文件的配置</a></li><li><a href="#%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E9%85%8D%E7%BD%AE">路径操作配置</a></li><li><a href="#fastapi-%E9%85%8D%E7%BD%AE%E9%A1%B9">FastAPI 配置项</a></li><li><a href="#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">错误处理</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">自定义异常处理</a></li></ul></li></ul><hr><h2 id="response-model" tabindex="-1"><a class="header-anchor" href="#response-model"><span>response_model</span></a></h2><p>使用 <code>pydantic.BaseModel</code> 派生子类创建响应模型类, 在写路由时使用 <code>response_model=xxx</code> 来指定 <code>xxx</code> 为响应模型, 这样返回的响应就是一个 <code>xxx</code> 实例</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">UserBase</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    username<span class="token punctuation">:</span> <span class="token builtin">str</span>
    email<span class="token punctuation">:</span> EmailStr
    mobile<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;10086&quot;</span>
    address<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span>
    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>

<span class="token keyword">class</span> <span class="token class-name">UserIn</span><span class="token punctuation">(</span>UserBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;用于创建 User 对象
    用户创建时需要给出 password
    但是访问用户时不应当返回 password
    &quot;&quot;&quot;</span>
    password<span class="token punctuation">:</span> <span class="token builtin">str</span>

<span class="token keyword">class</span> <span class="token class-name">UserOut</span><span class="token punctuation">(</span>UserBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

users <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;user01&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;user01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;123123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;user01@example.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;user02&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;user02&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;user02@example.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mobile&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;110&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment"># 使用响应模型</span>
<span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">&quot;/response_model/&quot;</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>UserOut<span class="token punctuation">,</span> response_model_exclude_unset<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">response_model</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    response_model_exclude_unset=True 表示默认值不包含在响应中, 仅包含实际给的值, 
    如果实际给的值与默认值相同也会包含在响应中
    &quot;&quot;&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>password<span class="token punctuation">)</span>  <span class="token comment"># password不会被返回</span>
    <span class="token comment"># return user</span>
    <span class="token keyword">return</span> users<span class="token punctuation">[</span><span class="token string">&quot;user02&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202204301413543.png" alt="image-20220430141333793"></p><hr><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span>
    <span class="token string">&quot;/response_model/attributes&quot;</span><span class="token punctuation">,</span>
    <span class="token comment"># response_model=UserOut,</span>
    <span class="token comment"># response_model=Union[UserIn, UserOut],    # 取并集(也就是两个类的属性都有)</span>
    response_model<span class="token operator">=</span>List<span class="token punctuation">[</span>UserOut<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment"># 包含某些字段, 这里的 mobile 会被下面 exclude 覆盖掉</span>
    <span class="token comment"># response_model_include=[&quot;username&quot;, &quot;email&quot;, &quot;mobile&quot;], </span>
    response_model_include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 包含某些字段</span>
    response_model_exclude<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;mobile&quot;</span><span class="token punctuation">]</span>   <span class="token comment"># 排除掉某些字段</span>
<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">response_model_attributes</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;response_model_include列出需要在返回结果中包含的字段  
    response_model_exclude列出需要在返回结果中排除的字段
    &quot;&quot;&quot;</span>
    <span class="token comment"># del user.password  # Union[UserIn, UserOut]后，删除password属性也能返回成功</span>
    <span class="token comment"># return user</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> user<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应模型可以使用单个响应模型类, 也可以使用模型类并集, 模型类列表;</p><p>响应模型亦可以进行特定字段的选取与排除</p><p><img src="http://cdn.ayusummer233.top/img/202204301423796.png" alt="image-20220430142357442"></p><hr><h2 id="复杂类型响应" tabindex="-1"><a class="header-anchor" href="#复杂类型响应"><span>复杂类型响应</span></a></h2><p>比如这种响应:</p><p><img src="http://cdn.ayusummer233.top/img/202205021923030.png" alt="image-20220502192305698"></p><p>首先这是从数据库中获取到的数据加上一些修饰得到的</p><p>实现这种需求的两种方式:</p><hr><h3 id="直接搓-json" tabindex="-1"><a class="header-anchor" href="#直接搓-json"><span>直接搓 JSON</span></a></h3><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 引入 jsonable_encoder</span>
<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>encoders <span class="token keyword">import</span> jsonable_encoder
<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>responses <span class="token keyword">import</span> JSONResponse

staffs <span class="token operator">=</span> crud<span class="token punctuation">.</span>read_staff_by_page<span class="token punctuation">(</span>db<span class="token punctuation">,</span> page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span>
staffs <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>jsonable_encoder<span class="token punctuation">(</span>staffs<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> JSONResponse<span class="token punctuation">(</span>content<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;result&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token string">&quot;items&quot;</span><span class="token punctuation">:</span>staffs<span class="token punctuation">,</span>
        <span class="token string">&quot;total&quot;</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>staffs<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string">&quot;type&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;success&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="封装-schema" tabindex="-1"><a class="header-anchor" href="#封装-schema"><span>封装 schema</span></a></h3><p>先用 <code>pydantic.BaseModel</code> 和 <code>staff schema</code> 封装一个响应模型类</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 虚拟一个默认员工</span>
default_staff <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;sid&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token string">&quot;sname&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;咸鱼型233&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;did&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ResultSchema</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;结果类&quot;&quot;&quot;</span>
    items<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Staff<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Staff<span class="token punctuation">(</span><span class="token operator">**</span>default_staff<span class="token punctuation">)</span><span class="token punctuation">]</span>
    total<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>

<span class="token comment"># StaffListGetResultModel </span>
<span class="token keyword">class</span> <span class="token class-name">StaffListGetResultModel</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;员工列表获取结果类  
    :param items: 员工列表; 默认值: [default_staff]  
    :param total: 员工总数; 默认值: 1  
    &quot;&quot;&quot;</span>
    code<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>
    message<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;ok&quot;</span>
    result<span class="token punctuation">:</span> ResultSchema <span class="token operator">=</span> ResultSchema<span class="token punctuation">(</span><span class="token operator">**</span>default_staff<span class="token punctuation">)</span>
    <span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;success&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再返回需要从数据库中读取的数据以及默认值:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 查询 page 页, 页大小为 pageSize 的员工信息</span>
<span class="token decorator annotation punctuation">@router<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span>
    <span class="token string">&quot;/getStaffByPage/&quot;</span><span class="token punctuation">,</span> 
    summary<span class="token operator">=</span><span class="token string">&quot;分页按条目获取员工信息&quot;</span><span class="token punctuation">,</span>
    response_model<span class="token operator">=</span> schema<span class="token punctuation">.</span>StaffListGetResultModel<span class="token punctuation">,</span>
    response_model_exclude_unset<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_staff_by_page</span><span class="token punctuation">(</span>
    page<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    pageSize<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> 
    db<span class="token punctuation">:</span>Session <span class="token operator">=</span> Depends<span class="token punctuation">(</span>get_db<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;分页按条目获取员工信息  
    :param page: 页码  
    :param pageSize: 页大小  
    :param db: 数据库连接  
    :param response_model: 返回结果类型: schema.StaffListGetResultModel  
    :param response_model_exclude_unset: 是否排除未设置的字段, 表示默认值不包含在响应中, 仅包含实际给的值,   
                                        如果实际给的值与默认值相同也会包含在响应中
    &quot;&quot;&quot;</span>
    staffs <span class="token operator">=</span> crud<span class="token punctuation">.</span>read_staff_by_page<span class="token punctuation">(</span>db<span class="token punctuation">,</span> page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;result&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
            <span class="token string">&quot;items&quot;</span><span class="token punctuation">:</span>staffs<span class="token punctuation">,</span>
            <span class="token string">&quot;total&quot;</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span>staffs<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205021936876.png" alt="image-20220502193659478"></p><hr><h2 id="响应状态码" tabindex="-1"><a class="header-anchor" href="#响应状态码"><span>响应状态码</span></a></h2><p>在路由中通过 <code>status_code</code> 进行指定, 其值为整型, 可以通过 <code>status.HTTP_xx_xx</code> 获得名称上的提示</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">&quot;/status_code&quot;</span><span class="token punctuation">,</span> status_code<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">status_code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;返回status_code: 200&quot;&quot;&quot;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;status_code&quot;</span><span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span>


<span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">&quot;/status_attribute&quot;</span><span class="token punctuation">,</span> status_code<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">status_attribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;返回 status.HTTP_200_OK
    &quot;&quot;&quot;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;status_code&quot;</span><span class="token punctuation">:</span> status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="表单数据处理" tabindex="-1"><a class="header-anchor" href="#表单数据处理"><span>表单数据处理</span></a></h2><p>引入 <code>fastapi.Form</code> 用于处理表单数据</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># from fastapi import Form   # 用于处理表单数据</span>

<span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">&quot;/login/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>username<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> Form<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> Form<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 定义表单参数</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Form(...) 表示参数为必填项  
    用Form类需要pip install python-multipart;   
    Form类的元数据和校验方法类似Body/Query/Path/Cookie
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">:</span> username<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202204301452811.png" alt="image-20220430145257599"></p><hr><h2 id="文件上传及参数详解" tabindex="-1"><a class="header-anchor" href="#文件上传及参数详解"><span>文件上传及参数详解</span></a></h2><p>引入 <code>fastapi.File &amp; UploadFile</code>, 路由函数参数中使用 <code>File</code> 和 <code>UploadFile</code> 来注解参数</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;Request Files 单文件、多文件上传及参数详解&quot;&quot;&quot;</span>
<span class="token comment"># from fastapi import (</span>
<span class="token comment">#     File,   # 文件处理</span>
<span class="token comment">#     UploadFile,     # 用于处理文件上传</span>
<span class="token comment"># )</span>

<span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">&quot;/file&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">file_</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">:</span> <span class="token builtin">bytes</span> <span class="token operator">=</span> File<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    如果要上传多个文件 files: List[bytes] = File(...)  
    使用File类 文件内容会以bytes的形式读入内存  
    适合于上传小文件
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;file_size&quot;</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">}</span>


<span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span><span class="token string">&quot;/upload_files&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">upload_files</span><span class="token punctuation">(</span>files<span class="token punctuation">:</span> List<span class="token punctuation">[</span>UploadFile<span class="token punctuation">]</span> <span class="token operator">=</span> File<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    如果要上传单个文件 file: UploadFile = File(...)  
    使用 UploadFile 类的优势:  
    1.文件存储在内存中，使用的内存达到阈值后，将被保存在磁盘中  
    2.适合于图片、视频大文件  
    3.可以获取上传的文件的元数据，如文件名，创建时间等  
    4.有文件对象的异步接口  
    5.上传的文件是Python文件对象, 可以使用write(), read(), seek(), close()操作  
    &quot;&quot;&quot;</span>
    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>
        contents <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;filename&quot;</span><span class="token punctuation">:</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;content_type&quot;</span><span class="token punctuation">:</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>content_type<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202204301504212.png" alt="image-20220430150417033"></p><p><img src="http://cdn.ayusummer233.top/img/202204301503316.png" alt="image-20220430150355031"></p><hr><h2 id="静态文件的配置" tabindex="-1"><a class="header-anchor" href="#静态文件的配置"><span>静态文件的配置</span></a></h2><p>静态文件一般放在 <code>static </code> 文件夹中, 需要在 <code>main app</code> (而非 <code>APIRouter</code> 分路由) 中进行挂载方可使用</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> os   <span class="token comment"># 用于拼接路径</span>

app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span>
    title<span class="token operator">=</span><span class="token string">&#39;FastAPI Tutorial and Coronavirus Tracker API Docs&#39;</span><span class="token punctuation">,</span>
    description<span class="token operator">=</span>&#39;FastAPI教程 \\
        新冠病毒疫情跟踪器API接口文档<span class="token punctuation">,</span> \\
        项目代码<span class="token punctuation">:</span>https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>liaogx<span class="token operator">/</span>fastapi<span class="token operator">-</span>tutorial&#39;<span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">,</span>
    docs_url<span class="token operator">=</span><span class="token string">&#39;/docs&#39;</span><span class="token punctuation">,</span>
    redoc_url<span class="token operator">=</span><span class="token string">&#39;/redocs&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># mount表示将某个目录下一个完全独立的应用挂载过来，这个不会在API交互文档中显示</span>
<span class="token comment"># .mount()不要在分路由APIRouter().mount()调用，模板会报错</span>
static_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;./coronavirus/static&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span>mount<span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">&#39;/static&#39;</span><span class="token punctuation">,</span> app<span class="token operator">=</span>StaticFiles<span class="token punctuation">(</span>directory<span class="token operator">=</span>static_path<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;static&#39;</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="路径操作配置" tabindex="-1"><a class="header-anchor" href="#路径操作配置"><span>路径操作配置</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;Path Operation Configuration 路径操作配置&quot;&quot;&quot;</span>
<span class="token comment"># 响应的状态码, 标签, 相应的描述符, 参数类型, 参数名称, 参数描述等等</span>

<span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>post</span><span class="token punctuation">(</span>
    <span class="token string">&quot;/path_operation_configuration&quot;</span><span class="token punctuation">,</span>    <span class="token comment"># URL 地址</span>
    response_model<span class="token operator">=</span>UserOut<span class="token punctuation">,</span>   <span class="token comment"># 响应的结果类型</span>
    <span class="token comment"># tags=[&quot;Path&quot;, &quot;Operation&quot;, &quot;Configuration&quot;],    # 标签, 在 doc 中会按照标签进行分类展示</span>
    summary<span class="token operator">=</span><span class="token string">&quot;This is summary&quot;</span><span class="token punctuation">,</span>  <span class="token comment"># 接口描述, 在 doc 中会在路径后面显示</span>
    description<span class="token operator">=</span><span class="token string">&quot;This is description&quot;</span><span class="token punctuation">,</span>  <span class="token comment"># 描述, 在 doc 中会在接口描述下面显示</span>
    response_description<span class="token operator">=</span><span class="token string">&quot;This is response description&quot;</span><span class="token punctuation">,</span>    <span class="token comment"># 响应描述, 在 doc 中会在响应结果下面显示</span>
    <span class="token comment"># deprecated=True,    # 是否弃用</span>
    status_code<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK  <span class="token comment"># 响应状态码</span>
<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">path_operation_configuration</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Path Operation Configuration 路径操作配置
    :param user: 用户信息
    :return: 返回结果
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202204301533021.png" alt="image-20220430153331803"></p><hr><h2 id="fastapi-配置项" tabindex="-1"><a class="header-anchor" href="#fastapi-配置项"><span>FastAPI 配置项</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># FastAPI 配置项</span>
app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span>
    <span class="token comment"># 标题</span>
    title<span class="token operator">=</span><span class="token string">&#39;FastAPI Tutorial and Coronavirus Tracker API Docs&#39;</span><span class="token punctuation">,</span>
    <span class="token comment"># 描述</span>
    description<span class="token operator">=</span>&#39;FastAPI教程 \\
        新冠病毒疫情跟踪器API接口文档<span class="token punctuation">,</span> \\
        项目代码<span class="token punctuation">:</span>https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>liaogx<span class="token operator">/</span>fastapi<span class="token operator">-</span>tutorial&#39;<span class="token punctuation">,</span>
    <span class="token comment"># 版本</span>
    version<span class="token operator">=</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">,</span>
    <span class="token comment"># Swagger UI 文档地址</span>
    docs_url<span class="token operator">=</span><span class="token string">&#39;/docs&#39;</span><span class="token punctuation">,</span>
    <span class="token comment"># ReDoc 文档地址</span>
    redoc_url<span class="token operator">=</span><span class="token string">&#39;/redocs&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><p>引入 <code>fastapi.HTTPException</code> 后在路由函数中进行使用</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment">##### Handling Errors 错误处理 #####</span>
<span class="token comment"># HTTP Exception 以及自定义异常处理器</span>
<span class="token comment"># from fastapi import HTTPException   # 用于处理HTTP异常</span>

<span class="token decorator annotation punctuation">@app04<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/http_exception&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">http_exception</span><span class="token punctuation">(</span>city<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;默认的异常处理测试   
    :param city: 城市名称  
    :return: 返回城市名称  
    若 city 不是 Beijing 则抛出 404 错误
    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> city <span class="token operator">!=</span> <span class="token string">&quot;Beijing&quot;</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string">&quot;City not found!&quot;</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;X-Error&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;city&quot;</span><span class="token punctuation">:</span> city<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="自定义异常处理" tabindex="-1"><a class="header-anchor" href="#自定义异常处理"><span>自定义异常处理</span></a></h2><p>在 <code>main app</code> 中进行异常处理的重写</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> RequestValidationError <span class="token comment"># 请求校验错误处理</span>
<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>responses <span class="token keyword">import</span> PlainTextResponse       <span class="token comment"># 文本形式返回 response</span>
<span class="token keyword">from</span> starlette<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> HTTPException <span class="token keyword">as</span> StarletteHTTPException  <span class="token comment"># HTTP 异常处理</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>exception_handler</span><span class="token punctuation">(</span>StarletteHTTPException<span class="token punctuation">)</span>  <span class="token comment"># 重写HTTPException异常处理器</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">http_exception_handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> exc<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    使用文本形式返回异常信息
    :param request: request 请求      (这个参数不能省)
    :param exc: 错误
    :return:
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> PlainTextResponse<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>exc<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">,</span> status_code<span class="token operator">=</span>exc<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>
<span class="token comment">#</span>
<span class="token comment">#</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>exception_handler</span><span class="token punctuation">(</span>RequestValidationError<span class="token punctuation">)</span>  <span class="token comment"># 重写请求验证异常处理器</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">validation_exception_handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> exc<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    :param request: 这个参数不能省
    :param exc:
    :return:
    &quot;&quot;&quot;</span>
    <span class="token keyword">return</span> PlainTextResponse<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>exc<span class="token punctuation">)</span><span class="token punctuation">,</span> status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重写前HTTP异常:</p><p><img src="http://cdn.ayusummer233.top/img/202204301550627.png" alt="image-20220430155058089"></p><p>重写后HTTP异常:</p><p><img src="http://cdn.ayusummer233.top/img/202204301551512.png" alt="image-20220430155146255"></p><hr><p>重写前请求异常:</p><p><img src="http://cdn.ayusummer233.top/img/202204301552271.png" alt="image-20220430155253999"></p><p>重写后请求异常:</p><p><img src="http://cdn.ayusummer233.top/img/202204301552608.png" alt="image-20220430155240171"></p><hr>`,72),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","响应模型.html.vue"]]),k=JSON.parse('{"path":"/%E5%90%8E%E7%AB%AF/FastAPI/%E5%93%8D%E5%BA%94%E6%A8%A1%E5%9E%8B.html","title":"响应模型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"response_model","slug":"response-model","link":"#response-model","children":[]},{"level":2,"title":"复杂类型响应","slug":"复杂类型响应","link":"#复杂类型响应","children":[{"level":3,"title":"直接搓 JSON","slug":"直接搓-json","link":"#直接搓-json","children":[]},{"level":3,"title":"封装 schema","slug":"封装-schema","link":"#封装-schema","children":[]}]},{"level":2,"title":"响应状态码","slug":"响应状态码","link":"#响应状态码","children":[]},{"level":2,"title":"表单数据处理","slug":"表单数据处理","link":"#表单数据处理","children":[]},{"level":2,"title":"文件上传及参数详解","slug":"文件上传及参数详解","link":"#文件上传及参数详解","children":[]},{"level":2,"title":"静态文件的配置","slug":"静态文件的配置","link":"#静态文件的配置","children":[]},{"level":2,"title":"路径操作配置","slug":"路径操作配置","link":"#路径操作配置","children":[]},{"level":2,"title":"FastAPI 配置项","slug":"fastapi-配置项","link":"#fastapi-配置项","children":[]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":2,"title":"自定义异常处理","slug":"自定义异常处理","link":"#自定义异常处理","children":[]}],"git":{"createdTime":1714457095000,"updatedTime":1714457095000,"contributors":[{"name":"233JG","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":6.63,"words":1989},"filePathRelative":"后端/FastAPI/响应模型.md","localizedDate":"2024年4月30日","excerpt":"\\n<ul>\\n<li><a href=\\"#%E5%93%8D%E5%BA%94%E6%A8%A1%E5%9E%8B\\">响应模型</a>\\n<ul>\\n<li><a href=\\"#response_model\\">response_model</a></li>\\n<li><a href=\\"#%E5%A4%8D%E6%9D%82%E7%B1%BB%E5%9E%8B%E5%93%8D%E5%BA%94\\">复杂类型响应</a>\\n<ul>\\n<li><a href=\\"#%E7%9B%B4%E6%8E%A5%E6%90%93-json\\">直接搓 JSON</a></li>\\n<li><a href=\\"#%E5%B0%81%E8%A3%85-schema\\">封装 schema</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81\\">响应状态码</a></li>\\n<li><a href=\\"#%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\\">表单数据处理</a></li>\\n<li><a href=\\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%8F%8A%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3\\">文件上传及参数详解</a></li>\\n<li><a href=\\"#%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE\\">静态文件的配置</a></li>\\n<li><a href=\\"#%E8%B7%AF%E5%BE%84%E6%93%8D%E4%BD%9C%E9%85%8D%E7%BD%AE\\">路径操作配置</a></li>\\n<li><a href=\\"#fastapi-%E9%85%8D%E7%BD%AE%E9%A1%B9\\">FastAPI 配置项</a></li>\\n<li><a href=\\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\\">错误处理</a></li>\\n<li><a href=\\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\\">自定义异常处理</a></li>\\n</ul>\\n</li>\\n</ul>"}');export{d as comp,k as data};
