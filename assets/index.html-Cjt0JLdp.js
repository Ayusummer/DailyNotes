import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as e,c as l,a as s,d as o,b as c,e as a}from"./app-DxMJFouC.js";const i={},u=a(`<h1 id="xss-跨站脚本漏洞" tabindex="-1"><a class="header-anchor" href="#xss-跨站脚本漏洞"><span>XSS 跨站脚本漏洞</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><ul><li><p>XSS 漏洞一直被评估为 web 漏洞中危害较大的漏洞, 在 OWASP TOP10 排名中一致属于前三的地位</p></li><li><p>XSS 是一种发生在 Web 前端的漏洞, 所以其危害的对象也主要是前端用户</p></li><li><p>XSS 漏洞可以用来进行钓鱼攻击, 前端 js 挖矿, 用户 cookie 获取, 甚至于结合浏览器自身的漏洞对用户主机进行远程控制等</p></li></ul><hr><p><img src="http://cdn.ayusummer233.top/img/202210261726202.png" alt="image-20221026172635938"></p><hr><ul><li><p>常见类型</p><p>危害: 存储型 &gt; 反射型 &gt; DOM 型</p><ul><li><code>存储型</code>: 交互的数据会被存在数据库里面, 长久性存储, 一般出现在留言板, 注册等界面</li><li><code>反射型</code>: 交互的数据一般不会被存在数据库里面, 一次性, 所见即所得, 一般出现在查询类页面等</li><li><code>DOM 型</code>: <ul><li>不与后台服务器产生数据交互, 是一种通过 DOM 操作前端代码输出的时候产生的问题, 一次性, 也属于反射型</li><li>与一般的反射型的区别就在于不会与后端数据库进行交互</li></ul></li></ul></li></ul><hr><h2 id="漏洞成因" tabindex="-1"><a class="header-anchor" href="#漏洞成因"><span>漏洞成因</span></a></h2><p><img src="http://cdn.ayusummer233.top/img/202210261737780.png" alt="image-20221026173752716"></p><p>形成 XSS 漏洞的主要原因是程序对输入和输出的控制不够严格, 导致 “精心构造” 的脚本输入后, 在输出到前端时被浏览器当做有效代码执行从而产生危害</p><hr><h2 id="漏洞测试流程" tabindex="-1"><a class="header-anchor" href="#漏洞测试流程"><span>漏洞测试流程</span></a></h2><ol><li>在目标站点上找到输入点, 比如查询接口, 留言板等</li><li>输入一组 “特殊字符 + 唯一识别字符”, 点击提交后, 查看返回的源码, 是否有做对应的处理</li><li>通过搜索定位到唯一字符, 结合唯一字符前后语法确认是否可以构造执行 js 的条件(构造闭合)</li><li>提交构造的脚本代码(以及各种绕过), 看看是否可以成功执行, 如果成功执行则说明存在 XSS 漏洞</li></ol><blockquote><ul><li>一般查询接口容易出现反射型 XSS, 留言板容易出现存储型 XSS</li><li>由于后台可能存在过滤措施, 构造的 script 可能会被过滤掉而无法生效, 或者环境限制了执行(浏览器)</li><li>通过变化不同的 script, 尝试绕过后台过滤机制</li></ul></blockquote><blockquote><p>高版本 Chrome 安全级别比较高, 可能会把一些常规的 XSS 禁掉, 建议使用 FireFox 开发者版</p></blockquote><hr><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><h3 id="反射型-xss" tabindex="-1"><a class="header-anchor" href="#反射型-xss"><span>反射型 XSS</span></a></h3><p>反射型 XSS 有 get 和 post 两种</p><p>GET 和 POST 的典型区别在于</p><ul><li>GET 是以 url 方式提交数据</li><li>POST 是以表单方式在请求体中提交数据</li></ul><p>GET 方式的 XSS 漏洞更加容易被利用, 一般利用的方式是将带有跨站脚本攻击的 URL 伪装后发给目标</p><p>而 POST 方式由于是以表单方式提交, 无法直接使用 URL 方式进行攻击</p><hr><h4 id="反射型xss-get" tabindex="-1"><a class="header-anchor" href="#反射型xss-get"><span>反射型XSS(get)</span></a></h4><p>利用此漏洞构造一个恶意url发给受害者, 由于 url 中的域名是正常或者知名域名, 因此受害者可能还会降低戒备, 如果受害者点击该 url 则会受到(反射)攻击</p><p><img src="http://cdn.ayusummer233.top/img/202210271503635.png" alt="image-20221027150306448"></p><hr><h4 id="反射型xss-post" tabindex="-1"><a class="header-anchor" href="#反射型xss-post"><span>反射型XSS(Post)</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;xss&#39;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-http line-numbers-mode" data-ext="http" data-title="http"><pre class="language-http"><code><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//192.168.1.215:9221/vul/xss/xss_reflected_get.php?message=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;&amp;submit=submit</span></span>

<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//192.168.1.215:9221/vul/xss/xss_reflected_get.php?message=%3Cscript%3Ealert%28%27xss%27%29%3C%2Fscript%3E&amp;submit=submit</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202210271552963.png" alt="image-20221027155258803"></p><hr><h3 id="存储型-xss" tabindex="-1"><a class="header-anchor" href="#存储型-xss"><span>存储型 XSS</span></a></h3><p>存储型 XSS 和反射型形成的原因一样, 不同的是存储型 XSS 下攻击者可以将脚本注入到后台存储起来, 构成更加持久的危害, 因此存储型 XSS 也称 ‘永久型 XSS’</p><hr><p><img src="http://cdn.ayusummer233.top/img/202210271510154.png" alt="image-20221027151014976"></p><hr><h3 id="dom-型-xss" tabindex="-1"><a class="header-anchor" href="#dom-型-xss"><span>DOM 型 XSS</span></a></h3>`,40),r={href:"https://www.w3school.com.cn/js/js_htmldom.asp",target:"_blank",rel:"noopener noreferrer"},k=s("hr",null,null,-1),d=a(`<p>HTML DOM(Document Object Model 文档对象模型)</p><p>当网页被加载时，浏览器会创建页面的文档对象模型(<em>D</em>ocument <em>O</em>bject <em>M</em>odel) 。</p><p><em>HTML DOM</em> 模型被结构化为<em>对象树</em>：</p><p><img src="http://cdn.ayusummer233.top/img/202210271558653.png" alt="image-20221027155838530"></p><p><strong>通过 HTML DOM，JavaScript 能够访问和改变 HTML 文档的所有元素。</strong></p><p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p><ul><li>JavaScript 能改变页面中的所有 HTML 元素</li><li>JavaScript 能改变页面中的所有 HTML 属性</li><li>JavaScript 能改变页面中的所有 CSS 样式</li><li>JavaScript 能删除已有的 HTML 元素和属性</li><li>JavaScript 能添加新的 HTML 元素和属性</li><li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li><li>JavaScript 能在页面中创建新的 HTML 事件</li></ul><p>可以把 DOM 理解为一个访问 HTML 的标准编程接口</p><blockquote><p>DOM 操作是完全在前端完成的, 不会与后台进行交互</p></blockquote><p>并不是所有的query都是调用后端接口和服务器交互数据 前端写法千奇百怪, 有可能前端会从 url 中获取参数来操作 dom, 例如这种:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xssd_main<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token keyword">function</span> <span class="token function">domxss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 获取 url 中的参数 <span class="token operator">--</span><span class="token operator">&gt;</span>
            <span class="token keyword">var</span> str <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span>
            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 获取 url 中的 text 参数 <span class="token operator">--</span><span class="token operator">&gt;</span>
            <span class="token keyword">var</span> txss <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;text=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> xss <span class="token operator">=</span> txss<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//  alert(xss);</span>

            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;dom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&lt;a href=&#39;&quot;</span><span class="token operator">+</span>xss<span class="token operator">+</span><span class="token string">&quot;&#39;&gt;就让往事都随风,都随风吧&lt;/a&gt;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//试试：&#39;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#39;xss&#39;)&quot;&gt;</span>
        <span class="token comment">//试试：&#39; onclick=&quot;alert(&#39;xss&#39;)&quot;&gt;,闭合掉就行</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--&lt;a href=&quot;&quot; onclick=(&#39;xss&#39;)&gt;--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>请说出你的伤心往事<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dom<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/img/202210281005174.png" alt="image-20221028100544063"></p></blockquote><hr><h2 id="xss-漏洞测试-cookie-获取和钓鱼攻击演示" tabindex="-1"><a class="header-anchor" href="#xss-漏洞测试-cookie-获取和钓鱼攻击演示"><span>XSS 漏洞测试: cookie 获取和钓鱼攻击演示</span></a></h2><p><img src="http://cdn.ayusummer233.top/img/202210281005525.png" alt="image-20221028095602906"></p>`,15);function m(g,h){const n=p("ExternalLinkIcon");return e(),l("div",null,[u,s("blockquote",null,[s("p",null,[s("a",r,[o("JavaScript HTML DOM (w3school.com.cn)"),c(n)])]),k]),d])}const x=t(i,[["render",m],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E6%BC%8F%E6%B4%9E%E7%B1%BB%E5%9E%8B/XSS/","title":"XSS 跨站脚本漏洞","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"漏洞成因","slug":"漏洞成因","link":"#漏洞成因","children":[]},{"level":2,"title":"漏洞测试流程","slug":"漏洞测试流程","link":"#漏洞测试流程","children":[]},{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[{"level":3,"title":"反射型 XSS","slug":"反射型-xss","link":"#反射型-xss","children":[]},{"level":3,"title":"存储型 XSS","slug":"存储型-xss","link":"#存储型-xss","children":[]},{"level":3,"title":"DOM 型 XSS","slug":"dom-型-xss","link":"#dom-型-xss","children":[]}]},{"level":2,"title":"XSS 漏洞测试: cookie 获取和钓鱼攻击演示","slug":"xss-漏洞测试-cookie-获取和钓鱼攻击演示","link":"#xss-漏洞测试-cookie-获取和钓鱼攻击演示","children":[]}],"git":{"createdTime":1694948984000,"updatedTime":1709635981000,"contributors":[{"name":"233PC","email":"ayusummer233@qq.com","commits":1},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":4.48,"words":1345},"filePathRelative":"网络安全/Web安全/漏洞类型/XSS/index.md","localizedDate":"2023年9月17日","excerpt":"\\n<h2>概述</h2>\\n<ul>\\n<li>\\n<p>XSS 漏洞一直被评估为 web 漏洞中危害较大的漏洞, 在 OWASP TOP10 排名中一致属于前三的地位</p>\\n</li>\\n<li>\\n<p>XSS 是一种发生在 Web 前端的漏洞, 所以其危害的对象也主要是前端用户</p>\\n</li>\\n<li>\\n<p>XSS 漏洞可以用来进行钓鱼攻击, 前端 js 挖矿, 用户 cookie 获取, 甚至于结合浏览器自身的漏洞对用户主机进行远程控制等</p>\\n</li>\\n</ul>\\n<hr>\\n<p><img src=\\"http://cdn.ayusummer233.top/img/202210261726202.png\\" alt=\\"image-20221026172635938\\"></p>"}');export{x as comp,b as data};
