import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as c,c as l,a as n,d as s,b as p,e as a}from"./app-DxMJFouC.js";const i={},u=a('<h1 id="ch3-基础数据类型" tabindex="-1"><a class="header-anchor" href="#ch3-基础数据类型"><span>CH3.基础数据类型</span></a></h1><p>Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型</p><p>本章介绍基础类型，包括：数字、字符串和布尔型。</p><p>复合数据类型——数组（§4.1）和结构体（§4.2）——是通过组合简单类型，来表达更加复杂的数据结构。</p><p>引用类型包括指针（§2.3.2）、切片（§4.2)）、字典（§4.3）、函数（§5）、通道（§8），虽然数据种类很多，但它们都是对程序中一个变量或状态的间接引用。</p><p>这意味着对任一引用类型数据的修改都会影响所有该引用的拷贝。</p><p>我们将在第7章介绍接口类型。</p><hr><ul><li><a href="#ch3%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">CH3.基础数据类型</a><ul><li><a href="#ch31%E6%95%B4%E5%9E%8B">CH3.1.整型</a></li><li><a href="#ch32-%E6%B5%AE%E7%82%B9%E6%95%B0">CH3.2. 浮点数</a><ul><li><a href="#%E7%BB%83%E4%B9%A031">练习3.1</a></li><li><a href="#%E7%BB%83%E4%B9%A032">练习3.2</a></li><li><a href="#%E7%BB%83%E4%B9%A033">练习3.3</a></li><li><a href="#%E7%BB%83%E4%B9%A034">练习3.4</a></li></ul></li><li><a href="#ch33%E5%A4%8D%E6%95%B0">CH3.3.复数</a><ul><li><a href="#%E7%BB%83%E4%B9%A035">练习3.5</a></li><li><a href="#%E7%BB%83%E4%B9%A036">练习3.6</a></li><li><a href="#%E7%BB%83%E4%B9%A037">练习3.7</a></li><li><a href="#%E7%BB%83%E4%B9%A038">练习3.8</a></li><li><a href="#%E7%BB%83%E4%B9%A039">练习3.9</a></li></ul></li><li><a href="#ch34%E5%B8%83%E5%B0%94%E5%9E%8B">CH3.4.布尔型</a></li><li><a href="#ch35%E5%AD%97%E7%AC%A6%E4%B8%B2">CH3.5.字符串</a><ul><li><a href="#%E7%BB%83%E4%B9%A0310">练习3.10</a></li><li><a href="#%E7%BB%83%E4%B9%A0-311">练习 3.11</a></li></ul></li></ul></li></ul><hr><h2 id="ch3-1-整型" tabindex="-1"><a class="header-anchor" href="#ch3-1-整型"><span>CH3.1.整型</span></a></h2>',11),r={href:"https://golang-china.github.io/gopl-zh/ch3/ch3-01.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>Go语言的数值类型包括几种不同大小的整数、浮点数和复数。</p><p>每种数值类型都决定了对应的大小范围和是否支持正负符号。</p><p>让我们先从整数类型开始介绍。</p><hr><p>Go语言同时提供了有符号和无符号类型的整数运算。</p><p>这里有 <code>int8</code>、<code>int16</code>、<code>int32</code> 和 <code>int64</code> 四种截然不同大小的有符号整数类型，分别对应8、16、32、64 bit大小的有符号整数，与此对应的是 <code>uint8</code>、<code>uint16</code>、<code>uint32</code> 和 <code>uint64</code> 四种无符号整数类型。</p><ul><li>有符号整数 <ul><li><code>int8</code>: <code>-2^7 ~ 2^7-1</code> (-128 ~ 127)</li><li><code>int16</code>: <code>-2^15 ~ 2^15-1</code> (-32768 ~ 32767)</li><li><code>int32</code>: <code>-2^31 ~ 2^31-1</code> (-2147483648 ~ 2147483647)</li><li><code>int64</code>: <code>-2^63 ~ 2^63-1</code> (-9223372036854775808 ~ 9223372036854775807)</li></ul></li><li>无符号整数 <ul><li><code>uint8</code>: <code>0 ~ 2^8-1</code> (0 ~ 255)</li><li><code>uint16</code>: <code>0 ~ 2^16-1</code> (0 ~ 65535)</li><li><code>uint32</code>: <code>0 ~ 2^32-1</code> (0 ~ 4294967295)</li><li><code>uint64</code>: <code>0 ~ 2^64-1</code> (0 ~ 18446744073709551615)</li></ul></li></ul><hr><p>这里还有两种一般对应特定CPU平台机器字大小的有符号和无符号整数 int 和 uint；</p><p>其中 int 是应用最广泛的数值类型。这两种类型都有同样的大小，32 或 64 bit，但是我们不能对此做任何的假设；</p><p>因为不同的编译器即使在相同的硬件平台上可能产生不同的大小。</p><hr><p>Unicode 字符 rune 类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可以互换使用。同样byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。</p><hr><p>最后，还有一种无符号的整数类型 <code>uintptr</code>，没有指定具体的bit大小但是足以容纳指针。</p><p><code>uintptr</code> 类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方。</p><p>我们将在第十三章的unsafe包相关部分看到类似的例子。</p><hr><p>不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。</p><p>其中int和int32也是不同的类型，即使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操作，反之亦然</p><hr><p>其中有符号整数采用2的补码形式表示，也就是最高bit位用来表示符号位，一个n-bit的有符号数的值域是从-2n-1到2n-1-1。</p><p>无符号整数的所有bit位都用于表示非负数，值域是0到2n-1。</p><p>例如，int8类型整数的值域是从-128到127，而uint8类型整数的值域是从0到255。</p><hr><p>下面是Go语言中关于算术运算、逻辑运算和比较运算的二元运算符，它们按照优先级递减的顺序排列：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token operator">*</span>      <span class="token operator">/</span>      <span class="token operator">%</span>      <span class="token operator">&lt;&lt;</span>       <span class="token operator">&gt;&gt;</span>     <span class="token operator">&amp;</span>       <span class="token operator">&amp;^</span>
<span class="token operator">+</span>      <span class="token operator">-</span>      <span class="token operator">|</span>      <span class="token operator">^</span>
<span class="token operator">==</span>     <span class="token operator">!=</span>     <span class="token operator">&lt;</span>      <span class="token operator">&lt;=</span>       <span class="token operator">&gt;</span>      <span class="token operator">&gt;=</span>
<span class="token operator">&amp;&amp;</span>
<span class="token operator">||</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二元运算符有五种优先级。在同一个优先级，使用左优先结合规则，但是使用括号可以明确优先顺序，使用括号也可以用于提升优先级，例如<code>mask &amp; (1 &lt;&lt; 28)</code>。</p><p>对于上表中前两行的运算符，例如+运算符还有一个与赋值相结合的对应运算符+=，可以用于简化赋值语句。</p><hr><p>算术运算符<code>+</code>、<code>-</code>、<code>*</code>和<code>/</code>可以适用于整数、浮点数和复数，但是取模运算符%仅用于整数间的运算。</p><p>对于不同编程语言，%取模运算的行为可能并不相同。</p><p>在Go语言中，<strong>%取模运算符的符号和被取模数的符号总是一致的</strong>，因此<code>-5%3</code>和<code>-5%-3</code>结果都是-2。</p><p>除法运算符<code>/</code>的行为则依赖于操作数是否全为整数，比如<code>5.0/4.0</code>的结果是1.25，但是5/4的结果是1，因为整数除法会向着0方向截断余数。</p><hr><p>一个算术运算的结果，不管是有符号或者是无符号的，如果需要更多的bit位才能正确表示的话，就说明计算结果是溢出了。超出的高位的bit位部分将被丢弃。</p><p>如果原始的数值是有符号类型，而且最左边的bit位是1的话，那么最终结果可能是负的，例如int8的例子：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> u <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">255</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> u<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> u<span class="token operator">*</span>u<span class="token punctuation">)</span> <span class="token comment">// &quot;255 0 1&quot;</span>

<span class="token keyword">var</span> i <span class="token builtin">int8</span> <span class="token operator">=</span> <span class="token number">127</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">*</span>i<span class="token punctuation">)</span> <span class="token comment">// &quot;127 -128 1&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>两个相同的整数类型可以使用下面的二元比较运算符进行比较；比较表达式的结果是布尔类型。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token operator">==</span>    等于
<span class="token operator">!=</span>    不等于
<span class="token operator">&lt;</span>     小于
<span class="token operator">&lt;=</span>    小于等于
<span class="token operator">&gt;</span>     大于
<span class="token operator">&gt;=</span>    大于等于

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>事实上，布尔型、数字类型和字符串等基本类型都是可比较的，也就是说两个相同类型的值可以用==和!=进行比较。</p><p>此外，整数、浮点数和字符串可以根据比较结果排序。许多其它类型的值可能是不可比较的，因此也就可能是不可排序的。</p><p>对于我们遇到的每种类型，我们需要保证规则的一致性。</p><p>这里是一元的加法和减法运算符：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token operator">+</span>      一元加法（无效果）
<span class="token operator">-</span>      负数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于整数，+x是0+x的简写，-x则是0-x的简写；对于浮点数和复数，+x就是x，-x则是x 的负数。</p><hr><p>Go语言还提供了以下的bit位操作运算符，前面4个操作运算符并不区分是有符号还是无符号数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token operator">&amp;</span>      位运算 AND
<span class="token operator">|</span>      位运算 OR
<span class="token operator">^</span>      位运算 XOR
<span class="token operator">&amp;^</span>     位清空（AND NOT）
<span class="token operator">&lt;&lt;</span>     左移
<span class="token operator">&gt;&gt;</span>     右移
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>位操作运算符<code>^</code>作为二元运算符时是按位异或（XOR），当用作一元运算符时表示按位取反；也就是说，它返回一个每个bit位都取反的数。</p><p>位操作运算符<code>&amp;^</code>用于按位置零（AND NOT）：如果对应y中bit位为1的话，表达式<code>z = x &amp;^ y</code>结果z的对应的bit位为0，否则z对应的bit位等于x相应的bit位的值。</p><hr><p>下面的代码演示了如何使用位操作解释uint8类型值的8个独立的bit位。</p><p>它使用了Printf函数的%b参数打印二进制格式的数字；</p><p>其中%08b中08表示打印至少8个字符宽度，不足的前缀部分用0填充。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">5</span>
<span class="token keyword">var</span> y <span class="token builtin">uint8</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment">// &quot;00100010&quot;, the set {1, 5}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// &quot;00000110&quot;, the set {1, 2}</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">&amp;</span>y<span class="token punctuation">)</span>  <span class="token comment">// &quot;00000010&quot;, the intersection {1}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">|</span>y<span class="token punctuation">)</span>  <span class="token comment">// &quot;00100110&quot;, the union {1, 2, 5}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">^</span>y<span class="token punctuation">)</span>  <span class="token comment">// &quot;00100100&quot;, the symmetric difference {2, 5}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">&amp;^</span>y<span class="token punctuation">)</span> <span class="token comment">// &quot;00100000&quot;, the difference {5}</span>

<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token comment">// membership test</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;, &quot;5&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &quot;01000100&quot;, the set {2, 6}</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%08b\\n&quot;</span><span class="token punctuation">,</span> x<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &quot;00010001&quot;, the set {0, 4}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>（6.5节给出了一个可以远大于一个字节的整数集的实现。）</p></blockquote><p>在<code>x&lt;&lt;n</code>和<code>x&gt;&gt;n</code>移位运算中，决定了移位操作的bit数部分必须是无符号数；</p><p>被操作的x可以是有符号数或无符号数。</p>`,61),d=n("p",null,[s("算术上，一个"),n("code",null,"x<<n"),s("左移运算等价于乘以"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"n")])]),n("annotation",{encoding:"application/x-tex"},"2^n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6644em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])]),s("，一个"),n("code",null,"x>>n"),s("右移运算等价于除以"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"n")])]),n("annotation",{encoding:"application/x-tex"},"2^n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6644em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])]),s("​。")],-1),m=a(`<hr><p>左移运算用零填充右边空缺的bit位，无符号数的右移运算也是用0填充左边空缺的bit位，但是有符号数的右移运算会用符号位的值填充左边空缺的bit位。因为这个原因，最好用无符号运算，这样你可以将整数完全当作一个bit位模式处理。</p><hr><p>尽管Go语言提供了无符号数的运算，但即使数值本身不可能出现负数，我们还是倾向于使用有符号的int类型，就像数组的长度那样，虽然使用uint无符号类型似乎是一个更合理的选择。事实上，内置的len函数返回一个有符号的int，我们可以像下面例子那样处理逆序循环。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>medals <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;gold&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;silver&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bronze&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>medals<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>medals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;bronze&quot;, &quot;silver&quot;, &quot;gold&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个选择对于上面的例子来说将是灾难性的。</p><p>如果len函数返回一个无符号数，那么i也将是无符号的uint类型，然后条件<code>i &gt;= 0</code>则永远为真。</p>`,7),v=n("p",null,[s("在三次迭代之后，也就是"),n("code",null,"i == 0"),s("时，i--语句将不会产生-1，而是变成一个uint类型的最大值（可能是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"64")]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^{64}-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"64")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s("​​），然后medals[i]表达式运行时将发生panic异常（§5.9），也就是试图访问一个slice范围以外的元素。")],-1),b=a(`<p>出于这个原因，无符号数往往只有在位运算或其它特殊的运算场景才会使用，就像bit集合、分析二进制文件格式或者是哈希和加密操作等。它们通常并不用于仅仅是表达非负数量的场合。</p><hr><p>一般来说，需要一个显式的转换将一个值从一种类型转化为另一种类型，并且算术和逻辑运算的二元操作中必须是相同的类型。</p><p>虽然这偶尔会导致需要很长的表达式，但是它消除了所有和类型相关的问题，而且也使得程序容易理解。</p><p>在很多场景，会遇到类似下面代码的常见的错误：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> apples <span class="token builtin">int32</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> oranges <span class="token builtin">int16</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">var</span> compote <span class="token builtin">int</span> <span class="token operator">=</span> apples <span class="token operator">+</span> oranges <span class="token comment">// compile error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当尝试编译这三个语句时，将产生一个错误信息：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>invalid operation<span class="token punctuation">:</span> apples <span class="token operator">+</span> oranges <span class="token punctuation">(</span>mismatched types <span class="token builtin">int32</span> and <span class="token builtin">int16</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种类型不匹配的问题可以有几种不同的方法修复，最常见方法是将它们都显式转型为一个常见类型：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> compote <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>apples<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">int</span><span class="token punctuation">(</span>oranges<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如2.5节所述，对于每种类型T，如果转换允许的话，类型转换操作T(x)将x转换为T类型。许多整数之间的相互转换并不会改变数值；它们只是告诉编译器如何解释这个值。</p><p>但是对于将一个大尺寸的整数类型转为一个小尺寸的整数类型，或者是将一个浮点数转为整数，可能会改变数值或丢失精度：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>f <span class="token operator">:=</span> <span class="token number">3.141</span> <span class="token comment">// a float64</span>
i <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// &quot;3.141 3&quot;</span>
f <span class="token operator">=</span> <span class="token number">1.99</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浮点数到整数的转换将丢失任何小数部分，然后向数轴零方向截断。</p><p>你应该避免对可能会超出目标类型表示范围的数值做类型转换，因为截断的行为可能依赖于具体的实现：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>f <span class="token operator">:=</span> <span class="token number">1e100</span>  <span class="token comment">// a float64</span>
i <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment">// 结果依赖于具体实现</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>任何大小的整数字面值都可以用以0开始的八进制格式书写，例如0666；</p><p>或用以0x或0X开头的十六进制格式书写，例如0xdeadbeef。</p><p>十六进制数字可以用大写或小写字母。</p><p>如今八进制数据通常用于POSIX操作系统上的文件访问权限标志，十六进制数字则更强调数字值的bit位模式。</p><p>当使用fmt包打印一个数值时，我们可以用%d、%o或%x参数控制输出的进制格式，就像下面的例子：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>o <span class="token operator">:=</span> <span class="token number">0666</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %[1]o %#[1]o\\n&quot;</span><span class="token punctuation">,</span> o<span class="token punctuation">)</span> <span class="token comment">// &quot;438 666 0666&quot;</span>
x <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %[1]x %#[1]x %#[1]X\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token comment">// Output:</span>
<span class="token comment">// 3735928559 deadbeef 0xdeadbeef 0XDEADBEEF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意fmt的两个使用技巧。</p><ul><li><p>通常Printf格式化字符串包含多个%参数时将会包含对应相同数量的额外操作数，但是%之后的<code>[1]</code>副词告诉Printf函数再次使用第一个操作数。</p></li><li><p>第二，%后的<code>#</code>副词告诉Printf在用%o、%x或%X输出时生成0、0x或0X前缀。</p><hr></li><li><p>在Go语言中，以0开头的数字代表这是一个八进制数，<code>0666</code> 表示八进制的666</p></li><li><p><code>fmt.Printf(&quot;%d %[1]o %#[1]o\\n&quot;, o)</code></p><ul><li>\`\`%d\`表示以十进制输出</li><li><code>%[1]o</code>表示以八进制输出</li><li><code>%#[1]o</code>表示以带有<code>0</code>前缀的八进制输出</li><li><code>[1]</code>是一个参数索引，表示使用第一个参数</li></ul></li></ul><hr><p>字符面值通过一对单引号直接包含对应字符。最简单的例子是ASCII中类似&#39;a&#39;写法的字符面值，</p><p>但是我们也可以通过转义的数值来表示任意的Unicode码点对应的字符，马上将会看到这样的例子。</p><p>字符使用<code>%c</code>参数打印，或者是用<code>%q</code>参数打印带单引号的字符：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>ascii <span class="token operator">:=</span> <span class="token char">&#39;a&#39;</span>
unicode <span class="token operator">:=</span> <span class="token char">&#39;国&#39;</span>
newline <span class="token operator">:=</span> <span class="token char">&#39;\\n&#39;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %[1]c %[1]q\\n&quot;</span><span class="token punctuation">,</span> ascii<span class="token punctuation">)</span>   <span class="token comment">// &quot;97 a &#39;a&#39;&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %[1]c %[1]q\\n&quot;</span><span class="token punctuation">,</span> unicode<span class="token punctuation">)</span> <span class="token comment">// &quot;22269 国 &#39;国&#39;&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %[1]q\\n&quot;</span><span class="token punctuation">,</span> newline<span class="token punctuation">)</span>       <span class="token comment">// &quot;10 &#39;\\n&#39;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="ch3-2-浮点数" tabindex="-1"><a class="header-anchor" href="#ch3-2-浮点数"><span>CH3.2. 浮点数</span></a></h2>`,31),g={href:"https://gopl-zh.github.io/ch3/ch3-02.html",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"Go语言提供了两种精度的浮点数，float32和float64。它们的算术规范由IEEE754浮点数国际标准定义，该浮点数规范被所有现代的CPU支持。",-1),f=n("hr",null,null,-1),y=n("p",null,"这些浮点数类型的取值范围可以从很微小到很巨大。",-1),x=n("p",null,"浮点数的范围极限值可以在math包找到。",-1),w=n("p",null,[s("常量 "),n("code",null,"math.MaxFloat32"),s(" 表示 float32 能表示的最大数值，大约是 3.4e38；")],-1),q=n("ul",null,[n("li",null,[n("p",null,[n("code",null,"float32"),s(" 是一种单精度浮点数类型，其存储结构由 IEEE 754 浮点数标准定义。它由 32 位（或 4 字节）组成，其中：")]),n("ul",null,[n("li",null,"1 位用于表示符号（S）"),n("li",null,"8 位用于表示指数（E）"),n("li",null,"23 位用于表示尾数（M）")]),n("p",null,[s("计算公式为："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mo",null,"−"),n("mn",null,"1"),n("msup",null,[n("mo",{stretchy:"false"},")"),n("mi",null,"S")]),n("mo",null,"∗"),n("msup",null,[n("mn",null,"2"),n("mrow",null,[n("mi",null,"E"),n("mo",null,"−"),n("mn",null,"127")])]),n("mo",null,"∗"),n("mn",null,"1."),n("mi",null,"M")]),n("annotation",{encoding:"application/x-tex"},"(-1)^S * 2^{E-127} * 1.M")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0913em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"−"),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},[n("span",{class:"mclose"},")"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"S")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8413em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8413em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05764em"}},"E"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"127")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord"},"1."),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M")])])]),s("​")]),n("p",null,[n("code",null,"float32"),s(" 的最大值是通过将指数部分设置为最大值（255，但不包括全 1，即 254），并将尾数部分设置为最大值（即所有位都是 1）来计算的。")]),n("div",{class:"language-text line-numbers-mode","data-ext":"text","data-title":"text"},[n("pre",{class:"language-text"},[n("code",null,`2^(254-127) * 1.111...111 (二进制)
≈2^127 * 2 = 2^128 ≈ 3.4 * 10^38
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])])])],-1),z=a(`<p>对应的 <code>math.MaxFloat64</code> 常量大约是1.8e308。它们分别能表示的最小值近似为1.4e-45和4.9e-324。</p><hr><p>一个float32类型的浮点数可以提供大约6个十进制数的精度(2^23 等于 8,388,608)，而float64则可以提供约15个十进制数的精度；</p><p>通常应该优先使用float64类型，因为float32类型的累计计算误差很容易扩散，并且float32能精确表示的正整数并不是很大（译注：因为float32的有效bit位只有23个，其它的bit位用于指数和符号；</p><p>当整数大于23bit能表达的范围时，float32的表示将出现误差）：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> f <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">16777216</span> <span class="token comment">// 1 &lt;&lt; 24</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f <span class="token operator">==</span> f<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">// &quot;true&quot;!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),B=n("blockquote",null,[n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"24")])]),n("annotation",{encoding:"application/x-tex"},"2^{24}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"24")])])])])])])])])])])]),s(" 是 16,777,216")]),n("p",null,[n("img",{src:"http://cdn.ayusummer233.top/DailyNotes/image-20240416112623152.png",alt:"image-20240416112623152"})])],-1),E=a(`<p>浮点数的字面值可以直接写小数部分，像这样：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> e <span class="token operator">=</span> <span class="token number">2.71828</span> <span class="token comment">// (approximately)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>小数点前面或后面的数字都可能被省略（例如.707或1.）。很小或很大的数最好用科学计数法书写，通过e或E来指定指数部分：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> Avogadro <span class="token operator">=</span> <span class="token number">6.02214129e23</span>  <span class="token comment">// 阿伏伽德罗常数</span>
<span class="token keyword">const</span> Planck   <span class="token operator">=</span> <span class="token number">6.62606957e-34</span> <span class="token comment">// 普朗克常数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用Printf函数的 <code>%g</code> 参数打印浮点数，将采用更紧凑的表示形式打印，并提供足够的精度，但是对应表格的数据，使用 <code>%e</code>（带指数）或 <code>%f</code> 的形式打印可能更合适。</p><p>所有的这三个打印形式都可以指定打印的宽度和控制打印精度。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">for</span> x <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> x<span class="token operator">++</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;x = %d e^x = %8.3f\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Exp</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>%8.3f</code> 表示打印浮点数，宽度为8，精度为3。</li></ul><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416113415561.png" alt="image-20240416113415561"></p><hr><p>math包中除了提供大量常用的数学函数外，还提供了IEEE754浮点数标准中定义的特殊值的创建和测试：正无穷大和负无穷大，分别用于表示太大溢出的数字和除零的结果；</p><p>还有NaN非数，一般用于表示无效的除法操作结果0/0或Sqrt(-1).</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> z <span class="token builtin">float64</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token operator">-</span>z<span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">/</span>z<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>z<span class="token punctuation">,</span> z<span class="token operator">/</span>z<span class="token punctuation">)</span> <span class="token comment">// &quot;0 -0 +Inf -Inf NaN&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在大多数编程语言中，包括 Go，除数为 0 是不合法的，会导致运行时错误。然而，对于浮点数的除法，规则有所不同。</p><p>在 IEEE 754 浮点数标准中，浮点数的除法定义了一些特殊情况：</p><ul><li>正浮点数除以 0 结果是正无穷（<code>+Inf</code>）。</li><li>负浮点数除以 0 结果是负无穷（<code>-Inf</code>）。</li><li>0 除以 0 的结果是 <code>NaN</code>（不是一个数字）。</li></ul><p>这些规则允许数学运算在遇到这些特殊情况时继续进行，而不是立即停止并报错</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416113934905.png" alt="image-20240416113934905"></p></blockquote><hr><p>函数 <code>math.IsNaN</code> 用于测试一个数是否是非数NaN，math.NaN则返回非数对应的值。虽然可以用math.NaN来表示一个非法的结果，但是测试一个结果是否是非数NaN则是充满风险的，因为NaN和任何数都是不相等的</p><blockquote><p>译注：在浮点数中，NaN、正无穷大和负无穷大都不是唯一的，每个都有非常多种的bit模式表示</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>nan <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">NaN</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>nan <span class="token operator">==</span> nan<span class="token punctuation">,</span> nan <span class="token operator">&lt;</span> nan<span class="token punctuation">,</span> nan <span class="token operator">&gt;</span> nan<span class="token punctuation">)</span> <span class="token comment">// &quot;false false false&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416114141463.png" alt="image-20240416114141463"></p></blockquote><hr><p>如果一个函数返回的浮点数结果可能失败，最好的做法是用单独的标志报告失败，像这样：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token builtin">float64</span><span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">if</span> failed <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>接下来的程序演示了通过浮点计算生成的图形。</p><p>它是带有两个参数的 <code>z = f(x, y)</code> 函数的三维形式，使用了可缩放矢量图形（SVG）格式输出，SVG是一个用于矢量线绘制的XML标准。</p><p>图3.1显示了 <code>sin(r)/r</code> 函数的输出图形，其中r是<code>sqrt(x*x+y*y)</code>。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/ch3-01.png" alt="img"></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Surface computes an SVG rendering of a 3-D surface function.</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;fmt&quot;</span>
    <span class="token string">&quot;math&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">320</span>            <span class="token comment">// canvas size in pixels</span>
    cells         <span class="token operator">=</span> <span class="token number">100</span>                 <span class="token comment">// number of grid cells</span>
    xyrange       <span class="token operator">=</span> <span class="token number">30.0</span>                <span class="token comment">// axis ranges (-xyrange..+xyrange)</span>
    xyscale       <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> xyrange <span class="token comment">// pixels per x or y unit</span>
    zscale        <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token comment">// pixels per z unit</span>
    angle         <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi <span class="token operator">/</span> <span class="token number">6</span>         <span class="token comment">// angle of x, y axes (=30°)</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> sin30<span class="token punctuation">,</span> cos30 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token comment">// sin(30°), cos(30°)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; &quot;</span><span class="token operator">+</span>
        <span class="token string">&quot;style=&#39;stroke: grey; fill: white; stroke-width: 0.7&#39; &quot;</span><span class="token operator">+</span>
        <span class="token string">&quot;width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
            ax<span class="token punctuation">,</span> ay <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
            bx<span class="token punctuation">,</span> by <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
            cx<span class="token punctuation">,</span> cy <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            dx<span class="token punctuation">,</span> dy <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
                ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/svg&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Find point (x,y) at corner of cell (i,j).</span>
    x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
    y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

    <span class="token comment">// Compute surface height z.</span>
    z <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

    <span class="token comment">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>
    sx <span class="token operator">:=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
    sy <span class="token operator">:=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
    <span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
    r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// distance from (0,0)</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> r
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要注意的是corner函数返回了两个结果，分别对应每个网格顶点的坐标参数。</p><p>要解释这个程序是如何工作的需要一些基本的几何学知识，但是我们可以跳过几何学原理，因为程序的重点是演示浮点数运算。</p><p>程序的本质是三个不同的坐标系中映射关系，如图3.2所示。</p><p>第一个是100x100的二维网格，对应整数坐标(i,j)，从远处的(0,0)位置开始。我们从远处向前面绘制，因此远处先绘制的多边形有可能被前面后绘制的多边形覆盖。</p><p>第二个坐标系是一个三维的网格浮点坐标(x,y,z)，其中x和y是i和j的线性函数，通过平移转换为网格单元的中心，然后用xyrange系数缩放。高度z是函数f(x,y)的值。</p><p>第三个坐标系是一个二维的画布，起点(0,0)在左上角。画布中点的坐标用(sx,sy)表示。我们使用等角投影将三维点(x,y,z)投影到二维的画布中。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/ch3-02.png" alt="img"></p><p>画布中从远处到右边的点对应较大的x值和较大的y值。并且画布中x和y值越大，则对应的z值越小。x和y的垂直和水平缩放系数来自30度角的正弦和余弦值。z的缩放系数0.4，是一个任意选择的参数。</p><p>对于二维网格中的每一个网格单元，main函数计算单元的四个顶点在画布中对应多边形ABCD的顶点，其中B对应(i,j)顶点位置，A、C和D是其它相邻的顶点，然后输出SVG的绘制指令。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416134423142.png" alt="image-20240416134423142"></p><hr><h3 id="练习3-1" tabindex="-1"><a class="header-anchor" href="#练习3-1"><span>练习3.1</span></a></h3><p><strong>练习 3.1：</strong> 如果f函数返回的是无限制的float64值，那么SVG文件可能输出无效的多边形元素（虽然许多SVG渲染器会妥善处理这类问题）。修改程序跳过无效的多边形</p><p>这题需要在调用 <code>f()</code> 后加个处理, 标记返回为 NAN 以及 +-INF</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Surface computes an SVG rendering of a 3-D surface function.</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;math&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">320</span>            <span class="token comment">// canvas size in pixels</span>
	cells         <span class="token operator">=</span> <span class="token number">100</span>                 <span class="token comment">// number of grid cells</span>
	xyrange       <span class="token operator">=</span> <span class="token number">30.0</span>                <span class="token comment">// axis ranges (-xyrange..+xyrange)</span>
	xyscale       <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> xyrange <span class="token comment">// pixels per x or y unit</span>
	zscale        <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token comment">// pixels per z unit</span>
	angle         <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi <span class="token operator">/</span> <span class="token number">6</span>         <span class="token comment">// angle of x, y axes (=30°)</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> sin30<span class="token punctuation">,</span> cos30 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token comment">// sin(30°), cos(30°)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;style=&#39;stroke: grey; fill: white; stroke-width: 0.7&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> validA <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> validB <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> validC <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> validD <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> validA <span class="token operator">&amp;&amp;</span> validB <span class="token operator">&amp;&amp;</span> validC <span class="token operator">&amp;&amp;</span> validD <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
					ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/svg&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Find point (x,y) at corner of cell (i,j).</span>
	x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
	y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

	<span class="token comment">// Compute surface height z.</span>
	z <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	<span class="token comment">// If z is infinite or NaN, return invalid.</span>
	<span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">IsInf</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>
	sx <span class="token operator">:=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
	sy <span class="token operator">:=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
	<span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// distance from (0,0)</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> r
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416140417471.png" alt="image-20240416140417471"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416140609025.png" alt="image-20240416140609025"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416140651581.png" alt="image-20240416140651581"></p></blockquote><hr><h3 id="练习3-2" tabindex="-1"><a class="header-anchor" href="#练习3-2"><span>练习3.2</span></a></h3><p><strong>练习 3.2：</strong> 试验math包中其他函数的渲染图形。你是否能输出一个egg box、moguls或a saddle图案?</p><p>绘图本身不是我们学习这章的目的, 这题的目的主要在于让我们多认识几个 <code>math</code> 包的函数, 例如</p><ul><li><p><code>math.Sin(r)</code>: 正弦函数</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416142357271.png" alt="image-20240416142357271"></p></li><li><p><code>math.Hypot(x, y)</code>: 求两个数的平方和的平方根</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416142438474.png" alt="image-20240416142438474"></p></li><li><p><code>math.IsInf(z, 0)</code>: 判断一个数是否是正无穷大或负无穷大</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416142507139.png" alt="image-20240416142507139"></p></li><li><p><code>math.IsNaN(z)</code>: 判断一个数是否是非数</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416142524844.png" alt="image-20240416142524844"></p></li><li><p><code>math.Pow(x, y)</code>: 求 x 的 y 次方</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416142725663.png" alt="image-20240416142725663"></p></li></ul><blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Surface computes an SVG rendering of a 3-D surface function.</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;math&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">320</span>            <span class="token comment">// canvas size in pixels</span>
	cells         <span class="token operator">=</span> <span class="token number">100</span>                 <span class="token comment">// number of grid cells</span>
	xyrange       <span class="token operator">=</span> <span class="token number">30.0</span>                <span class="token comment">// axis ranges (-xyrange..+xyrange)</span>
	xyscale       <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> xyrange <span class="token comment">// pixels per x or y unit</span>
	zscale        <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token comment">// pixels per z unit</span>
	angle         <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi <span class="token operator">/</span> <span class="token number">6</span>         <span class="token comment">// angle of x, y axes (=30°)</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> sin30<span class="token punctuation">,</span> cos30 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token comment">// sin(30°), cos(30°)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">draw</span><span class="token punctuation">(</span><span class="token string">&quot;eggbox.svg&quot;</span><span class="token punctuation">,</span> corner<span class="token punctuation">)</span>
	<span class="token function">draw</span><span class="token punctuation">(</span><span class="token string">&quot;moguls.svg&quot;</span><span class="token punctuation">,</span> corner_moguls<span class="token punctuation">)</span>
	<span class="token function">draw</span><span class="token punctuation">(</span><span class="token string">&quot;saddle.svg&quot;</span><span class="token punctuation">,</span> corner_saddle<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">draw</span><span class="token punctuation">(</span>out_path <span class="token builtin">string</span><span class="token punctuation">,</span> function <span class="token keyword">func</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 输出文件</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>out_path<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;create file: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;style=&#39;stroke: grey; fill: white; stroke-width: 0.7&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;style=&#39;stroke: grey; fill: white; stroke-width: 0.7&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> validA <span class="token operator">:=</span> <span class="token function">function</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> validB <span class="token operator">:=</span> <span class="token function">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> validC <span class="token operator">:=</span> <span class="token function">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> validD <span class="token operator">:=</span> <span class="token function">function</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> validA <span class="token operator">&amp;&amp;</span> validB <span class="token operator">&amp;&amp;</span> validC <span class="token operator">&amp;&amp;</span> validD <span class="token punctuation">{</span>
				fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
					ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>
				fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
					ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/svg&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Find point (x,y) at corner of cell (i,j).</span>
	x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
	y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

	<span class="token comment">// Compute surface height z.</span>
	<span class="token comment">// z := f(x, y)</span>
	z <span class="token operator">:=</span> <span class="token function">eggBox</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	<span class="token comment">// If z is infinite or NaN, return invalid.</span>
	<span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">IsInf</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>
	sx <span class="token operator">:=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
	sy <span class="token operator">:=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
	<span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner_moguls</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Find point (x,y) at corner of cell (i,j).</span>
	x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
	y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

	<span class="token comment">// Compute surface height z.</span>
	z <span class="token operator">:=</span> <span class="token function">moguls</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	<span class="token comment">// If z is infinite or NaN, return invalid.</span>
	<span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">IsInf</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>
	sx <span class="token operator">:=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
	sy <span class="token operator">:=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
	<span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// distance from (0,0)</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> r
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">eggBox</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10.0</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">moguls</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10.0</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner_saddle</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Find point (x,y) at corner of cell (i,j).</span>
	x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
	y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

	<span class="token comment">// Compute surface height z.</span>
	z <span class="token operator">:=</span> <span class="token function">saddle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	<span class="token comment">// If z is infinite or NaN, return invalid.</span>
	<span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">IsInf</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>
	sx <span class="token operator">:=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
	sy <span class="token operator">:=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
	<span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">saddle</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> math<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">25.0</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416145408266.png" alt="image-20240416145408266"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416145419222.png" alt="image-20240416145419222"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416145426987.png" alt="image-20240416145426987"></p></blockquote><hr><h3 id="练习3-3" tabindex="-1"><a class="header-anchor" href="#练习3-3"><span>练习3.3</span></a></h3><p><strong>练习 3.3：</strong> 根据高度给每个多边形上色，那样峰值部将是红色（#ff0000），谷部将是蓝色（#0000ff）。</p><p>这题需要在 main 函数中加一次遍历找到 z 的最大值和最小值,然后根据偏差上色</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Surface computes an SVG rendering of a 3-D surface function.</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;math&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">320</span>            <span class="token comment">// canvas size in pixels</span>
	cells         <span class="token operator">=</span> <span class="token number">100</span>                 <span class="token comment">// number of grid cells</span>
	xyrange       <span class="token operator">=</span> <span class="token number">30.0</span>                <span class="token comment">// axis ranges (-xyrange..+xyrange)</span>
	xyscale       <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> xyrange <span class="token comment">// pixels per x or y unit</span>
	zscale        <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token comment">// pixels per z unit</span>
	angle         <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi <span class="token operator">/</span> <span class="token number">6</span>         <span class="token comment">// angle of x, y axes (=30°)</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> sin30<span class="token punctuation">,</span> cos30 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token comment">// sin(30°), cos(30°)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 输出文件</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;output.svg&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;create file: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;style=&#39;stroke: grey; fill: white; stroke-width: 0.7&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;style=&#39;stroke: grey; fill: white; stroke-width: 0.7&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>

	minZ<span class="token punctuation">,</span> maxZ <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Inf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Inf</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> z1<span class="token punctuation">,</span> valid1 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> z2<span class="token punctuation">,</span> valid2 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> z3<span class="token punctuation">,</span> valid3 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> z4<span class="token punctuation">,</span> valid4 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> valid1 <span class="token operator">&amp;&amp;</span> valid2 <span class="token operator">&amp;&amp;</span> valid3 <span class="token operator">&amp;&amp;</span> valid4 <span class="token punctuation">{</span>
				z <span class="token operator">:=</span> <span class="token punctuation">(</span>z1 <span class="token operator">+</span> z2 <span class="token operator">+</span> z3 <span class="token operator">+</span> z4<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
				<span class="token keyword">if</span> z <span class="token operator">&lt;</span> minZ <span class="token punctuation">{</span>
					minZ <span class="token operator">=</span> z
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> z <span class="token operator">&gt;</span> maxZ <span class="token punctuation">{</span>
					maxZ <span class="token operator">=</span> z
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> z1<span class="token punctuation">,</span> valid1 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> z2<span class="token punctuation">,</span> valid2 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> z3<span class="token punctuation">,</span> valid3 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> z4<span class="token punctuation">,</span> valid4 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> valid1 <span class="token operator">&amp;&amp;</span> valid2 <span class="token operator">&amp;&amp;</span> valid3 <span class="token operator">&amp;&amp;</span> valid4 <span class="token punctuation">{</span>
				z <span class="token operator">:=</span> <span class="token punctuation">(</span>z1 <span class="token operator">+</span> z2 <span class="token operator">+</span> z3 <span class="token operator">+</span> z4<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
				color <span class="token operator">:=</span> <span class="token function">getColor</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> minZ<span class="token punctuation">,</span> maxZ<span class="token punctuation">)</span>
				fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39; style=&#39;fill: #%06x&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
					ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> color<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;/svg&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Find point (x,y) at corner of cell (i,j).</span>
	x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
	y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

	<span class="token comment">// Compute surface height z.</span>
	z <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	<span class="token comment">// If z is infinite or NaN, return invalid.</span>
	<span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">IsInf</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>
	sx <span class="token operator">:=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
	sy <span class="token operator">:=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
	<span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getColor</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	ratio <span class="token operator">:=</span> <span class="token punctuation">(</span>z <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span>
	r <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> ratio<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> ratio<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> r<span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> b
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// distance from (0,0)</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> r
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416145455279.png" alt="image-20240416145455279"></p><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416145524363.png" alt="image-20240416145524363"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416145539183.png" alt="image-20240416145539183"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416145552706.png" alt="image-20240416145552706"></p></blockquote><hr><h3 id="练习3-4" tabindex="-1"><a class="header-anchor" href="#练习3-4"><span>练习3.4</span></a></h3><p><strong>练习 3.4：</strong> 参考1.7节Lissajous例子的函数，构造一个web服务器，用于计算函数曲面然后返回SVG数据给客户端。服务器必须设置Content-Type头部：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;image/svg+xml&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>（这一步在Lissajous例子中不是必须的，因为服务器使用标准的PNG图像格式，可以根据前面的512个字节自动输出对应的头部。）允许客户端通过HTTP请求参数设置高度、宽度和颜色等参数。</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;log&quot;</span>
	<span class="token string">&quot;math&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">320</span>            <span class="token comment">// canvas size in pixels</span>
	cells         <span class="token operator">=</span> <span class="token number">100</span>                 <span class="token comment">// number of grid cells</span>
	xyrange       <span class="token operator">=</span> <span class="token number">30.0</span>                <span class="token comment">// axis ranges (-xyrange..+xyrange)</span>
	xyscale       <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> xyrange <span class="token comment">// pixels per x or y unit</span>
	zscale        <span class="token operator">=</span> height <span class="token operator">*</span> <span class="token number">0.4</span>        <span class="token comment">// pixels per z unit</span>
	angle         <span class="token operator">=</span> math<span class="token punctuation">.</span>Pi <span class="token operator">/</span> <span class="token number">6</span>         <span class="token comment">// angle of x, y axes (=30°)</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> sin30<span class="token punctuation">,</span> cos30 <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Cos</span><span class="token punctuation">(</span>angle<span class="token punctuation">)</span> <span class="token comment">// sin(30°), cos(30°)</span>

<span class="token keyword">func</span> <span class="token function">generateSurface</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;style=&#39;stroke: grey; fill: white; stroke-width: 0.7&#39; &quot;</span><span class="token operator">+</span>
		<span class="token string">&quot;width=&#39;%d&#39; height=&#39;%d&#39;&gt;&quot;</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>

	minZ<span class="token punctuation">,</span> maxZ <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Inf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span><span class="token function">Inf</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> z1<span class="token punctuation">,</span> valid1 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> z2<span class="token punctuation">,</span> valid2 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> z3<span class="token punctuation">,</span> valid3 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> z4<span class="token punctuation">,</span> valid4 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> valid1 <span class="token operator">&amp;&amp;</span> valid2 <span class="token operator">&amp;&amp;</span> valid3 <span class="token operator">&amp;&amp;</span> valid4 <span class="token punctuation">{</span>
				z <span class="token operator">:=</span> <span class="token punctuation">(</span>z1 <span class="token operator">+</span> z2 <span class="token operator">+</span> z3 <span class="token operator">+</span> z4<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
				<span class="token keyword">if</span> z <span class="token operator">&lt;</span> minZ <span class="token punctuation">{</span>
					minZ <span class="token operator">=</span> z
				<span class="token punctuation">}</span>
				<span class="token keyword">if</span> z <span class="token operator">&gt;</span> maxZ <span class="token punctuation">{</span>
					maxZ <span class="token operator">=</span> z
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span>
			ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> z1<span class="token punctuation">,</span> valid1 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> z2<span class="token punctuation">,</span> valid2 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
			cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> z3<span class="token punctuation">,</span> valid3 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> z4<span class="token punctuation">,</span> valid4 <span class="token operator">:=</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> valid1 <span class="token operator">&amp;&amp;</span> valid2 <span class="token operator">&amp;&amp;</span> valid3 <span class="token operator">&amp;&amp;</span> valid4 <span class="token punctuation">{</span>
				z <span class="token operator">:=</span> <span class="token punctuation">(</span>z1 <span class="token operator">+</span> z2 <span class="token operator">+</span> z3 <span class="token operator">+</span> z4<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span>
				color <span class="token operator">:=</span> <span class="token function">getColor</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> minZ<span class="token punctuation">,</span> maxZ<span class="token punctuation">)</span>
				fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;&lt;polygon points=&#39;%g,%g %g,%g %g,%g %g,%g&#39; style=&#39;fill: #%06x&#39;/&gt;\\n&quot;</span><span class="token punctuation">,</span>
					ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> cx<span class="token punctuation">,</span> cy<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> color<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;&lt;/svg&gt;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Find point (x,y) at corner of cell (i,j).</span>
	x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
	y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

	<span class="token comment">// Compute surface height z.</span>
	z <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	<span class="token comment">// If z is infinite or NaN, return invalid.</span>
	<span class="token keyword">if</span> math<span class="token punctuation">.</span><span class="token function">IsInf</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> math<span class="token punctuation">.</span><span class="token function">IsNaN</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// Project (x,y,z) isometrically onto 2-D SVG canvas (sx,sy).</span>
	sx <span class="token operator">:=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
	sy <span class="token operator">:=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
	<span class="token keyword">return</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">getColor</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
	ratio <span class="token operator">:=</span> <span class="token punctuation">(</span>z <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span>
	r <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> ratio<span class="token punctuation">)</span>
	b <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> ratio<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> r<span class="token operator">&lt;&lt;</span><span class="token number">16</span> <span class="token operator">|</span> b
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span>
	r <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Hypot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// distance from (0,0)</span>
	<span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> r
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;image/svg+xml&quot;</span><span class="token punctuation">)</span>
	<span class="token function">generateSurface</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;localhost:8000&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416151121425.png" alt="image-20240416151121425"></p><hr><h2 id="ch3-3-复数" tabindex="-1"><a class="header-anchor" href="#ch3-3-复数"><span>CH3.3.复数</span></a></h2>`,64),N={href:"https://gopl-zh.github.io/ch3/ch3-03.html",target:"_blank",rel:"noopener noreferrer"},C=a(`<p>Go语言提供了两种精度的复数类型：<code>complex64</code> 和 <code>complex128</code>，分别对应float32和float64两种浮点数精度。</p><p>内置的complex函数用于构建复数，内建的real和imag函数分别返回复数的实部和虚部：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token builtin">complex128</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 1+2i</span>
<span class="token keyword">var</span> y <span class="token builtin">complex128</span> <span class="token operator">=</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// 3+4i</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>                 <span class="token comment">// &quot;(-5+10i)&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment">// &quot;-5&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment">// &quot;10&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个浮点数面值或一个十进制整数面值后面跟着一个i，例如3.141592i或2i，它将构成一个复数的虚部，复数的实部是0：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1i</span> <span class="token operator">*</span> <span class="token number">1i</span><span class="token punctuation">)</span> <span class="token comment">// &quot;(-1+0i)&quot;, i^2 = -1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在常量算术规则下，一个复数常量可以加到另一个普通数值常量（整数或浮点数、实部或虚部），我们可以用自然的方式书写复数，就像1+2i或与之等价的写法2i+1。上面x和y的声明语句还可以简化：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2i</span>
y <span class="token operator">:=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复数也可以用==和!=进行相等比较。只有两个复数的实部和虚部都相等的时候它们才是相等的</p><blockquote><p>译注：浮点数的相等比较是危险的，需要特别小心处理精度问题</p></blockquote><hr><p><code>math/cmplx</code> 包提供了复数处理的许多函数，例如求复数的平方根函数和求幂函数。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cmplx<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;(0+1i)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>下面的程序使用 <code>complex128</code> 复数算法来生成一个 Mandelbrot 图像。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Mandelbrot emits a PNG image of the Mandelbrot fractal.</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;image&quot;</span>
	<span class="token string">&quot;image/color&quot;</span>
	<span class="token string">&quot;image/png&quot;</span>
	<span class="token string">&quot;math/cmplx&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 定义图片输出路径</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;mandelbrot.png&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> <span class="token punctuation">(</span>
		xmin<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span>
		width<span class="token punctuation">,</span> height          <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1024</span>
	<span class="token punctuation">)</span>

	img <span class="token operator">:=</span> image<span class="token punctuation">.</span><span class="token function">NewRGBA</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> py <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> py <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> py<span class="token operator">++</span> <span class="token punctuation">{</span>
		y <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>py<span class="token punctuation">)</span><span class="token operator">/</span>height<span class="token operator">*</span><span class="token punctuation">(</span>ymax<span class="token operator">-</span>ymin<span class="token punctuation">)</span> <span class="token operator">+</span> ymin
		<span class="token keyword">for</span> px <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> px <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> px<span class="token operator">++</span> <span class="token punctuation">{</span>
			x <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span><span class="token operator">/</span>width<span class="token operator">*</span><span class="token punctuation">(</span>xmax<span class="token operator">-</span>xmin<span class="token punctuation">)</span> <span class="token operator">+</span> xmin
			z <span class="token operator">:=</span> <span class="token function">complex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
			<span class="token comment">// Image point (px, py) represents complex value z.</span>
			img<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">,</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	png<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> img<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span>z <span class="token builtin">complex128</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color <span class="token punctuation">{</span>
	<span class="token keyword">const</span> iterations <span class="token operator">=</span> <span class="token number">200</span>
	<span class="token keyword">const</span> contrast <span class="token operator">=</span> <span class="token number">15</span>

	<span class="token keyword">var</span> v <span class="token builtin">complex128</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		v <span class="token operator">=</span> v<span class="token operator">*</span>v <span class="token operator">+</span> z
		<span class="token keyword">if</span> cmplx<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> color<span class="token punctuation">.</span>Gray<span class="token punctuation">{</span><span class="token number">255</span> <span class="token operator">-</span> contrast<span class="token operator">*</span>n<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> color<span class="token punctuation">.</span>Black
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416153659556.png" alt="image-20240416153659556"></p></blockquote><p>用于遍历 <code>1024x1024</code> 图像每个点的两个嵌套的循环对应 -2 到 +2 区间的复数平面。</p><p>程序反复测试每个点对应复数值平方值加一个增量值对应的点是否超出半径为2的圆。</p><ul><li>如果超过了，通过根据预设置的逃逸迭代次数对应的灰度颜色来代替。</li><li>如果不是，那么该点属于Mandelbrot集合，使用黑色颜色标记。</li></ul><p>最终程序将生成的PNG格式分形图像输出到标准输出，如图3.3所示。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/ch3-03.png" alt="img"></p><hr><h3 id="练习3-5" tabindex="-1"><a class="header-anchor" href="#练习3-5"><span>练习3.5</span></a></h3><p><strong>练习 3.5：</strong> 实现一个彩色的Mandelbrot图像，使用image.NewRGBA创建图像，使用color.RGBA或color.YCbCr生成颜色。</p><p>这一题偏离了本章主题, 实际上只需要修改 <code>mandelbrot</code>函数 return 的颜色值</p><p>可以是</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Mandelbrot emits a PNG image of the Mandelbrot fractal.</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;image&quot;</span>
	<span class="token string">&quot;image/color&quot;</span>
	<span class="token string">&quot;image/png&quot;</span>
	<span class="token string">&quot;math/cmplx&quot;</span>
	<span class="token string">&quot;os&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;mandelbrot.png&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">const</span> <span class="token punctuation">(</span>
		xmin<span class="token punctuation">,</span> ymin<span class="token punctuation">,</span> xmax<span class="token punctuation">,</span> ymax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">2</span>
		width<span class="token punctuation">,</span> height          <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1024</span>
	<span class="token punctuation">)</span>

	img <span class="token operator">:=</span> image<span class="token punctuation">.</span><span class="token function">NewRGBA</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> py <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> py <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> py<span class="token operator">++</span> <span class="token punctuation">{</span>
		y <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>py<span class="token punctuation">)</span><span class="token operator">/</span>height<span class="token operator">*</span><span class="token punctuation">(</span>ymax<span class="token operator">-</span>ymin<span class="token punctuation">)</span> <span class="token operator">+</span> ymin
		<span class="token keyword">for</span> px <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> px <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> px<span class="token operator">++</span> <span class="token punctuation">{</span>
			x <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>px<span class="token punctuation">)</span><span class="token operator">/</span>width<span class="token operator">*</span><span class="token punctuation">(</span>xmax<span class="token operator">-</span>xmin<span class="token punctuation">)</span> <span class="token operator">+</span> xmin
			z <span class="token operator">:=</span> <span class="token function">complex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
			img<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">,</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	png<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> img<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">mandelbrot</span><span class="token punctuation">(</span>z <span class="token builtin">complex128</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color <span class="token punctuation">{</span>
	<span class="token keyword">const</span> iterations <span class="token operator">=</span> <span class="token number">200</span>
	<span class="token keyword">const</span> contrast <span class="token operator">=</span> <span class="token number">15</span>

	<span class="token keyword">var</span> v <span class="token builtin">complex128</span>
	<span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span> n<span class="token operator">++</span> <span class="token punctuation">{</span>
		v <span class="token operator">=</span> v<span class="token operator">*</span>v <span class="token operator">+</span> z
		<span class="token keyword">if</span> cmplx<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span>
				R<span class="token punctuation">:</span> <span class="token function">uint8</span><span class="token punctuation">(</span>contrast <span class="token operator">*</span> n <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				G<span class="token punctuation">:</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> contrast<span class="token operator">*</span>n<span class="token operator">%</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				B<span class="token punctuation">:</span> <span class="token function">uint8</span><span class="token punctuation">(</span><span class="token punctuation">(</span>contrast <span class="token operator">*</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				A<span class="token punctuation">:</span> <span class="token number">255</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240416155151443.png" alt="image-20240416155151443"></p></blockquote><hr><h3 id="练习3-6" tabindex="-1"><a class="header-anchor" href="#练习3-6"><span>练习3.6</span></a></h3><p><strong>练习 3.6：</strong> 升采样技术可以降低每个像素对计算颜色值和平均值的影响。简单的方法是将每个像素分成四个子像素，实现它。</p><p>偏离本章主题, 不写了(</p><hr><h3 id="练习3-7" tabindex="-1"><a class="header-anchor" href="#练习3-7"><span>练习3.7</span></a></h3>`,34),_=n("p",null,[n("strong",null,"练习 3.7："),s(" 另一个生成分形图像的方式是使用牛顿法来求解一个复数方程，例如"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"z"),n("mn",null,"4")]),n("mo",null,"−"),n("mn",null,"1"),n("mo",null,"="),n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"z^4-1=0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.04398em"}},"z"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"4")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s("。每个起点到四个根的迭代次数对应阴影的灰度。方程根对应的点用颜色表示")],-1),j=a(`<p>偏离主题, 不写了(</p><hr><h3 id="练习3-8" tabindex="-1"><a class="header-anchor" href="#练习3-8"><span>练习3.8</span></a></h3><p><strong>练习 3.8：</strong> 通过提高精度来生成更多级别的分形。使用四种不同精度类型的数字实现相同的分形：complex64、complex128、big.Float和big.Rat。后面两种类型在math/big包声明。Float是有指定限精度的浮点数；Rat是无限精度的有理数。）</p><p>它们间的性能和内存使用对比如何？当渲染图可见时缩放的级别是多少？</p><p>不想画图了(</p><hr><h3 id="练习3-9" tabindex="-1"><a class="header-anchor" href="#练习3-9"><span>练习3.9</span></a></h3><p><strong>练习 3.9：</strong> 编写一个web服务器，用于给客户端生成分形的图像。运行客户端通过HTTP参数指定x、y和zoom参数。</p><p>和 1.7 没有本质区别, 不写了(</p><hr><h2 id="ch3-4-布尔型" tabindex="-1"><a class="header-anchor" href="#ch3-4-布尔型"><span>CH3.4.布尔型</span></a></h2><p>一个布尔类型的值只有两种：true和false。</p><p>if和for语句的条件部分都是布尔类型的值，并且==和&lt;等比较操作也会产生布尔型的值。</p><p>一元操作符<code>!</code>对应逻辑非操作，因此<code>!true</code>的值为<code>false</code>，更罗嗦的说法是<code>( !true==false)==true</code>，虽然表达方式不一样，不过我们一般会采用简洁的布尔表达式，就像用x来表示<code>x==true</code>。</p><p>布尔值可以和&amp;&amp;（AND）和||（OR）操作符结合，并且有短路行为：如果运算符左边值已经可以确定整个布尔表达式的值，那么运算符右边的值将不再被求值，因此下面的表达式总是安全的：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;x&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中s[0]操作如果应用于空字符串将会导致panic异常, 但如果是空字符串的话就会在 <code>s!=&quot;&quot;</code> 短路掉, 因此不会运算 s[0] 也就不会异常</p><hr><p>因为<code>&amp;&amp;</code>的优先级比<code>||</code>高（助记：<code>&amp;&amp;</code>对应逻辑乘法，<code>||</code>对应逻辑加法，乘法比加法优先级要高），下面形式的布尔表达式是不需要加小括弧的：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">if</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span> <span class="token operator">||</span>
    <span class="token char">&#39;A&#39;</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span> <span class="token operator">||</span>
    <span class="token char">&#39;0&#39;</span> <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...ASCII letter or digit...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>布尔值并不会隐式转换为数字值0或1，反之亦然。必须使用一个显式的if语句辅助转换：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>i <span class="token operator">:=</span> <span class="token number">0</span>
<span class="token keyword">if</span> b <span class="token punctuation">{</span>
    i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要经常做类似的转换，包装成一个函数会更方便：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// btoi returns 1 if b is true and 0 if false.</span>
<span class="token keyword">func</span> <span class="token function">btoi</span><span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> b <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数字到布尔型的逆转换则非常简单，不过为了保持对称，我们也可以包装一个函数：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// itob reports whether i is non-zero.</span>
<span class="token keyword">func</span> <span class="token function">itob</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="ch3-5-字符串" tabindex="-1"><a class="header-anchor" href="#ch3-5-字符串"><span>CH3.5.字符串</span></a></h2>`,30),A={href:"https://gopl-zh.github.io/ch3/ch3-05.html",target:"_blank",rel:"noopener noreferrer"},P=a(`<p>一个字符串是一个不可改变的字节序列。</p><p>字符串可以包含任意的数据，包括byte值0，但是通常是用来包含人类可读的文本。</p><p>文本字符串通常被解释为采用UTF8编码的Unicode码点（rune）序列，我们稍后会详细讨论这个问题。</p><p>内置的len函数可以返回一个字符串中的字节数目（不是rune字符数目），索引操作s[i]返回第i个字节的字节值，i必须满足0 ≤ i&lt; len(s)条件约束。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token string">&quot;hello, world&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment">// &quot;12&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;104 119&quot; (&#39;h&#39; and &#39;w&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果试图访问超出字符串索引范围的字节将会导致panic异常：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>c <span class="token operator">:=</span> s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// panic: index out of range</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第i个字节并不一定是字符串的第i个字符，因为对于非ASCII字符的UTF8编码会要两个或多个字节。我们先简单说下字符的工作方式。</p><p>子字符串操作 <code>s[i:j]</code> 基于原始的s字符串的第i个字节开始到第j个字节（并不包含j本身）生成一个新字符串。生成的新字符串将包含j-i个字节。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，如果索引超出字符串范围或者j小于i的话将导致panic异常。</p><p>不管i还是j都可能被忽略，当它们被忽略时将采用0作为开始位置，采用 <code>len(s)</code> 作为结束的位置</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;hello&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &quot;world&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// &quot;hello, world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>字符串可以用 <code>==</code> 和 <code>&lt;</code> 进行比较；</p><p>比较通过逐个字节比较完成的，因此<strong>比较的结果是字符串自然编码的顺序</strong>。</p><hr><p>字符串的值是不可变的：一个字符串包含的字节序列永远不会被改变，当然我们也可以给一个字符串变量分配一个新字符串值。可以像下面这样将一个字符串追加到另一个字符串：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s <span class="token operator">:=</span> <span class="token string">&quot;left foot&quot;</span>
t <span class="token operator">:=</span> s
s <span class="token operator">+=</span> <span class="token string">&quot;, right foot&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这并不会导致原始的字符串值被改变，但是变量s将因为+=语句持有一个新的字符串值，但是t依然是包含原先的字符串值。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// &quot;left foot, right foot&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token comment">// &quot;left foot&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因为字符串是不可修改的，因此尝试修改字符串内部数据的操作也是被禁止的：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;L&#39;</span> <span class="token comment">// compile error: cannot assign to s[0]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。</p><p>同样，一个字符串 s 和对应的子字符串切片 <code>s[7:]</code> 的操作也可以安全地共享相同的内存，因此字符串切片操作代价也是低廉的。</p><p>在这两种情况下都没有必要分配新的内存。</p><p>图3.4演示了一个字符串和两个子串共享相同的底层数据。</p><p><img src="https://golang-china.github.io/gopl-zh/images/ch3-04.png" alt="img"></p><blockquote><p>这节内容和 python 中的字符串基本一致</p></blockquote><hr><h3 id="ch3-5-1-字符串面值" tabindex="-1"><a class="header-anchor" href="#ch3-5-1-字符串面值"><span>CH3.5.1.字符串面值</span></a></h3><p>字符串值也可以用字符串面值方式编写，只要将一系列字节序列包含在双引号内即可：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token string">&quot;Hello, world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202404182148335.png" alt="img"></p><p>因为Go语言源文件总是用UTF8编码，并且Go语言的文本字符串也以UTF8编码的方式处理，因此我们可以将Unicode码点也写到字符串面值中。</p><p>在一个双引号包含的字符串面值中，可以用以反斜杠<code>\\</code>开头的转义序列插入任意的数据。下面的换行、回车和制表符等是常见的ASCII控制代码的转义方式：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>\\a      响铃
\\b      退格
\\f      换页
\\n      换行
\\r      回车
\\t      制表符
\\v      垂直制表符
\\&#39;      单引号（只用在 <span class="token char">&#39;\\&#39;&#39;</span> 形式的<span class="token builtin">rune</span>符号面值中）
\\&quot;      双引号（只用在 <span class="token string">&quot;...&quot;</span> 形式的字符串面值中）
\\\\      反斜杠
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过十六进制或八进制转义在字符串面值中包含任意的字节。一个十六进制的转义形式是<code>\\xhh</code>，其中两个h表示十六进制数字（大写或小写都可以）。</p><p>一个八进制转义形式是<code>\\ooo</code>，包含三个八进制的o数字（0到7），但是不能超过<code>\\377</code>（译注：对应一个字节的范围，十进制为255）。</p><p>每一个单一的字节表达一个特定的值。</p><p>稍后我们将看到如何将一个Unicode码点写到字符串面值中。</p><hr><p>一个原生的字符串面值形式是<code>...</code>，使用反引号代替双引号。</p><p>在原生的字符串面值中，没有转义操作；全部的内容都是字面的意思，包含退格和换行</p><p>因此一个程序中的原生字符串面值可能跨越多行（译注：在原生字符串面值内部是无法直接写反引号字符的，可以用八进制或十六进制转义或+&quot;\`&quot;连接字符串常量完成）。</p><p>唯一的特殊处理是会删除回车以保证在所有平台上的值都是一样的，包括那些把回车也放入文本文件的系统（译注：Windows系统会把回车和换行一起放入文本文件中）。</p><p>原生字符串面值用于编写正则表达式会很方便，因为正则表达式往往会包含很多反斜杠。原生字符串面值同时被广泛应用于HTML模板、JSON面值、命令行提示信息以及那些需要扩展到多行的场景。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">const</span> GoUsage <span class="token operator">=</span> <span class="token string">\`Go is a tool for managing Go source code.

Usage:
    go command [arguments]
...\`</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="ch3-5-2-unicode" tabindex="-1"><a class="header-anchor" href="#ch3-5-2-unicode"><span>CH3.5.2.Unicode</span></a></h3><blockquote><p>通识</p></blockquote><p>在很久以前，世界还是比较简单的，起码计算机世界就只有一个ASCII字符集：美国信息交换标准代码。ASCII，更准确地说是美国的ASCII，使用7bit来表示128个字符：包含英文字母的大小写、数字、各种标点符号和设备控制符。</p><p>对于早期的计算机程序来说，这些就足够了，但是这也导致了世界上很多其他地区的用户无法直接使用自己的符号系统。随着互联网的发展，混合多种语言的数据变得很常见（译注：比如本身的英文原文或中文翻译都包含了ASCII、中文、日文等多种语言字符）。如何有效处理这些包含了各种语言的丰富多样的文本数据呢？</p><p>答案就是使用Unicode（ http://unicode.org ），它收集了这个世界上所有的符号系统，包括重音符号和其它变音符号，制表符和回车符，还有很多神秘的符号，每个符号都分配一个唯一的Unicode码点，Unicode码点对应Go语言中的 <code>rune</code> 整数类型（译注：<code>rune</code> 是 <code>int32</code> 等价类型）。</p><p>在第八版本的Unicode标准里收集了超过120,000个字符，涵盖超过100多种语言。这些在计算机程序和数据中是如何体现的呢？通用的表示一个Unicode码点的数据类型是 <code>int32</code>，也就是Go语言中rune对应的类型；它的同义词rune 符文正是这个意思。</p><p>我们可以将一个符文序列表示为一个int32序列。这种编码方式叫 <code>UTF-32</code> 或 <code>UCS-4</code>，每个Unicode码点都使用同样大小的 32bit 来表示。这种方式比较简单统一，但是它会浪费很多存储空间，因为大多数计算机可读的文本是ASCII字符，本来每个ASCII字符只需要8bit或1字节就能表示。</p><p>而且即使是常用的字符也远少于65,536个，也就是说用 16bit 编码方式就能表达常用字符。但是，还有其它更好的编码方法吗？</p><hr><h3 id="ch3-5-3-utf-8" tabindex="-1"><a class="header-anchor" href="#ch3-5-3-utf-8"><span>CH3.5.3.UTF-8</span></a></h3><blockquote><p>通识</p></blockquote><p>UTF8是一个将Unicode码点编码为字节序列的变长编码。UTF8编码是由Go语言之父Ken Thompson和Rob Pike共同发明的，现在已经是Unicode的标准。</p><p>UTF8编码使用1到4个字节来表示每个Unicode码点，ASCII部分字符只使用1个字节，常用字符部分使用2或3个字节表示。</p><p>每个符号编码后第一个字节的高端bit位用于表示编码总共有多少个字节。如果第一个字节的高端bit为0，则表示对应7bit的ASCII字符，ASCII字符每个字符依然是一个字节，和传统的ASCII编码兼容。如果第一个字节的高端bit是110，则说明需要2个字节；后续的每个高端bit都以10开头。更大的Unicode码点也是采用类似的策略处理。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>0xxxxxxx                             runes <span class="token number">0</span><span class="token operator">-</span><span class="token number">127</span>    <span class="token punctuation">(</span>ASCII<span class="token punctuation">)</span>
110xxxxx 10xxxxxx                    <span class="token number">128</span><span class="token operator">-</span><span class="token number">2047</span>       <span class="token punctuation">(</span>values <span class="token operator">&lt;</span><span class="token number">128</span> unused<span class="token punctuation">)</span>
1110xxxx 10xxxxxx 10xxxxxx           <span class="token number">2048</span><span class="token operator">-</span><span class="token number">65535</span>     <span class="token punctuation">(</span>values <span class="token operator">&lt;</span><span class="token number">2048</span> unused<span class="token punctuation">)</span>
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  <span class="token number">65536</span><span class="token operator">-</span><span class="token number">0x10ffff</span> <span class="token punctuation">(</span>other values unused<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变长的编码无法直接通过索引来访问第n个字符，但是UTF8编码获得了很多额外的优点。首先UTF8编码比较紧凑，完全兼容ASCII码，并且可以自动同步：它可以通过向前回朔最多3个字节就能确定当前字符编码的开始字节的位置。它也是一个前缀编码，所以当从左向右解码时不会有任何歧义也并不需要向前查看（译注：像GBK之类的编码，如果不知道起点位置则可能会出现歧义）。</p><p>没有任何字符的编码是其它字符编码的子串，或是其它编码序列的字串，因此搜索一个字符时只要搜索它的字节编码序列即可，不用担心前后的上下文会对搜索结果产生干扰。</p><p>同时UTF8编码的顺序和Unicode码点的顺序一致，因此可以直接排序UTF8编码序列。同时因为没有嵌入的 <code>NUL(0)</code> 字节，可以很好地兼容那些使用 NUL 作为字符串结尾的编程语言。</p><hr><p>Go语言的源文件采用UTF8编码，并且Go语言处理UTF8编码的文本也很出色。</p><p>unicode包提供了诸多处理rune字符相关功能的函数（比如区分字母和数字，或者是字母的大写和小写转换等），<code>unicode/utf8</code> 包则提供了用于rune字符序列的UTF8编码和解码的功能。</p><hr><h3 id="练习3-10" tabindex="-1"><a class="header-anchor" href="#练习3-10"><span>练习3.10</span></a></h3><p><strong>练习 3.10：</strong> 编写一个非递归版本的comma函数，使用bytes.Buffer代替字符串链接操作。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr><h3 id="练习-3-11" tabindex="-1"><a class="header-anchor" href="#练习-3-11"><span>练习 3.11</span></a></h3><p><strong>练习 3.11</strong>: 完善comma函数，以支持浮点数处理和一个可选的正负号的处理。</p>`,77);function I(S,G){const t=e("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[s("整型 - Go语言圣经 (golang-china.github.io)"),p(t)])])]),k,d,m,v,b,n("blockquote",null,[n("p",null,[n("a",g,[s("浮点数 - Go语言圣经 (gopl-zh.github.io)"),p(t)])])]),h,f,y,x,w,q,z,B,E,n("blockquote",null,[n("p",null,[n("a",N,[s("复数 - Go语言圣经 (gopl-zh.github.io)"),p(t)])])]),C,_,j,n("blockquote",null,[n("p",null,[n("a",A,[s("字符串 - Go语言圣经 (gopl-zh.github.io)"),p(t)])])]),P])}const F=o(i,[["render",I],["__file","CH3-基础数据类型.html.vue"]]),U=JSON.parse('{"path":"/Language/Go/Go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F/CH3-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","title":"CH3.基础数据类型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"CH3.1.整型","slug":"ch3-1-整型","link":"#ch3-1-整型","children":[]},{"level":2,"title":"CH3.2. 浮点数","slug":"ch3-2-浮点数","link":"#ch3-2-浮点数","children":[{"level":3,"title":"练习3.1","slug":"练习3-1","link":"#练习3-1","children":[]},{"level":3,"title":"练习3.2","slug":"练习3-2","link":"#练习3-2","children":[]},{"level":3,"title":"练习3.3","slug":"练习3-3","link":"#练习3-3","children":[]},{"level":3,"title":"练习3.4","slug":"练习3-4","link":"#练习3-4","children":[]}]},{"level":2,"title":"CH3.3.复数","slug":"ch3-3-复数","link":"#ch3-3-复数","children":[{"level":3,"title":"练习3.5","slug":"练习3-5","link":"#练习3-5","children":[]},{"level":3,"title":"练习3.6","slug":"练习3-6","link":"#练习3-6","children":[]},{"level":3,"title":"练习3.7","slug":"练习3-7","link":"#练习3-7","children":[]},{"level":3,"title":"练习3.8","slug":"练习3-8","link":"#练习3-8","children":[]},{"level":3,"title":"练习3.9","slug":"练习3-9","link":"#练习3-9","children":[]}]},{"level":2,"title":"CH3.4.布尔型","slug":"ch3-4-布尔型","link":"#ch3-4-布尔型","children":[]},{"level":2,"title":"CH3.5.字符串","slug":"ch3-5-字符串","link":"#ch3-5-字符串","children":[{"level":3,"title":"CH3.5.1.字符串面值","slug":"ch3-5-1-字符串面值","link":"#ch3-5-1-字符串面值","children":[]},{"level":3,"title":"CH3.5.2.Unicode","slug":"ch3-5-2-unicode","link":"#ch3-5-2-unicode","children":[]},{"level":3,"title":"CH3.5.3.UTF-8","slug":"ch3-5-3-utf-8","link":"#ch3-5-3-utf-8","children":[]},{"level":3,"title":"练习3.10","slug":"练习3-10","link":"#练习3-10","children":[]},{"level":3,"title":"练习 3.11","slug":"练习-3-11","link":"#练习-3-11","children":[]}]}],"git":{"createdTime":1713263056000,"updatedTime":1713680972000,"contributors":[{"name":"233PC","email":"ayusummer233@gmail.com","commits":3},{"name":"233JG","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":40.56,"words":12168},"filePathRelative":"Language/Go/Go语言圣经/CH3-基础数据类型.md","localizedDate":"2024年4月16日","excerpt":"\\n<p>Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型</p>\\n<p>本章介绍基础类型，包括：数字、字符串和布尔型。</p>\\n<p>复合数据类型——数组（§4.1）和结构体（§4.2）——是通过组合简单类型，来表达更加复杂的数据结构。</p>\\n<p>引用类型包括指针（§2.3.2）、切片（§4.2)）、字典（§4.3）、函数（§5）、通道（§8），虽然数据种类很多，但它们都是对程序中一个变量或状态的间接引用。</p>\\n<p>这意味着对任一引用类型数据的修改都会影响所有该引用的拷贝。</p>\\n<p>我们将在第7章介绍接口类型。</p>\\n<hr>\\n<ul>\\n<li><a href=\\"#ch3%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\\">CH3.基础数据类型</a>\\n<ul>\\n<li><a href=\\"#ch31%E6%95%B4%E5%9E%8B\\">CH3.1.整型</a></li>\\n<li><a href=\\"#ch32-%E6%B5%AE%E7%82%B9%E6%95%B0\\">CH3.2. 浮点数</a>\\n<ul>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A031\\">练习3.1</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A032\\">练习3.2</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A033\\">练习3.3</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A034\\">练习3.4</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch33%E5%A4%8D%E6%95%B0\\">CH3.3.复数</a>\\n<ul>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A035\\">练习3.5</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A036\\">练习3.6</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A037\\">练习3.7</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A038\\">练习3.8</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A039\\">练习3.9</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch34%E5%B8%83%E5%B0%94%E5%9E%8B\\">CH3.4.布尔型</a></li>\\n<li><a href=\\"#ch35%E5%AD%97%E7%AC%A6%E4%B8%B2\\">CH3.5.字符串</a>\\n<ul>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A0310\\">练习3.10</a></li>\\n<li><a href=\\"#%E7%BB%83%E4%B9%A0-311\\">练习 3.11</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{F as comp,U as data};
