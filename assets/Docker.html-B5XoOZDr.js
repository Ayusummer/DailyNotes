import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as p,c as u,b as a,w as l,a as e,d as n,e as t}from"./app-DxMJFouC.js";const h={},m=t('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><ul><li><a href="#docker">Docker</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E6%8D%A2%E6%BA%90">换源</a><ul><li><a href="#docker-hub-%E6%8D%A2%E6%BA%90">Docker-hub 换源</a></li></ul></li><li><a href="#%E9%95%9C%E5%83%8F">镜像</a><ul><li><a href="#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4">常用指令</a></li><li><a href="#%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F">删除镜像</a><ul><li><a href="#%E5%88%A0%E9%99%A4%E4%B8%A4%E4%B8%AA-id-%E7%9B%B8%E5%90%8C%E7%9A%84%E9%95%9C%E5%83%8F">删除两个 id 相同的镜像</a></li></ul></li><li><a href="#%E9%95%9C%E5%83%8F%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AF%BC%E5%85%A5">镜像导出与导入</a></li><li><a href="#%E5%B0%86%E9%95%9C%E5%83%8F%E8%B7%91%E4%B8%BA%E5%AE%B9%E5%99%A8">将镜像跑为容器</a></li><li><a href="#%E6%8E%A8%E9%80%81%E5%88%B0-habor">推送到 Habor</a></li></ul></li><li><a href="#%E5%AE%B9%E5%99%A8">容器</a><ul><li><a href="#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-1">常用指令</a></li><li><a href="#%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0docker-cp">从容器中复制文件到本地(docker cp)</a></li><li><a href="#%E5%B0%86%E5%AE%B9%E5%99%A8%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%E6%88%90%E9%95%9C%E5%83%8F">将容器重新打包成镜像</a></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a><ul><li><a href="#error-could-not-find-an-available-non-overlapping-ipv4-address-pool-among-the-defaults-to-assign-to-the-network">ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</a></li><li><a href="#unable-to-connect-to-debdebianorghttp">unable to connect to deb.debian.org:http</a></li><li><a href="#there-is-no-public-key">There is no public key</a></li><li><a href="#debconf-delaying-package-configuration-since-apt-utils-is-not-installed">debconf: delaying package configuration, since apt-utils is not installed</a></li><li><a href="#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E5%A4%B1%E8%B4%A5---failed-to-extract-plugin-usrshareelasticsearchpluginsheadzip-zipexceptionzip-file-is-empty">安装插件失败 - failed to extract plugin [/usr/share/elasticsearch/plugins/head.zip]: ZipException[zip file is empty]</a></li></ul></li></ul></li></ul><hr><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2>',4),k={href:"https://cloud.tencent.com/developer/article/1854430",target:"_blank",rel:"noopener noreferrer"},b={href:"https://kalacloud.com/blog/how-to-install-and-use-docker-on-ubuntu/",target:"_blank",rel:"noopener noreferrer"},v=e("hr",null,null,-1),g=e("p",null,"使用如下脚本来安装 docker 即可:",-1),f=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# Install the latest version docker"),n(`
`),e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-s"),n(" https://get.docker.com/ "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"sh"),n(`

`),e("span",{class:"token comment"},"# Run docker service"),n(`
systemctl start `),e("span",{class:"token function"},"docker"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),E=e("hr",null,null,-1),_=e("p",null,"旧版安装指令:",-1),x=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 更新现有的软件包列表"),n(`
`),e("span",{class:"token function"},"apt"),n(` update
`),e("span",{class:"token comment"},"# 安装所需工具包"),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt"),n(),e("span",{class:"token function"},"install"),n(" apt-transport-https ca-certificates "),e("span",{class:"token function"},"curl"),n(` gnupg-agent  software-properties-common
`),e("span",{class:"token comment"},"# 然后将官方 Docker 版本库的 GPG 密钥添加到系统中："),n(`
`),e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-fsSL"),n(" https://download.docker.com/linux/ubuntu/gpg "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"sudo"),n(" apt-key "),e("span",{class:"token function"},"add"),n(` -
`),e("span",{class:"token comment"},"# 将 Docker 版本库添加到APT源："),n(`
`),e("span",{class:"token function"},"sudo"),n(" add-apt-repository "),e("span",{class:"token string"},'"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"'),n(`
`),e("span",{class:"token comment"},"# 用新添加的 Docker 软件包来进行升级更新。"),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt"),n(` update
`),e("span",{class:"token comment"},"# 确保要从 Docker 版本库，而不是默认的 Ubuntu 版本库进行安装："),n(`
`),e("span",{class:"token function"},"apt-cache"),n(` policy docker-ce
`),e("span",{class:"token comment"},"# 安装 Docker ："),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt"),n(),e("span",{class:"token function"},"install"),n(` docker-ce
`),e("span",{class:"token comment"},"# 现在 Docker 已经安装完毕。我们启动守护程序。检查 Docker 是否正在运行："),n(`
`),e("span",{class:"token function"},"sudo"),n(" systemctl status "),e("span",{class:"token function"},"docker"),n(`
`),e("span",{class:"token comment"},"# 设置 docker 开机自动启动"),n(`
`),e("span",{class:"token function"},"sudo"),n(" systemctl "),e("span",{class:"token builtin class-name"},"enable"),n(` docker.service
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),y={href:"https://ywnz.com/linuxjc/6543.html",target:"_blank",rel:"noopener noreferrer"},A=e("hr",null,null,-1),B=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 更新现有的软件包列表"),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt"),n(` update
`),e("span",{class:"token comment"},"# 安装所需工具包"),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt"),n(),e("span",{class:"token parameter variable"},"-y"),n(),e("span",{class:"token function"},"install"),n(),e("span",{class:"token function"},"curl"),n(` gnupg2 apt-transport-https software-properties-common ca-certificates
`),e("span",{class:"token comment"},"# 导入用于签署Docker软件包的Docker GPG密钥："),n(`
`),e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-fsSL"),n(" https://download.docker.com/linux/debian/gpg "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"sudo"),n(" apt-key "),e("span",{class:"token function"},"add"),n(` -
`),e("span",{class:"token comment"},"# 添加包含Docker CE最新稳定版本的Docker存储库："),n(`
`),e("span",{class:"token builtin class-name"},"echo"),n(),e("span",{class:"token string"},'"deb [arch=amd64] https://download.docker.com/linux/debian buster stable"'),n(),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"tee"),n(`  /etc/apt/sources.list.d/docker.list
`),e("span",{class:"token comment"},"# 更新apt包索引"),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt"),n(` update
`),e("span",{class:"token comment"},"# 在Kali Linux上安装Docker CE"),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt"),n(),e("span",{class:"token function"},"install"),n(` docker-ce docker-ce-cli containerd.io
`),e("span",{class:"token comment"},"# 检查安装的Docker版本"),n(`
`),e("span",{class:"token function"},"docker"),n(` version
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),D={href:"https://docs.docker.com/engine/install/debian/#install-using-the-repository",target:"_blank",rel:"noopener noreferrer"},w={href:"https://download.docker.com/linux/debian/dists/",target:"_blank",rel:"noopener noreferrer"},q=e("p",null,[n("设置 Docker 的 "),e("code",null,"apt"),n(" 存储库")],-1),C=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# Add Docker's official GPG key:"),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt-get"),n(` update
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt-get"),n(),e("span",{class:"token function"},"install"),n(" ca-certificates "),e("span",{class:"token function"},"curl"),n(`
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"install"),n(),e("span",{class:"token parameter variable"},"-m"),n(" 0755 "),e("span",{class:"token parameter variable"},"-d"),n(` /etc/apt/keyrings
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-fsSL"),n(" https://download.docker.com/linux/debian/gpg "),e("span",{class:"token parameter variable"},"-o"),n(` /etc/apt/keyrings/docker.asc
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"chmod"),n(` a+r /etc/apt/keyrings/docker.asc

`),e("span",{class:"token comment"},"# Add the repository to Apt sources:"),n(`
`),e("span",{class:"token builtin class-name"},"echo"),n(),e("span",{class:"token punctuation"},"\\"),n(`
  `),e("span",{class:"token string"},[n('"deb [arch='),e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),n("dpkg --print-architecture"),e("span",{class:"token variable"},")")]),n(` signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\
  `),e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),e("span",{class:"token builtin class-name"},"."),n(" /etc/os-release "),e("span",{class:"token operator"},"&&"),n(),e("span",{class:"token builtin class-name"},"echo"),n(),e("span",{class:"token string"},[n('"'),e("span",{class:"token variable"},"$VERSION_CODENAME"),n('"')]),e("span",{class:"token variable"},")")]),n(' stable"')]),n(),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token punctuation"},"\\"),n(`
  `),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"tee"),n(" /etc/apt/sources.list.d/docker.list "),e("span",{class:"token operator"},">"),n(` /dev/null
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt-get"),n(` update
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),z=e("p",null,"如果用的是 kali 的话",-1),S=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/image-20240418141046018.png",alt:"image-20240418141046018"})],-1),T=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/image-20240418141104580.png",alt:"image-20240418141104580"})],-1),N=e("p",null,"需要把 kali-rolling 换成其他版本",-1),R=e("p",null,"Kali Rolling 是基于 Debian 的 Testing 分支，而不是 Debian 的稳定版。Debian 的 Testing 分支是用于开发和测试即将发布为稳定版的新功能和软件包的地方。因此，虽然 Kali Rolling 会包含许多最新的软件包，但这些软件包可能还在测试中，可能不如 Debian 稳定版稳定。",-1),I=e("p",null,"一般可以认为 kali rolling 基于 Debian 的最新版本, 比如当前的 Debian12 bookworm",-1),H=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/image-20240418143331741.png",alt:"image-20240418143331741"})],-1),P={href:"https://download.docker.com/linux/debian/dists/",target:"_blank",rel:"noopener noreferrer"},O=e("p",null,"可以手动改下文件",-1),F=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/image-20240418143351329.png",alt:"image-20240418143351329"})],-1),L=e("li",null,[e("p",null,"安装 Docker packages"),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"apt-get"),n(),e("span",{class:"token function"},"install"),n(` docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])])],-1),G=e("li",null,[e("p",null,[n("通过运行 "),e("code",null,"hello-world"),n(" image 验证安装是否成功")]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"docker"),n(` run hello-world
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/image-20240418143748673.png",alt:"image-20240418143748673"})]),e("p",null,"如图所示, 可以看到已经安装成功了")],-1),M={href:"https://blog.csdn.net/weixin_39786155/article/details/110363154",target:"_blank",rel:"noopener noreferrer"},j=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-fsSL"),n(" https://get.docker.com "),e("span",{class:"token parameter variable"},"-o"),n(` get-docker.sh
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"sh"),n(` get-docker.sh
`),e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"service"),n(),e("span",{class:"token function"},"docker"),n(` start
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),U=e("blockquote",null,[e("p",null,"wsl2-kali 是不支持以此种方式安装的, 可以在 Windows 上装 Docker Desktop 并启用 WSL2 访问"),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202211202356631.png",alt:"image-20221120235620604"})]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202211210007112.png",alt:"image-20221121000717073"})])],-1),V=t(`<hr><h2 id="换源" tabindex="-1"><a class="header-anchor" href="#换源"><span>换源</span></a></h2><h3 id="docker-hub-换源" tabindex="-1"><a class="header-anchor" href="#docker-hub-换源"><span>Docker-hub 换源</span></a></h3><p>打开 <code>/etc/docker/daemon.json</code> 并输入</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>
      <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启 docker</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">service</span> <span class="token function">docker</span> restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="镜像" tabindex="-1"><a class="header-anchor" href="#镜像"><span>镜像</span></a></h2>`,8),Q={href:"https://www.cnblogs.com/baizhanshi/p/9655102.html",target:"_blank",rel:"noopener noreferrer"},W=t(`<p><img src="http://cdn.ayusummer233.top/img/202209231758602.png" alt="image-20220923175753464"></p><hr><h3 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h3><ul><li><p>拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># docker pull [镜像名]</span>
<span class="token comment"># vuldocker/lamp映像包括(php＋apache+MySQL) ，只需要下载dvwa源码即可</span>
<span class="token function">docker</span> pull vuldocker/lamp   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>docker pull</code> 下来的镜像默认存在 <code>/var/lib/docker/</code> 目录下</p><p><img src="http://cdn.ayusummer233.top/img/202211091029761.png" alt="image-20221109102750973"></p><hr></blockquote></li><li><p>查看当前镜像列表</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改镜像 Tag</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># docker tag [镜像ID] [镜像名称]:[tag版本信息]</span>
<span class="token function">docker</span> tag 8ef375298394 MySQL:v5.7

<span class="token comment"># docker tag [原tag][新tag]</span>
<span class="token function">docker</span> tag MySQL:v5.7 http://100.1.1.111:8080/MySQL:v5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="删除镜像" tabindex="-1"><a class="header-anchor" href="#删除镜像"><span>删除镜像</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 根据 镜像名称 来删除镜像</span>
<span class="token function">docker</span> rmi centos 
<span class="token comment"># 根据 镜像:标签名称 来删除镜像</span>
<span class="token function">docker</span> rmi centos:v2
<span class="token comment"># 根据 镜像ID 来删除镜像，</span>
<span class="token function">docker</span> rmi 7e6257c9f8d8 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除两个-id-相同的镜像" tabindex="-1"><a class="header-anchor" href="#删除两个-id-相同的镜像"><span>删除两个 id 相同的镜像</span></a></h4>`,8),K={href:"https://blog.csdn.net/wx940627/article/details/106821002",target:"_blank",rel:"noopener noreferrer"},Z=e("p",null,[n("通过 "),e("code",null,"docker rmi [镜像:tag]"),n(" 来删除对应标签的镜像, 实际上")],-1),$=e("hr",null,null,-1),J=e("h3",{id:"镜像导出与导入",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#镜像导出与导入"},[e("span",null,"镜像导出与导入")])],-1),Y={href:"https://blog.csdn.net/hx_long/article/details/122705151",target:"_blank",rel:"noopener noreferrer"},X=e("hr",null,null,-1),ee=e("h3",{id:"将镜像跑为容器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#将镜像跑为容器"},[e("span",null,"将镜像跑为容器")])],-1),ne={href:"https://www.runoob.com/docker/docker-run-command.html",target:"_blank",rel:"noopener noreferrer"},ae=e("hr",null,null,-1),se=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>-a stdin</code>: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</p></li><li><p><code>-d</code>: 后台运行容器，并返回容器ID；</p></li><li><p><code>-i</code>: 以交互模式运行容器，通常与 -t 同时使用；</p></li><li><p><code>-P</code>: 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</p></li><li><p><code>-p</code>: 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></p></li><li><p><code>-t</code>: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p></li><li><p><code>--name=&quot;nginx-lb&quot;</code>: 为容器指定一个名称；</p></li><li><p><code>--dns 8.8.8.8</code>: 指定容器使用的DNS服务器，默认和宿主一致；</p></li><li><p><code>--dns-search example.com</code>: 指定容器DNS搜索域名，默认和宿主一致；</p></li><li><p><code>-h &quot;mars&quot;</code>: 指定容器的hostname；</p></li><li><p><code>-e username=&quot;ritchie&quot;</code>: 设置环境变量；</p></li><li><p><code>--env-file=[]</code>: 从指定文件读入环境变量；</p></li><li><p><code>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;</code>: 绑定容器到指定CPU运行；</p></li><li><p><code>-m</code>: 设置容器使用内存最大值；</p></li><li><p><code>--net=&quot;bridge&quot;</code>: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</p></li><li><p><code>--link=[]</code>: 添加链接到另一个容器；</p></li><li><p><code>--expose=[]</code>: 开放一个端口或一组端口；</p></li><li><p><code>--volume , -v</code>: 绑定一个卷</p></li><li><p><code>--restart=always</code>: 容器设置自动启动</p><ul><li><code>no</code>: 不自动重启容器. (默认value)</li><li><code>on-failure</code>: 容器发生 error</li><li>而退出(容器退出状态不为0)重启容器</li><li><code>unless-stopped</code>: 在容器已经 stop 掉或 <code>Docker stoped/restarted</code> 的时候才重启容器</li><li><code>always</code>: 在容器已经 stop 掉或 <code>Docker stoped/restarted</code> 的时候才重启容器</li></ul><p>如果创建时未指定 <code>--restart=always</code> ,可通过update 命令</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker update --restart=always [container-id]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><hr><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -it -d --name dvwa -p 8008:80 vuldocker/lamp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>设置名字为dvwa，映射端口为8008</p><p>-i: 交互式操作。</p><p>-t: 终端(一般与i一起)</p><p>-d：后台运行。</p></blockquote><p>从图中可以看到在执行</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>docker run -it -d --name dvwa -p 8008:80 vuldocker/lamp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指令时出现了问题，说已经有container使用了dvwa这个名字( <code>The container name &quot;/dvwa&quot; is already in use by container &quot;6e3fc590b41c9c6cf6c0d81de14730c127240edecb6a2a5e3debf1565eb3fe6b&quot;</code>) ，但是从图中也可以看到docker ps指令执行后没有正在运行的container,可以执行</p><hr><h3 id="推送到-habor" tabindex="-1"><a class="header-anchor" href="#推送到-habor"><span>推送到 Habor</span></a></h3><p>**因为是在只有http sql apach服务的镜像上跑的容器，在容器里配置了dvwa(并没有改变镜像) **</p><p><strong>此时将原来的镜像推送还是只有http sql apach服务的镜像，没有自己在容器里的所有配置 需要将容器保存为镜像再去推送才行</strong></p><p>在本地docker客户端--靶机进行如下配置：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">touch</span> /etc/docker/daemon.json
<span class="token function">vim</span> /etc/docker/daemon.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>文件中如下配置</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code>{
<span class="token key attr-name">	&quot;insecure-registries&quot;</span><span class="token punctuation">:</span> <span class="token value attr-value">[&quot;habor-hostip:端口&quot;]</span>
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
<span class="token comment"># 登录 Habor (登录成功会提示 Login Succeeded)</span>
<span class="token function">docker</span> login <span class="token punctuation">[</span>HaborHostip:端口<span class="token punctuation">]</span>
<span class="token comment"># 将本地的image新建1个新的tag</span>
<span class="token function">docker</span> tag SOURCE_IMAGE<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span> <span class="token punctuation">[</span>HaborHostip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>端口<span class="token punctuation">]</span>/<span class="token punctuation">[</span>目标路径<span class="token punctuation">]</span><span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>
<span class="token comment"># 推送镜像</span>
<span class="token function">docker</span> push <span class="token punctuation">[</span>HaborHostip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>端口<span class="token punctuation">]</span>/<span class="token punctuation">[</span>目标路径<span class="token punctuation">]</span><span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后续可以通过 <code>docker pull</code> 命令拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token punctuation">[</span>HaborHostip<span class="token punctuation">]</span>:<span class="token punctuation">[</span>端口<span class="token punctuation">]</span>/<span class="token punctuation">[</span>目标路径<span class="token punctuation">]</span><span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="容器" tabindex="-1"><a class="header-anchor" href="#容器"><span>容器</span></a></h2>`,21),te={href:"https://www.cnblogs.com/cqqfboy/p/15209635.html",target:"_blank",rel:"noopener noreferrer"},le=t(`<hr><h3 id="常用指令-1" tabindex="-1"><a class="header-anchor" href="#常用指令-1"><span>常用指令</span></a></h3><p><a href="#%E5%B0%86%E9%95%9C%E5%83%8F%E8%B7%91%E4%B8%BA%E5%AE%B9%E5%99%A8">将镜像跑为容器</a></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器(使用 bash 或者 sh 均可)</span>
<span class="token function">docker</span> container <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span> /bin/bash
<span class="token function">docker</span> container <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>容器id<span class="token punctuation">]</span> /bin/sh

<span class="token comment"># 强制删除容器 docker rm -f [容器 id]</span>
<span class="token comment"># 删除所有容器</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span>   

<span class="token comment"># 显示当前正在运行的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span>  

<span class="token comment"># 查看容器日志</span>
<span class="token function">docker</span> logs <span class="token punctuation">[</span>容器ID<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="从容器中复制文件到本地-docker-cp" tabindex="-1"><a class="header-anchor" href="#从容器中复制文件到本地-docker-cp"><span>从容器中复制文件到本地(docker cp)</span></a></h3><p>例：从容器中复制一个<code>test.db</code>文件到本地<code>data</code>目录。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 假设存在一个镜像名为 kitty，标签为0.1，创建一个名为 koko的容器</span>

<span class="token comment"># 1. create a container first</span>
docker run <span class="token operator">-</span>itd <span class="token operator">-</span><span class="token operator">-</span>name koko kitty<span class="token punctuation">:</span><span class="token number">0.1</span> <span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>bash
<span class="token comment"># 2. copy test.db from koko tmp directory to local data directory.</span>
docker cp koko<span class="token punctuation">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token punctuation">.</span>db <span class="token punctuation">.</span><span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>db
<span class="token comment"># 3. rm container koko</span>
docker rm <span class="token operator">-</span>f koko
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><code>docker cp</code>也可以从本地copy文件到容器中：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 以上面的代码为例，把容器路径和本地路径颠倒即可.</span>
docker cp <span class="token punctuation">.</span><span class="token operator">/</span>data<span class="token operator">/</span>test<span class="token punctuation">.</span>db koko<span class="token punctuation">:</span><span class="token operator">/</span>tmp<span class="token operator">/</span>test<span class="token punctuation">.</span>db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在docker中，LAMP是指Linux(操作系统) 、Apache HTTP服务器、MySQL(MariaDB等数据库软件) 和PHP(Perl或Python) 的组合方案，一般用来建立Web服务器环境。</p>`,12),oe={href:"https://www.php.cn/docker/488591.html",target:"_blank",rel:"noopener noreferrer"},ie=e("hr",null,null,-1),ce=e("h3",{id:"将容器重新打包成镜像",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#将容器重新打包成镜像"},[e("span",null,"将容器重新打包成镜像")])],-1),re={href:"https://blog.csdn.net/weixin_45505313/article/details/125020076",target:"_blank",rel:"noopener noreferrer"},de=e("hr",null,null,-1),pe=t(`<p>在使用 <code>docker-compose build</code> 命令时, 在有些镜像 build 完启动后发现其环境是并不完整的, 缺少了一些东西</p><blockquote><p>比如在复现 CVE-2015-3337 时需要安装一个 <code>elasticsearch-head</code> 的插件, 发现用 vulhub 仓库里的 dockerfile</p><p><code>docker-compose build</code> 构建进行时插件实际上并没有安装成功, 但是镜像成功 build 了</p></blockquote><p>进入启动的容器进行排错, 最终修复了问题后可以将目前用拥有完整环境的容器重新打包成镜像</p><p>Docker 提供了 <code>commit</code> 命令支持将容器重新打成镜像文件，其命令格式如下所示</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code> <span class="token function">docker</span> commit <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;">Option</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">-a</td><td style="text-align:center;">指定新镜像作者</td></tr><tr><td style="text-align:center;">-c</td><td style="text-align:center;">使用 Dockerfile 指令来创建镜像</td></tr><tr><td style="text-align:center;">-m</td><td style="text-align:center;">提交生成镜像的说明信息</td></tr><tr><td style="text-align:center;">-p</td><td style="text-align:center;">在 commit 时，将容器暂停</td></tr></tbody></table><p>可以先查看下当前运行容器的 id</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token punctuation">[</span>容器相关标识, 比如 cve-2015-3337 之类<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 添加描述信息并将容器打包成新的镜像(给个新tag)</span>
<span class="token function">docker</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;add elasticsearch-head&quot;</span> 10f2daf4ead5 cve-2015-3337_es:v0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h2><h3 id="error-could-not-find-an-available-non-overlapping-ipv4-address-pool-among-the-defaults-to-assign-to-the-network" tabindex="-1"><a class="header-anchor" href="#error-could-not-find-an-available-non-overlapping-ipv4-address-pool-among-the-defaults-to-assign-to-the-network"><span>ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</span></a></h3>`,12),ue={href:"https://github.com/docker/for-linux/issues/418",target:"_blank",rel:"noopener noreferrer"},he=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> network prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="unable-to-connect-to-deb-debian-org-http" tabindex="-1"><a class="header-anchor" href="#unable-to-connect-to-deb-debian-org-http"><span>unable to connect to deb.debian.org:http</span></a></h3><p><img src="http://cdn.ayusummer233.top/img/202209192027036.png" alt="image-20220919202703896"></p>`,4),me={href:"https://stackoverflow.com/questions/44080220/docker-failed-to-fetch-http-deb-debian-org-debian-dists-jessie-inrelease",target:"_blank",rel:"noopener noreferrer"},ke=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202209192029288.png",alt:"image-20220919202953164"})],-1),be=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202209192030522.png",alt:"image-20220919203028392"})],-1),ve=e("hr",null,null,-1),ge=e("h3",{id:"there-is-no-public-key",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#there-is-no-public-key"},[e("span",null,"There is no public key")])],-1),fe={href:"https://developer.aliyun.com/article/533899",target:"_blank",rel:"noopener noreferrer"},Ee=t(`<div class="language-BASH line-numbers-mode" data-ext="BASH" data-title="BASH"><pre class="language-BASH"><code>sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com [报错缺失的public key]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="debconf-delaying-package-configuration-since-apt-utils-is-not-installed" tabindex="-1"><a class="header-anchor" href="#debconf-delaying-package-configuration-since-apt-utils-is-not-installed"><span>debconf: delaying package configuration, since apt-utils is not installed</span></a></h3>`,3),_e={href:"https://github.com/phusion/baseimage-docker/issues/319",target:"_blank",rel:"noopener noreferrer"},xe=t(`<div class="language-BASH line-numbers-mode" data-ext="BASH" data-title="BASH"><pre class="language-BASH"><code>apt-get update &amp;&amp; apt-get install -y --no-install-recommends apt-utils
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="安装插件失败-failed-to-extract-plugin-usr-share-elasticsearch-plugins-head-zip-zipexception-zip-file-is-empty" tabindex="-1"><a class="header-anchor" href="#安装插件失败-failed-to-extract-plugin-usr-share-elasticsearch-plugins-head-zip-zipexception-zip-file-is-empty"><span>安装插件失败 - failed to extract plugin [/usr/share/elasticsearch/plugins/head.zip]: ZipException[zip file is empty]</span></a></h3><p>在使用 <code>docker-compose build</code> 时发现有些时候虽然 build 成功了但是实际上环境是不完整的, 比如在复现 <code>CVE-2015-3337</code> 时需要安装一个插件</p><p>发现 vulhub 该 cve 目录下 <code>docker-compose build</code> 拉取了一个空的插件安装包并且解压<mark>失败了</mark>, 但是却成功 <code>build</code> 了</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202212081036240.png" alt="image-20221208103255765"></p><p>观察上图中的输出信息可以看到在安装插件时向 <code> http://download.elasticsearch.org/mobz/elasticsearch-head/elasticsearch-head-1.x.zip.</code> 请求了 zip 资源, 尝试在本地电脑上访问此链接发现下载不下来, 那么可以假定是指向链接出了问题, 那么现在就需要找到一个可用的插件安装链接</p><p>在使用 <code>docker-compose up -d</code> 后进入该容器然后尝试为拉取插件配置一个不可用的代理</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>plugin <span class="token parameter variable">-DproxyHost</span><span class="token operator">=</span><span class="token number">192.168</span>.1.33 <span class="token parameter variable">-DproxyPort</span><span class="token operator">=</span><span class="token number">7890</span> <span class="token parameter variable">--install</span> mobz/elasticsearch-head/1.x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时会尝试从各个可能的地址拉取插件</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202212081041520.png" alt="image-20221208104125668"></p><p>在本地机器上尝试这些链接, 最终找到可用链接 <code>https://codeload.github.com/mobz/elasticsearch-head/zip/refs/heads/1.x</code></p><p>于是可以使用该链接安装插件</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>bin/plugin <span class="token parameter variable">--install</span> mobz/elasticsearch-head/1.x <span class="token parameter variable">-u</span> https://codeload.github.com/mobz/elasticsearch-head/zip/refs/heads/1.x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202212081038831.png" alt="image-20221208095040475"></p><p>验证插件是否安装成功:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202212081046976.png" alt="image-20221208104020031"></p><p>可以看到已经成功安装上了</p><p>然后 <a href="#%E5%B0%86%E5%AE%B9%E5%99%A8%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%E6%88%90%E9%95%9C%E5%83%8F">将容器重新打包成镜像</a> 以便后续使用</p>`,19);function ye(Ae,Be){const s=c("ExternalLinkIcon"),r=c("Tabs");return p(),u("div",null,[m,a(r,{id:"126",data:[{id:"Ubuntu"},{id:"Debian(Deprecated)"},{id:"Debian"},{id:"wsl2"}],active:0},{title0:l(({value:o,isActive:i})=>[n("Ubuntu")]),title1:l(({value:o,isActive:i})=>[n("Debian(Deprecated)")]),title2:l(({value:o,isActive:i})=>[n("Debian")]),title3:l(({value:o,isActive:i})=>[n("wsl2")]),tab0:l(({value:o,isActive:i})=>[e("blockquote",null,[e("p",null,[e("a",k,[n("ubuntu安装docker详细步骤 - 腾讯云开发者社区-腾讯云 (tencent.com)"),a(s)])]),e("p",null,[e("a",b,[n("Docker 入门指南：如何在 Ubuntu 上安装和使用 Docker - 卡拉云 (kalacloud.com)"),a(s)])]),v]),g,f,E,_,x]),tab1:l(({value:o,isActive:i})=>[e("blockquote",null,[e("p",null,[e("a",y,[n("在Kali Linux版本中安装Docker(Docker CE社区版) 和Docker Compose_Linux教程_云网牛站 (ywnz.com)"),a(s)])]),A]),B]),tab2:l(({value:o,isActive:i})=>[e("blockquote",null,[e("p",null,[e("a",D,[n("在 Debian 上安装 Docker 引擎 | Docker 文档 --- Install Docker Engine on Debian | Docker Docs"),a(s)])]),e("p",null,[e("a",w,[n("Index of linux/debian/dists/ (docker.com)"),a(s)])])]),e("ol",null,[e("li",null,[q,C,e("blockquote",null,[z,S,T,N,R,I,H,e("blockquote",null,[e("p",null,[e("a",P,[n("Index of linux/debian/dists/ (docker.com)"),a(s)])])]),O,F])]),L,G])]),tab3:l(({value:o,isActive:i})=>[e("blockquote",null,[e("p",null,[e("a",M,[n("docker wsl2启动不了_win10利用WSL2安装docker的2种方式_weixin_39786155的博客-CSDN博客"),a(s)])])]),j,U]),_:1}),V,e("blockquote",null,[e("p",null,[e("a",Q,[n("关于docker容器和镜像的区别 - jason.bai - 博客园 (cnblogs.com)"),a(s)])])]),W,e("blockquote",null,[e("p",null,[e("a",K,[n("Docker - 两个id相同的镜像怎么删除_Joker_Wangx的博客-CSDN博客_docker 镜像重复"),a(s)])])]),Z,$,J,e("blockquote",null,[e("p",null,[e("a",Y,[n("docker容器导出，并将导出镜像在另外一台设备上运行起来_hx_long的博客-CSDN博客_docker 容器导出"),a(s)])])]),X,ee,e("blockquote",null,[e("p",null,[e("a",ne,[n("Docker run 命令 | 菜鸟教程 (runoob.com)"),a(s)])]),ae]),se,e("blockquote",null,[e("p",null,[e("a",te,[n("容器Docker进入的四种方法 - 指尖上的代码go - 博客园 (cnblogs.com)"),a(s)])])]),le,e("blockquote",null,[e("p",null,[e("a",oe,[n("docker中的lamp是什么-Docker-PHP中文网"),a(s)])])]),ie,ce,e("blockquote",null,[e("p",null,[e("a",re,[n("Docker 使用-将容器打成镜像_谈谈1974的博客-CSDN博客_容器打包成镜像"),a(s)])]),de]),pe,e("blockquote",null,[e("p",null,[n("["),e("a",ue,[n("openvpn] ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network · Issue #418 · docker/for-linux (github.com)"),a(s)])])]),he,e("blockquote",null,[e("p",null,[e("a",me,[n("Docker failed to fetch http://deb.debian.org/debian/dists/jessie/InRelease - Stack Overflow"),a(s)])])]),ke,be,ve,ge,e("blockquote",null,[e("p",null,[e("a",fe,[n("使用apt-get时出现 “no public key available” 的解决方法-阿里云开发者社区 (aliyun.com)"),a(s)])])]),Ee,e("blockquote",null,[e("p",null,[n("["),e("a",_e,[n("16.04] debconf: delaying package configuration, since apt-utils is not installed · Issue #319 · phusion/baseimage-docker (github.com)"),a(s)])])]),xe])}const qe=d(h,[["render",ye],["__file","Docker.html.vue"]]),Ce=JSON.parse('{"path":"/%E9%80%9A%E8%AF%86/Docker/Docker.html","title":"Docker","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"换源","slug":"换源","link":"#换源","children":[{"level":3,"title":"Docker-hub 换源","slug":"docker-hub-换源","link":"#docker-hub-换源","children":[]}]},{"level":2,"title":"镜像","slug":"镜像","link":"#镜像","children":[{"level":3,"title":"常用指令","slug":"常用指令","link":"#常用指令","children":[]},{"level":3,"title":"删除镜像","slug":"删除镜像","link":"#删除镜像","children":[]},{"level":3,"title":"镜像导出与导入","slug":"镜像导出与导入","link":"#镜像导出与导入","children":[]},{"level":3,"title":"将镜像跑为容器","slug":"将镜像跑为容器","link":"#将镜像跑为容器","children":[]},{"level":3,"title":"推送到 Habor","slug":"推送到-habor","link":"#推送到-habor","children":[]}]},{"level":2,"title":"容器","slug":"容器","link":"#容器","children":[{"level":3,"title":"常用指令","slug":"常用指令-1","link":"#常用指令-1","children":[]},{"level":3,"title":"从容器中复制文件到本地(docker cp)","slug":"从容器中复制文件到本地-docker-cp","link":"#从容器中复制文件到本地-docker-cp","children":[]},{"level":3,"title":"将容器重新打包成镜像","slug":"将容器重新打包成镜像","link":"#将容器重新打包成镜像","children":[]}]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[{"level":3,"title":"ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network","slug":"error-could-not-find-an-available-non-overlapping-ipv4-address-pool-among-the-defaults-to-assign-to-the-network","link":"#error-could-not-find-an-available-non-overlapping-ipv4-address-pool-among-the-defaults-to-assign-to-the-network","children":[]},{"level":3,"title":"unable to connect to deb.debian.org:http","slug":"unable-to-connect-to-deb-debian-org-http","link":"#unable-to-connect-to-deb-debian-org-http","children":[]},{"level":3,"title":"There is no public key","slug":"there-is-no-public-key","link":"#there-is-no-public-key","children":[]},{"level":3,"title":"debconf: delaying package configuration, since apt-utils is not installed","slug":"debconf-delaying-package-configuration-since-apt-utils-is-not-installed","link":"#debconf-delaying-package-configuration-since-apt-utils-is-not-installed","children":[]},{"level":3,"title":"安装插件失败 - failed to extract plugin [/usr/share/elasticsearch/plugins/head.zip]: ZipException[zip file is empty]","slug":"安装插件失败-failed-to-extract-plugin-usr-share-elasticsearch-plugins-head-zip-zipexception-zip-file-is-empty","link":"#安装插件失败-failed-to-extract-plugin-usr-share-elasticsearch-plugins-head-zip-zipexception-zip-file-is-empty","children":[]}]}],"git":{"createdTime":1667960979000,"updatedTime":1715323014000,"contributors":[{"name":"咸鱼型233","email":"ayusummer233@qq.com","commits":5},{"name":"233Official","email":"ayusummer233@qq.com","commits":3},{"name":"233JG","email":"ayusummer233@gmail.com","commits":2},{"name":"233Official","email":"ayusummr233@gmail.com","commits":1},{"name":"233PC","email":"ayusummer233@gmail.com","commits":1},{"name":"Ayusummer","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":11.17,"words":3350},"filePathRelative":"通识/Docker/Docker.md","localizedDate":"2022年11月9日","excerpt":"\\n<ul>\\n<li><a href=\\"#docker\\">Docker</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85\\">安装</a></li>\\n<li><a href=\\"#%E6%8D%A2%E6%BA%90\\">换源</a>\\n<ul>\\n<li><a href=\\"#docker-hub-%E6%8D%A2%E6%BA%90\\">Docker-hub 换源</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E9%95%9C%E5%83%8F\\">镜像</a>\\n<ul>\\n<li><a href=\\"#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4\\">常用指令</a></li>\\n<li><a href=\\"#%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F\\">删除镜像</a>\\n<ul>\\n<li><a href=\\"#%E5%88%A0%E9%99%A4%E4%B8%A4%E4%B8%AA-id-%E7%9B%B8%E5%90%8C%E7%9A%84%E9%95%9C%E5%83%8F\\">删除两个 id 相同的镜像</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E9%95%9C%E5%83%8F%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AF%BC%E5%85%A5\\">镜像导出与导入</a></li>\\n<li><a href=\\"#%E5%B0%86%E9%95%9C%E5%83%8F%E8%B7%91%E4%B8%BA%E5%AE%B9%E5%99%A8\\">将镜像跑为容器</a></li>\\n<li><a href=\\"#%E6%8E%A8%E9%80%81%E5%88%B0-habor\\">推送到 Habor</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%AE%B9%E5%99%A8\\">容器</a>\\n<ul>\\n<li><a href=\\"#%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-1\\">常用指令</a></li>\\n<li><a href=\\"#%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%AC%E5%9C%B0docker-cp\\">从容器中复制文件到本地(docker cp)</a></li>\\n<li><a href=\\"#%E5%B0%86%E5%AE%B9%E5%99%A8%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85%E6%88%90%E9%95%9C%E5%83%8F\\">将容器重新打包成镜像</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\\">常见问题</a>\\n<ul>\\n<li><a href=\\"#error-could-not-find-an-available-non-overlapping-ipv4-address-pool-among-the-defaults-to-assign-to-the-network\\">ERROR: could not find an available, non-overlapping IPv4 address pool among the defaults to assign to the network</a></li>\\n<li><a href=\\"#unable-to-connect-to-debdebianorghttp\\">unable to connect to deb.debian.org:http</a></li>\\n<li><a href=\\"#there-is-no-public-key\\">There is no public key</a></li>\\n<li><a href=\\"#debconf-delaying-package-configuration-since-apt-utils-is-not-installed\\">debconf: delaying package configuration, since apt-utils is not installed</a></li>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E5%A4%B1%E8%B4%A5---failed-to-extract-plugin-usrshareelasticsearchpluginsheadzip-zipexceptionzip-file-is-empty\\">安装插件失败 - failed to extract plugin [/usr/share/elasticsearch/plugins/head.zip]: ZipException[zip file is empty]</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{qe as comp,Ce as data};
